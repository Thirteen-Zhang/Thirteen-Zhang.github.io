<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode104</title>
      <link href="/post/c084510c.html"/>
      <url>/post/c084510c.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></h4><p>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><br>返回它的最大深度 <code>3</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>对于每一个节点来说，都应当知道自己在第几层。</p><p>比较每个节点的左节点和右节点的层数，返回最高的层数。</p><p>如果左节点或者右节点为空，那它们的层数应当是当前节点的层数。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMaxDrpth(root, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxDrpth</span><span class="params">(TreeNode root, <span class="type">int</span> result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(getMaxDrpth(root.left, result + <span class="number">1</span>), getMaxDrpth(root.right, result + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/c084510c/image-20221227231533730.png" alt="image-20221227231533730"></p><h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><h2 id="深度优先算法-DFS（Depth-First-Search）"><a href="#深度优先算法-DFS（Depth-First-Search）" class="headerlink" title="深度优先算法 DFS（Depth First Search）"></a>深度优先算法 DFS（Depth First Search）</h2><p>使用递归，对于每个节点，计算其左节点和右节点的最大深度，然后根据左右节点的最大深度，计算出本届点的最大深度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> maxDepth(root.right);</span><br><span class="line">            <span class="keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="广度优先算法-BFS（Breadth-First-Search）"><a href="#广度优先算法-BFS（Breadth-First-Search）" class="headerlink" title="广度优先算法 BFS（Breadth First Search）"></a>广度优先算法 BFS（Breadth First Search）</h2><p>对于深度优先算法来说，广度优先算法更容易理解。</p><p>广度优先算法原理是，挨个遍历每一层的元素。</p><p>思路为：</p><ul><li>创建队列，用于存放某一层的节点</li><li>使用一个变量来存储每一层有多少元素</li><li>使用一个变量来统计当前层数，当这一层节点个数为 0 时，代表深度为 <code>当前层数 - 1</code></li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size(); <span class="comment">//size 为上一层的 node 个数，将上一层 node 都 poll 后，剩余节点就是下一层节点。</span></span><br><span class="line">            <span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode101</title>
      <link href="/post/b0eea583.html"/>
      <url>/post/b0eea583.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a><a href="https://leetcode.cn/problems/symmetric-tree/">对称二叉树</a></h4><p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p><p>示例 1：</p><p><img src="/post/b0eea583/image-20221227230909077.png" alt="image-20221227230909077"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="/post/b0eea583/image-20221227230923765.png" alt="image-20221227230923765"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>树中节点数目在范围 [1, 1000] 内</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>对于二叉树的对称而言，对任意节点 root，其 left 节点 node1 和其 right 节点 node2 都有：</p><ul><li>node1.val == node2.val</li><li>node1.left.val == node2.right.val</li><li>node1.right.val == node2.left.val</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> symmetric(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">symmetric</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="literal">null</span> || right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> symmetric(left.left, right.right) &amp;&amp; symmetric(left.right, right.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/b0eea583/image-20221227223907248.png" alt="image-20221227223907248"></p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode100</title>
      <link href="/post/c7e99515.html"/>
      <url>/post/c7e99515.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a><a href="https://leetcode.cn/problems/same-tree/">相同的树</a></h4><p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code> ，编写一个函数来检验这两棵树是否相同。<br>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。 </p><p>示例 1：</p><p><img src="/post/c7e99515/image-20221227230817942.png" alt="image-20221227230817942"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：p = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], q = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="/post/c7e99515/image-20221227230834454.png" alt="image-20221227230834454"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：p = [<span class="number">1</span>,<span class="number">2</span>], q = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>示例 3：</p><p><img src="/post/c7e99515/image-20221227230846110.png" alt="image-20221227230846110"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：p = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>], q = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>两棵树上的节点数目都在范围 [0, 100] 内</code></li><li><code>-104 &lt;= Node.val &lt;= 104</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>对与二叉树，常使用递归。</p><p>二叉树的比较，可以看成对每个节点的比较。即对于每个节点，都要求根节点、左节点和子节点都相等。</p><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.val == q.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/c7e99515/image-20221227221914080.png" alt="image-20221227221914080"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == <span class="literal">null</span> &amp;&amp; q == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="literal">null</span> || q == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/post/3ad834c9.html"/>
      <url>/post/3ad834c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><code>Zookeeper</code> 是 <code>Apache Hadoop</code> 项目下的一个子项目，是一个树形目录服务。<br><code>Zookeeper</code> 是一个分布式的、开源的分布式应用程序的协调服务。<br><code>Zookeeper</code> 提供的主要功能包括：</p><ul><li>配置管理</li><li>分布式锁</li><li>集群管理</li></ul><h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><p><code>ZooKeeper</code> 服务器是用 <code>Java</code> 创建的，它运行在 <code>JVM</code> 之上。需要安装 <code>JDK 7</code> 或更高版本。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><p>例如 3.6.3 版本</p><p><img src="/post/3ad834c9/image-20221227145920199.png" alt="image-20221227145920199"></p><p><img src="/post/3ad834c9/image-20221227145930245.png" alt="image-20221227145930245"></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><img src="/post/3ad834c9/image-20221227145951494.png" alt="image-20221227145951494"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在 <code>zookeeper</code> 根目录 新建文件夹 <code>data</code></p><p><img src="/post/3ad834c9/image-20221227150222638.png" alt="image-20221227150222638"></p><p>进入 <code>conf</code> 目录，复制粘贴 <code>zoo_sample.cfg</code> ， 并重命名为 <code>zoo.cfg</code></p><p><img src="/post/3ad834c9/image-20221227150327016.png" alt="image-20221227150327016"></p><p>打开 <code>zoo.cfg</code> ，修改 <code>dataDir</code> 为 <code>dataDir=E:/develop/apache-zookeeper-3.6.3-bin/data</code> ，<strong>即根目录下的 <code>data</code> 文件夹</strong>。</p><p><img src="/post/3ad834c9/image-20221227150611680.png" alt="image-20221227150611680"></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>进入根目录下的 <code>bin</code> 目录，双击 <code>zkServer.cmd</code></p><h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><p><img src="/post/3ad834c9/image-20221227150840909.png" alt="image-20221227150840909"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zookeeper audit is diasbled</span><br></pre></td></tr></table></figure><p>修改 <code>oo.cfg</code>文件，添加一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">audit.enable=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227151133079.png" alt="image-20221227151133079"></p><p>以记事本方式打开 <code>zkServer.cmd</code> ，添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;-Dzookeeper.audit.enable=true&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227151538603.png" alt="image-20221227151538603"></p><p><img src="/post/3ad834c9/image-20221227152343369.png" alt="image-20221227152343369"></p><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><ul><li><code>ZooKeeper</code> 是一个树形目录服务，拥有一个层次化结构。</li><li>每一个节点都被称为： <code>ZNode</code> ，每个节点上都会保存自己的数据和节点信息。 </li><li>节点可以拥有子节点，同时也允许少量（1MB）数据存储在该节点之下。</li><li>节点可以分为四大类：<ul><li><code>PERSISTENT</code> 持久化节点 </li><li><code>EPHEMERAL</code> 临时节点 ：<code>-e</code></li><li><code>PERSISTENT_SEQUENTIAL</code> 持久化顺序节点 ：<code>-s</code></li><li><code>EPHEMERAL_SEQUENTIAL</code> 临时顺序节点  ：<code>-es</code></li></ul></li></ul><p><img src="/post/3ad834c9/image-20221227153111478.png" alt="image-20221227153111478"></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="服务端命令"><a href="#服务端命令" class="headerlink" title="服务端命令"></a>服务端命令</h2><p>启动：进入到 <code>zookeeper</code> <code>bin</code> 目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.cmd</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227154118497.png" alt="image-20221227154118497"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop <span class="comment">//停止</span></span><br><span class="line">status <span class="comment">//查看状态</span></span><br><span class="line">restart  <span class="comment">//重启</span></span><br></pre></td></tr></table></figure><h2 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h2><h3 id="连接服务端"><a href="#连接服务端" class="headerlink" title="连接服务端"></a>连接服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zkCli -server ip:port</span><br><span class="line">zkCli -server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2181</span></span><br></pre></td></tr></table></figure><h3 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h3 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure><h3 id="显示指定目录下节点"><a href="#显示指定目录下节点" class="headerlink" title="显示指定目录下节点"></a>显示指定目录下节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls 目录  <span class="comment">//例如根目录为 ls /</span></span><br></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create /节点path value    <span class="comment">//例如根目录为 create /node1 10086</span></span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227155452146.png" alt="image-20221227155452146"></p><h3 id="获取节点值"><a href="#获取节点值" class="headerlink" title="获取节点值"></a>获取节点值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get /节点path   <span class="comment">//例如获取创建的 node1 节点的值</span></span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227155534988.png" alt="image-20221227155534988"></p><h3 id="设置节点值"><a href="#设置节点值" class="headerlink" title="设置节点值"></a>设置节点值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set /节点path value</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227155656873.png" alt="image-20221227155656873"></p><h3 id="删除单个节点"><a href="#删除单个节点" class="headerlink" title="删除单个节点"></a>删除单个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete /节点path</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227155715960.png" alt="image-20221227155715960"></p><ul><li>当节点下有子节点的时候，无法删除该节点</li></ul><p><img src="/post/3ad834c9/image-20221227155928403.png" alt="image-20221227155928403"></p><h3 id="删除带有子节点的节点"><a href="#删除带有子节点的节点" class="headerlink" title="删除带有子节点的节点"></a>删除带有子节点的节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteall /节点path</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227160016264.png" alt="image-20221227160016264"></p><h3 id="创建临时节点"><a href="#创建临时节点" class="headerlink" title="创建临时节点"></a>创建临时节点</h3><p>创建节点的客户端断开连接后，临时节点就会消失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -e /节点path value      <span class="comment">//create -e /node1</span></span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227161220163.png" alt="image-20221227161220163"></p><h3 id="创建顺序节点"><a href="#创建顺序节点" class="headerlink" title="创建顺序节点"></a>创建顺序节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -s /节点path value</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227161346403.png" alt="image-20221227161346403"></p><p><img src="/post/3ad834c9/image-20221227161442234.png" alt="image-20221227161442234"></p><h3 id="创建临时顺序节点"><a href="#创建临时顺序节点" class="headerlink" title="创建临时顺序节点"></a>创建临时顺序节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create -es /节点path value</span><br></pre></td></tr></table></figure><h3 id="查询节点详细信息"><a href="#查询节点详细信息" class="headerlink" title="查询节点详细信息"></a>查询节点详细信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls –s /节点path </span><br></pre></td></tr></table></figure><ul><li><code>czxid</code>：节点被创建的事务 ID </li><li><code>ctime</code>: 创建时间 </li><li><code>mzxid</code>: 最后一次被更新的事务 ID </li><li><code>mtime</code>: 修改时间 </li><li><code>pzxid</code>：子节点列表最后一次被更新的事务 ID</li><li><code>cversion</code>：子节点的版本号 </li><li><code>dataversion</code>：数据版本号 </li><li><code>aclversion</code>：权限版本号 </li><li><code>ephemeralOwner</code>：用于临时节点，代表临时节点的事务 ID，如果为持久节点则为 <code>0</code></li><li><code>dataLength</code>：节点存储的数据的长度 </li><li><code>numChildren</code>：当前节点的子节点个数 </li></ul><p><img src="/post/3ad834c9/image-20221227161715295.png" alt="image-20221227161715295"></p><h1 id="Curator-API-操作"><a href="#Curator-API-操作" class="headerlink" title="Curator API 操作"></a>Curator API 操作</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Curator</code> 是 <code>Apache ZooKeeper</code> 的 <code>Java</code> 客户端库。<br><code>Curator</code> 项目的目标是简化 <code>ZooKeeper</code> 客户端的使用。<br><code>Curator</code> 最初是 <code>Netfix</code> 研发的,后来捐献了 <code>Apache</code> 基金会,目前是 <code>Apache</code> 的顶级项目。<br>官网：<a href="http://curator.apache.org/">http://curator.apache.org/</a></p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>创建 Maven 项目，修改 pom.xml 文件，加入如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--curator--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>resources</code> 目录下新建 <code>log4j.properties</code> 文件，添加如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">off,stdout</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%d&#123;yyyy-MM-dd HH/:mm/:ss&#125;]%-5p %c(line/:%L) %x-%m%n</span></span><br></pre></td></tr></table></figure><h2 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h2><p><code>src/test/java/com/zhang/CuratorTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建连接方式</p><ul><li><code>CuratorFrameworkFactory.newClient()</code></li></ul><p><img src="/post/3ad834c9/image-20221227184042540.png" alt="image-20221227184042540"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.newClient(<span class="string">&quot;127.0.0.1:2181&quot;</span>, <span class="number">60</span> * <span class="number">1000</span>, <span class="number">15</span> * <span class="number">1000</span>, <span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>));</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>CuratorFrameworkFactory.builder()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">client</span> <span class="operator">=</span> CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;127.0.0.1:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(<span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>))</span><br><span class="line">                <span class="comment">//.namespace(&quot;node&quot;)  //每次操作都在 node 节点下面</span></span><br><span class="line">                .build();</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>将上面测试方法的 <code>CuratorFramework client</code> 提升为全局变量。</p><p>更改 <code>testConnect</code> 方法。</p><p>书写释放资源方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorTest</span> &#123;</span><br><span class="line">    CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;127.0.0.1:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(<span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>))</span><br><span class="line">                .namespace(<span class="string">&quot;node&quot;</span>)  <span class="comment">//每次操作都在 node 节点下面</span></span><br><span class="line">                .build();</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227185815187.png" alt="image-20221227185815187"></p><h3 id="创建节点-1"><a href="#创建节点-1" class="headerlink" title="创建节点"></a>创建节点</h3><p> 如果创建节点，没有指定数据，则默认将当前客户端的 <code>ip</code> 作为数据存储</p><h4 id="创建不带数据节点"><a href="#创建不带数据节点" class="headerlink" title="创建不带数据节点"></a>创建不带数据节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.create().forPath(<span class="string">&quot;/node1&quot;</span>); <span class="comment">//在 namespace 指定node节点下创建 node1节点，如果不存在 node节点，先创建node节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227190042843.png" alt="image-20221227190042843"></p><h4 id="创建带数据节点"><a href="#创建带数据节点" class="headerlink" title="创建带数据节点"></a>创建带数据节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.create().forPath(<span class="string">&quot;/node2&quot;</span>, <span class="string">&quot;--node2&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227190553241.png" alt="image-20221227190553241"></p><h4 id="设置节点的类型"><a href="#设置节点的类型" class="headerlink" title="设置节点的类型"></a>设置节点的类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.create().withMode(CreateMode.EPHEMERAL).forPath(<span class="string">&quot;/node3&quot;</span>, <span class="string">&quot;--node3&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PERSISTENT  <span class="comment">//持久化目录节点，即使客户端与zk断开连接，该节点依然存在，只要不手动删除该节点，他将永远存在</span></span><br><span class="line">PERSISTENT_SEQUENTIAL <span class="comment">//持久化顺序编号目录节点，在持久化目录节点基础上，zk给该节点名称进行顺序编号</span></span><br><span class="line">EPHEMERAL <span class="comment">//临时目录节点，客户端与zk断开连接后，该节点就会被删除(session超时会被服务器自动清除)</span></span><br><span class="line">EPHEMERAL_SEQUENTIAL <span class="comment">//临时顺序编号目录节点</span></span><br><span class="line">CONTAINER <span class="comment">//3.5.3版本新增，如果该节点下面没有子节点，会被zk定期自动清除(60s检查一次)</span></span><br><span class="line">PERSISTENT_WITH_TTL <span class="comment">//持久ttl节点</span></span><br><span class="line">PERSISTENT_SEQUENTIAL_WITH_TTL <span class="comment">//持久有序ttl节点</span></span><br></pre></td></tr></table></figure><p>由于 <code>CreateMode.EPHEMERAL</code> 为临时节点，在执行完 <code>testCreate3()</code> 后，会执行 <code>close()</code> 方法，关闭客户端，节点会失效，所以查看不到节点。</p><p><img src="/post/3ad834c9/image-20221227191428384.png" alt="image-20221227191428384"></p><p>将 <code>@After</code> 注解注释掉再执行</p><p><img src="/post/3ad834c9/image-20221227191659930.png" alt="image-20221227191659930"></p><h4 id="创建多级节点"><a href="#创建多级节点" class="headerlink" title="创建多级节点"></a>创建多级节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.create()</span><br><span class="line">        .creatingParentsIfNeeded() <span class="comment">//如果不存在父级节点，则创建</span></span><br><span class="line">        .forPath(<span class="string">&quot;/node4/node5/node6&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227192227101.png" alt="image-20221227192227101"></p><h3 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h3><h4 id="查询节点的数据"><a href="#查询节点的数据" class="headerlink" title="查询节点的数据"></a>查询节点的数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = client.getData().forPath(<span class="string">&quot;/node1&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">    <span class="type">byte</span>[] bytes2 = client.getData().forPath(<span class="string">&quot;/node2&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes2);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(s)) &#123;</span><br><span class="line">        s = s.substring(<span class="number">0</span>, <span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">    System.out.println(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227193136273.png" alt="image-20221227193136273"></p><p><code>node1</code> 的值刚好印证了 <code>如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</code></p><h4 id="查询子节点"><a href="#查询子节点" class="headerlink" title="查询子节点"></a>查询子节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;String&gt; strings = client.getChildren().forPath(<span class="string">&quot;/node4&quot;</span>);</span><br><span class="line">    System.out.println(strings.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227193427380.png" alt="image-20221227193427380"></p><h4 id="查询节点的状态信息"><a href="#查询节点的状态信息" class="headerlink" title="查询节点的状态信息"></a>查询节点的状态信息</h4><p><img src="/post/3ad834c9/image-20221227193728984.png" alt="image-20221227193728984"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    <span class="type">byte</span>[] bytes = client.getData()</span><br><span class="line">        .storingStatIn(stat)  <span class="comment">//将状态信息封装到 start 对象中</span></span><br><span class="line">        .forPath(<span class="string">&quot;/node2&quot;</span>);</span><br><span class="line">    System.out.println(stat.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227193853279.png" alt="image-20221227193853279"></p><h3 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h3><h4 id="修改节点数据"><a href="#修改节点数据" class="headerlink" title="修改节点数据"></a>修改节点数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.setData().forPath(<span class="string">&quot;/node1&quot;</span>, <span class="string">&quot;--node1--&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227194646989.png" alt="image-20221227194646989"></p><h4 id="根据版本号修改数据"><a href="#根据版本号修改数据" class="headerlink" title="根据版本号修改数据"></a>根据版本号修改数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    <span class="type">byte</span>[] bytes = client.getData().storingStatIn(stat).forPath(<span class="string">&quot;/node2&quot;</span>);</span><br><span class="line">    System.out.println(stat.getAversion());</span><br><span class="line"></span><br><span class="line">    client.setData()</span><br><span class="line">        .withVersion(stat.getVersion())</span><br><span class="line">        .forPath(<span class="string">&quot;/node1&quot;</span>, <span class="string">&quot;--node1---&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处版本号为 <code>node2</code> 的版本号（我查询的结果是 <code>0</code> ），与 <code>node1</code> 的版本号（我查询的结果是 <code>1</code> ）不一致</p><p><img src="/post/3ad834c9/image-20221227195006718.png" alt="image-20221227195006718"></p><p>使用正确版本号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stat</span>();</span><br><span class="line">    <span class="type">byte</span>[] bytes = client.getData().storingStatIn(stat).forPath(<span class="string">&quot;/node1&quot;</span>);</span><br><span class="line">    System.out.println(stat.getAversion());</span><br><span class="line"></span><br><span class="line">    client.setData()</span><br><span class="line">        .withVersion(stat.getVersion())</span><br><span class="line">        .forPath(<span class="string">&quot;/node1&quot;</span>, <span class="string">&quot;--node1---&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227195117691.png" alt="image-20221227195117691"></p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><h4 id="删除单个节点-1"><a href="#删除单个节点-1" class="headerlink" title="删除单个节点"></a>删除单个节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.delete().forPath(<span class="string">&quot;/node1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227200228183.png" alt="image-20221227200228183"></p><p>当删除的节点有子节点时，会报错，比如尝试删除 <code>node4</code> 节点</p><p><img src="/post/3ad834c9/image-20221227200447582.png" alt="image-20221227200447582"></p><h4 id="删除带有子节点的节点-1"><a href="#删除带有子节点的节点-1" class="headerlink" title="删除带有子节点的节点"></a>删除带有子节点的节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.delete()</span><br><span class="line">        .deletingChildrenIfNeeded() <span class="comment">//如果要删除的节点有字节带你，也会删除</span></span><br><span class="line">        .forPath(<span class="string">&quot;/node4&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227200527913.png" alt="image-20221227200527913"></p><h4 id="保证成功的删除，执行一定会成功"><a href="#保证成功的删除，执行一定会成功" class="headerlink" title="保证成功的删除，执行一定会成功"></a>保证成功的删除，执行一定会成功</h4><p>因为网络抖动原因，可能某次执行操作会发送失败，此方法会重发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.delete()</span><br><span class="line">        .guaranteed()</span><br><span class="line">        .forPath(<span class="string">&quot;/node2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227200923172.png" alt="image-20221227200923172"></p><h4 id="删除并回调"><a href="#删除并回调" class="headerlink" title="删除并回调"></a>删除并回调</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.delete()</span><br><span class="line">        .guaranteed()</span><br><span class="line">        .inBackground((CuratorFramework client, CuratorEvent event) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除了 node7 节点！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="comment">//此处为 lambda 表达式写法</span></span><br><span class="line">                     )</span><br><span class="line">        .forPath(<span class="string">&quot;/node7&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    client.delete()</span><br><span class="line">        .guaranteed()</span><br><span class="line">        .inBackground(<span class="keyword">new</span> <span class="title class_">BackgroundCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(CuratorFramework client, CuratorEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除了 node7 节点！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .forPath(<span class="string">&quot;/node7&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227201708798.png" alt="image-20221227201708798"></p><p><img src="/post/3ad834c9/image-20221227201717459.png" alt="image-20221227201717459"></p><h2 id="Watch-监听"><a href="#Watch-监听" class="headerlink" title="Watch 监听"></a>Watch 监听</h2><p><code>ZooKeeper</code> 允许用户在指定节点上注册一些 <code>Watcher</code> ，并且在一些特定事件触发的时候，<code>ZooKeeper</code> 服务端会将事件通知到感兴趣的客户端上去，该机制是 <code>ZooKeeper</code> 实现分布式协调服务的重要特性。</p><p><code>ZooKeeper</code> 中引入了 <code>Watcher</code> 机制来实现了发布/订阅功能能，能够让多个订阅者同时监听某一个对象，当一个对象自身状态变化时，会通知所有订阅者。</p><p><code>ZooKeeper</code> 原生支持通过注册 <code>Watcher</code> 来进行事件监听，但是其使用并不是特别方便，需要开发人员自己反复注册Watcher，比较繁琐。</p><p><code>Curator</code> 引入了 <code>Cache</code> 来实现对 <code>ZooKeeper</code> 服务端事件的监听。</p><p><code>ZooKeeper</code> 提供了三种 <code>Watcher</code> ：</p><ul><li><code>NodeCache</code> : 只是监听某一个特定的节点</li><li><code>PathChildrenCache</code> : 监控一个 <code>ZNode</code> 的子节点. </li><li><code>TreeCache</code> : 可以监控整个树上的所有节点，类似于 <code>PathChildrenCache</code> 和 <code>NodeCache</code> 的组合</li></ul><p>新建测试类 <code>src/test/java/com/zhang/CuratorWatcherTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CuratorWatcherTest</span> &#123;</span><br><span class="line">    CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnect</span><span class="params">()</span> &#123;</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(<span class="string">&quot;127.0.0.1:2181&quot;</span>)</span><br><span class="line">                .sessionTimeoutMs(<span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">                .connectionTimeoutMs(<span class="number">15</span> * <span class="number">1000</span>)</span><br><span class="line">                .retryPolicy(<span class="keyword">new</span> <span class="title class_">ExponentialBackoffRetry</span>(<span class="number">3000</span>, <span class="number">10</span>))</span><br><span class="line">                .namespace(<span class="string">&quot;node&quot;</span>)  <span class="comment">//每次操作都在 node 节点下面</span></span><br><span class="line">                .build();</span><br><span class="line">        client.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NodeCache-监听"><a href="#NodeCache-监听" class="headerlink" title="NodeCache 监听"></a>NodeCache 监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 创建NodeCache对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">NodeCache</span> <span class="variable">nodeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NodeCache</span>(client,<span class="string">&quot;/node1&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 注册监听</span></span><br><span class="line">    nodeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">NodeCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点变化了~&quot;</span>);</span><br><span class="line">            <span class="comment">//获取修改节点后的数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = nodeCache.getCurrentData().getData();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3. 开启监听.如果设置为true，则开启监听是，加载缓冲数据</span></span><br><span class="line">    nodeCache.start(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3ad834c9/image-20221227210001459.png" alt="image-20221227210001459"></p><p><img src="/post/3ad834c9/image-20221227210007734.png" alt="image-20221227210007734"></p><h3 id="PathChildrenCache-监听"><a href="#PathChildrenCache-监听" class="headerlink" title="PathChildrenCache 监听"></a>PathChildrenCache 监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1.创建监听对象</span></span><br><span class="line">    <span class="type">PathChildrenCache</span> <span class="variable">pathChildrenCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathChildrenCache</span>(client, <span class="string">&quot;/node1&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//2. 绑定监听器</span></span><br><span class="line">    pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">PathChildrenCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子节点变化了~&quot;</span>);</span><br><span class="line">            System.out.println(event);</span><br><span class="line">            <span class="comment">//监听子节点的数据变更，并且拿到变更后的数据</span></span><br><span class="line">            <span class="comment">//1.获取类型</span></span><br><span class="line">            PathChildrenCacheEvent.<span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> event.getType();</span><br><span class="line">            <span class="comment">//2.判断类型是否是update</span></span><br><span class="line">            <span class="keyword">if</span> (type.equals(PathChildrenCacheEvent.Type.CHILD_UPDATED)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据变了！！！&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] data = event.getData().getData();</span><br><span class="line">                System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3. 开启</span></span><br><span class="line">    pathChildrenCache.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后显示产生了新连接</p><p><img src="/post/3ad834c9/image-20221227210605232.png" alt="image-20221227210605232"></p><p>客户端查询 <code>node1</code> 并没有子节点</p><p><img src="/post/3ad834c9/image-20221227210643589.png" alt="image-20221227210643589"></p><p>添加子节点</p><p><img src="/post/3ad834c9/image-20221227210716598.png" alt="image-20221227210716598"></p><p><img src="/post/3ad834c9/image-20221227210750203.png" alt="image-20221227210750203"></p><p>修改节点值</p><p><img src="/post/3ad834c9/image-20221227210815974.png" alt="image-20221227210815974"></p><p><img src="/post/3ad834c9/image-20221227210830117.png" alt="image-20221227210830117"></p><p>对 <code>node1</code> 节点变更</p><p><img src="/post/3ad834c9/image-20221227210957651.png" alt="image-20221227210957651"></p><p><img src="/post/3ad834c9/image-20221227211005340.png" alt="image-20221227211005340"></p><p>控制台无反应，说明并没有对 <code>node1</code> 监听，只对其子节点监听。</p><h3 id="TreeCache-监听"><a href="#TreeCache-监听" class="headerlink" title="TreeCache 监听"></a>TreeCache 监听</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 创建监听器</span></span><br><span class="line">    <span class="type">TreeCache</span> <span class="variable">treeCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeCache</span>(client,<span class="string">&quot;/node1&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 注册监听</span></span><br><span class="line">    treeCache.getListenable().addListener(<span class="keyword">new</span> <span class="title class_">TreeCacheListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">childEvent</span><span class="params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点变化了&quot;</span>);</span><br><span class="line">            System.out.println(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3. 开启</span></span><br><span class="line">    treeCache.start();</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>node2</code></p><p><img src="/post/3ad834c9/image-20221227212641480.png" alt="image-20221227212641480"></p><p><img src="/post/3ad834c9/image-20221227212614957.png" alt="image-20221227212614957"></p><p>修改 <code>node1</code></p><p><img src="/post/3ad834c9/image-20221227212701281.png" alt="image-20221227212701281"></p><p><img src="/post/3ad834c9/image-20221227212716278.png" alt="image-20221227212716278"></p><p>可以看出，对 node1 节点和其子节点都有监听。</p><h1 id="Zookeeper分布式锁"><a href="#Zookeeper分布式锁" class="headerlink" title="Zookeeper分布式锁"></a>Zookeeper分布式锁</h1><p>在我们进行单机应用开发，涉及并发同步的时候，我们往往采用 <code>synchronized</code> 或者 <code>Lock</code> 的方式来解决多线程间的代码同步问题，这时多线程的运行都是在同一个 <code>JVM</code> 之下，没有任何问题。</p><p>但当我们的应用是分布式集群工作的情况下，属于多 <code>JVM</code> 下的工作环境，跨 <code>JVM</code> 之间已经无法通过多线程的锁解决同步问题。</p><p>那么就需要一种更加高级的锁机制，来处理种跨机器的进程之间的数据同步问题——这就是分布式锁。</p><p><img src="/post/3ad834c9/image-20221227214009046.png" alt="image-20221227214009046"></p><h2 id="分布式锁原理"><a href="#分布式锁原理" class="headerlink" title="分布式锁原理"></a>分布式锁原理</h2><p>核心思想：当客户端要获取锁，则创建节点，使用完锁，则删除该节点。</p><ol><li><p>客户端获取锁时，在 <code>lock</code> 节点下创建<strong>临时顺序</strong>节点。</p></li><li><p>然后获取 <code>lock</code> 下面的所有子节点，客户端获取到所有的子节点之后，如果发现自己创建的子节点序号最小，那么就认为该客户端获取到了锁。使用完锁后，将该节点删除。</p></li><li><p>如果发现自己创建的节点并非 <code>lock</code> 所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要<strong>找到比自己小的那个节点，同时对其注册事件监听器，监听删除事件。</strong></p></li><li><p>如果发现比自己小的那个节点被删除，则客户端的 <code>Watcher</code> 会收到相应通知，此时再次判断自己创建的节点是否是 <code>lock</code> 子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点</p></li></ol><h1 id="Zookeeper集群"><a href="#Zookeeper集群" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h1><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>在 <code>ZooKeeper</code> 集群服中务中有三个角色：</p><ul><li><p><code>Leader</code> 领导者 ：          </p><ol><li>事务请求的唯一调度和处理者，保证集群事务处理的顺序性</li><li>集群内部各服务器的调度者</li></ol></li><li><p><code>Follower</code> 跟随者 ：</p><ol><li>处理客户端非事务请求，转发事务请求给 <code>Leader</code> 服务器</li><li>参与 <code>Leader</code> 选举投票</li><li>参与事务请求 <code>Proposal</code> 的投票</li></ol></li><li><p><code>Observer</code> 观察者：</p><ol><li>只处理客户端的非事务请求，转发事务请求给 <code>Leader</code> 服务器；通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力</li><li><strong>不参与</strong>事务请求<code>Proposal</code> 的投票</li><li><strong>不参与 </strong><code>Leader</code> 选举投票</li></ol></li></ul><p><img src="/post/3ad834c9/image-20221228153305276.png" alt="image-20221228153305276"></p><p><strong>事务请求：读以外的其他请求。增加，更新，删除节点请求</strong></p><h2 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h2><h3 id="选举触发时机"><a href="#选举触发时机" class="headerlink" title="选举触发时机"></a>选举触发时机</h3><ol><li><p>服务器启动时</p><p>当节点初始起动时会在集群中寻找 <code>Leader</code> 节点，如果找到则与 <code>Leader</code> 建立连接，其自身状态变为 <code>follower</code> 或 <code>observer</code> 。如果没有找到 <code>Leader</code> ，当前节点状态将变化 <code>LOOKING</code> ，进入选举流程。</p></li><li><p>服务器运行时，半数以上的节点无法和 <code>Leader</code> 建立连接</p><p> 在服务器运行期间，<code>follower</code> 或 <code>observer</code> 节点宕机只要不超过半数并不会影响整个集群服务的正常运行。但如果 <code>leader</code> 宕机，将暂停对外服务，所有 <code>follower</code> 将进入 <code>LOOKING</code> 状态，进入选举流程。</p></li></ol><h3 id="选举前提"><a href="#选举前提" class="headerlink" title="选举前提"></a>选举前提</h3><p>1、<code>Zookeeper</code>服务器处于 <code>LOOKING</code> 竞选状态，此时说明 <code>Zookeeper</code> 服务器集群处于群龙无首状态，另外，观察者状态不能参与竞选投票。</p><p>2、<code>Zookeeper</code> 集群规模至少要 <code>2</code> 台机器<br>        集群规则为：<code>2N + 1</code> 台，<code>N &gt; 0</code> ，即最少需要  <code>3</code>  台。因为 <code>ZK</code> 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 <code>ZK</code> 节点挂得太多，只剩一半或不到一半节点能工作时，集群才会失效。</p><h3 id="选举流程"><a href="#选举流程" class="headerlink" title="选举流程"></a>选举流程</h3><p>SID：服务器 ID 。用来唯一标识一台 <code>ZooKeeper</code> 集群中的机器，每台机器不能重复，和 <code>myid</code> 一致。<br>ZXID：事务 ID。<code>ZXID</code> 是一个事务 ID，用来标识一次服务器状态的变更。在某一时刻，集群中的每台机器的 <code>zxID</code> 值不一定完全一致，这和 <code>ZooKeeper</code> 服务器对于客户端”更新请求”的处理逻辑速度有关。<br>Bpoch：每个 <code>Leader</code> 任期的代号。没有 <code>Leader</code> 时同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加</p><p><img src="/post/3ad834c9/5bef0167139749a68e4058a4bb31e96b.png" alt="img"></p><h4 id="第一次启动时的选举"><a href="#第一次启动时的选举" class="headerlink" title="第一次启动时的选举"></a>第一次启动时的选举</h4><p><img src="/post/3ad834c9/image-20221228162707358.png" alt="image-20221228162707358"></p><ol><li>服务器 1 启动，发起一次选举。服务器 1 投自己一票。此时服务器1票数一票，不够半数以上（3票)，选举无法完成，服务器 1 状态保持为 <code>LOOKING</code></li><li>服务器 2 启动，再发起一次选举。服务器 1 和 2 分别投自己一票并交换选票信息。此时服务器 1 发现服务器 2 的 <code>myid</code> 比自己目前投票推举的（服务器 1 )大，更改选票为推举服务器 2 。此时服务器 1 票数 0 票，服务器 2 票数 2 票，没有半数以上结果，选举无法完成，服务器 1，2 状态保持 <code>LOOKING</code></li><li>服务器 3 启动，发起一次选举。此时服务器 1 和 2 都会更改选票为服务器 3 。此次投票结果：服务器 1 为 0 票，服务器 2 为 0 票，服务器 3 为 3 票。此时服务器 3 的票数已经超过半数，服务器 3 当选 <code>Leader</code> 。服务器 1 ，2 更改状态为 <code>FOLLOWING</code>，服务器 3 更改状态为 <code>LEADING</code></li><li>服务器 4 启动，发起一次选举。此时服务器 1，2，3 已经不是 <code>LooKING</code> 状态，不会更改选票信息。交换选票信息结果：服务器 3 为 3 票，服务器 4 为 1 票。此时服务器 4 服从多数，更改选票信息为服务器 3 ，并更改状态为 <code>FOLOWING</code></li><li>服务器 5 启动，同 4 一样当小弟。</li></ol><h4 id="非第一次启动时的选举"><a href="#非第一次启动时的选举" class="headerlink" title="非第一次启动时的选举"></a>非第一次启动时的选举</h4><p><img src="/post/3ad834c9/image-20221228162732917.png" alt="image-20221228162732917"></p><p>当 <code>ZooKeeper</code> 集群中的一台服务器出现以下两种情况之一时，就会开始进入 Leader 选举:</p><p>服务器初始化启动。<br>服务器运行期间无法和 <code>Leader</code> 保持连接。</p><p>而当一台机器进入 Leader 选举流程时，当前集群也可能会处于以下两种状态:</p><ul><li><p>集群中本来就己经存在一个 Leader。</p></li><li><p>集群中确实不存在 Leader。</p></li></ul><p>EPOCH 大的直接胜出<br>EPOCH 相同，事务 id 大的胜出<br>事务 id 相同，服务器 id 大的胜出</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode94</title>
      <link href="/post/fee39f7c.html"/>
      <url>/post/fee39f7c.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">二叉树的中序遍历</a></h4><p>给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。</p><p>示例 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong></p><ul><li><code>树中节点数目在范围 [0, 100] 内</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode() &#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答描述"><a href="#解答描述" class="headerlink" title="解答描述"></a>解答描述</h1><p>学过数据结构的都知道，对于二叉树的遍历，采用递归方法。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        recurrenceRoot(root, list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recurrenceRoot</span><span class="params">(TreeNode root, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        recurrenceRoot(root.left, list);</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        recurrenceRoot(root.right, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/fee39f7c/image-20221226230017546.png" alt="image-20221226230017546"></p><h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><p>如果不能使用递归，那如何解？</p><p>递归是利用了栈先进后出的特性。</p><p>假设存在二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">root.left = left;</span><br><span class="line">root.right = right;</span><br></pre></td></tr></table></figure><p><img src="/post/fee39f7c/image-20221226230829223.png" alt="image-20221226230829223"></p><p>那么中序遍历结果应当是 [2, 1, 3] ，递归顺序是如何？</p><ol><li>root 进栈</li><li>root 有 left 节点， left 节点进栈</li><li>left 节点没有左节点，left 节点出栈</li><li>left 节点没有右节点</li><li>root 节点出栈</li><li>root 节点有右节点，right 节点进栈</li><li>right 节点没有左节点，right 节点出栈</li><li>right 节点没有右节点，程序终止。</li></ol><p>实际上，对每个节点，都遵循如下操作：</p><ol><li>根节点进栈</li><li>左节点进栈</li><li>左节点出栈</li><li>根节点出栈</li><li>右节点进栈</li><li>右节点出栈</li></ol><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                list.add(tmp.val);</span><br><span class="line">                root = tmp.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/fee39f7c/image-20221226234706480.png" alt="image-20221226234706480"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode88</title>
      <link href="/post/ee4ee216.html"/>
      <url>/post/ee4ee216.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="合并两个有序数组"><a href="#合并两个有序数组" class="headerlink" title="合并两个有序数组"></a><a href="https://leetcode.cn/problems/merge-sorted-array/">合并两个有序数组</a></h4><p>给你两个按<strong>非递减顺序</strong>排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。<br>请你<strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按<strong>非递减顺序</strong>排列。<br><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p><p>示例 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], m = <span class="number">3</span>, nums2 = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>], n = <span class="number">3</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">解释：需要合并 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] 和 [<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] 。</span><br><span class="line">合并结果是 [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [<span class="number">1</span>], m = <span class="number">1</span>, nums2 = [], n = <span class="number">0</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line">解释：需要合并 [<span class="number">1</span>] 和 [] 。</span><br><span class="line">合并结果是 [<span class="number">1</span>] 。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [<span class="number">0</span>], m = <span class="number">0</span>, nums2 = [<span class="number">1</span>], n = <span class="number">1</span></span><br><span class="line">输出：[<span class="number">1</span>]</span><br><span class="line">解释：需要合并的数组是 [] 和 [<span class="number">1</span>] 。</span><br><span class="line">合并结果是 [<span class="number">1</span>] 。</span><br><span class="line">注意，因为 m = <span class="number">0</span> ，所以 nums1 中没有元素。nums1 中仅存的 <span class="number">0</span> 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>题意大概是：将数组 <code>nums2</code> 中的元素添加到 <code>nums1</code> 中，添加的索引从 <code>m</code> 开始，追加 <code>n</code> 个。</p><p>但是考虑到添加完成后，<code>nums1</code> 应当是有序的，添加操作应从尾部开始。</p><ul><li>比较 <code>nums1[m - 1]</code> 和 <code>nums2[n -1]</code>，将大的放入 <code>nums[m + n -1]</code> 。</li><li>循环一直比较。</li></ul><p>本质其实还是双指针。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//初始化指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> m + n - <span class="number">1</span>;</span><br><span class="line">        --m;</span><br><span class="line">        --n;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[m] &gt;= nums2[n]) &#123;</span><br><span class="line">                nums1[index--] = nums1[m--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums1[index--] = nums2[n--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束后，nums2 可能还有数据没有存入数组。</span></span><br><span class="line">        <span class="keyword">if</span> (n != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                nums1[n] = nums2[n--];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/ee4ee216/image-20221226223940589.png" alt="image-20221226223940589"></p><h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><h2 id="先添加再排序"><a href="#先添加再排序" class="headerlink" title="先添加再排序"></a>先添加再排序</h2><p>将 nums2 从 nums1 的 m 索引开始追加，然后排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            nums1[m++] = nums2[i]; <span class="comment">//注意次数 i 的自增是靠循环控制的。</span></span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/ee4ee216/image-20221226224245104.png" alt="image-20221226224245104"></p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode83</title>
      <link href="/post/799c3b9e.html"/>
      <url>/post/799c3b9e.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="删除排序链表中的重复元素"><a href="#删除排序链表中的重复元素" class="headerlink" title="删除排序链表中的重复元素"></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">删除排序链表中的重复元素</a></h4><p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。</p><p>示例 1：</p><p><img src="/post/799c3b9e/image-20221226224417342.png" alt="image-20221226224417342"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>示例 2：</p><p><img src="/post/799c3b9e/image-20221226224427754.png" alt="image-20221226224427754"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>链表中节点数目在范围 [0, 300] 内</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>题目数据保证链表已经按升序 排列</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>本题与 <a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">leetcode26、删除有序数组中的重复项</a>有些相似，同样可以采取双指针。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">left</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">right</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">                left.next = right;</span><br><span class="line">                left = right;</span><br><span class="line">            &#125;</span><br><span class="line">            right = right.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//收尾，循环到最后，存在left.val = left.next.val</span></span><br><span class="line">        left.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/799c3b9e/image-20221226220905437.png" alt="image-20221226220905437"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode70</title>
      <link href="/post/670d76eb.html"/>
      <url>/post/670d76eb.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">爬楼梯</a></h4><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。<br>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>示例 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">2</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">2</span> 阶</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line"><span class="number">1.</span> <span class="number">1</span> 阶 + <span class="number">1</span> 阶 + <span class="number">1</span> 阶</span><br><span class="line"><span class="number">2.</span> <span class="number">1</span> 阶 + <span class="number">2</span> 阶</span><br><span class="line"><span class="number">3.</span> <span class="number">2</span> 阶 + <span class="number">1</span> 阶</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n == <span class="number">1</span>,  answer = <span class="number">1</span>;</span><br><span class="line">n == <span class="number">2</span>,  answer = <span class="number">2</span>;</span><br><span class="line">n == <span class="number">3</span>,  answer = <span class="number">3</span>;</span><br><span class="line">n == <span class="number">4</span>,  answer = <span class="number">5</span>;</span><br><span class="line">n == <span class="number">5</span>,  answer = <span class="number">8</span>;</span><br><span class="line">n == <span class="number">6</span>,  answer = <span class="number">13</span>;</span><br><span class="line">n == <span class="number">7</span>,  answer = <span class="number">21</span>;</span><br></pre></td></tr></table></figure><p>当 n &gt; 2 时，对于任意 n ，都存在 f(n) = f(n - 1) + f(n - 2)。（动态规划，这是一个<a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145">斐波那契数列</a>）</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/670d76eb/image-20221226185208124.png" alt="image-20221226185208124"></p><p>多次提交，全超出时间限制。自己使用 Idea 测试了一遍代码，代码书写正确。</p><p>那说明需要优化。</p><p>当我们计算 f(45) 时，本质上是计算 f(44) + f(43) ，可是在计算 f(45) 时，我们已经知道了 f(44) 和 f(43) 的值 （栈是先进后出， f (45) 比 f(44) 先进栈）。</p><p>那么，我们可以使用一个 map 存储 n 与 f(n) ，避免大量的重复运算。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            map.put(n, n);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map.get(n) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> climbStairs(n - <span class="number">1</span>) + climbStairs(n - <span class="number">2</span>);</span><br><span class="line">            map.put(n, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/670d76eb/image-20221226190016795.png" alt="image-20221226190016795"></p><h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><p>很多时候，递归只是为了解决一些用循环无法解决的问题。递归的效率并不高。</p><h2 id="斐波那契数列通项公式"><a href="#斐波那契数列通项公式" class="headerlink" title="斐波那契数列通项公式"></a>斐波那契数列通项公式</h2><p><img src="/post/670d76eb/image-20221226191501049.png" alt="image-20221226191501049"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sqrt_5</span> <span class="operator">=</span> Math.sqrt(<span class="number">5</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">fib_n</span> <span class="operator">=</span> Math.pow((<span class="number">1</span> + sqrt_5) / <span class="number">2</span>, n + <span class="number">1</span>) - Math.pow((<span class="number">1</span> - sqrt_5) / <span class="number">2</span>,n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)(fib_n / sqrt_5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/670d76eb/image-20221226191618853.png" alt="image-20221226191618853"></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            result = dp[<span class="number">0</span>] + dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/670d76eb/image-20221226192040375.png" alt="image-20221226192040375"></p><h2 id="枚举暴力解法"><a href="#枚举暴力解法" class="headerlink" title="枚举暴力解法"></a>枚举暴力解法</h2><p>题目描述中， 1 &lt;= n &lt;= 45 ， 也就是说最多只有 45 种答案，可以使用超愚蠢的枚举法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: result = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: result = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: result = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: result = <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: result = <span class="number">8</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: result = <span class="number">13</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>: result = <span class="number">21</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>: result = <span class="number">34</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>: result = <span class="number">55</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>: result = <span class="number">89</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>: result = <span class="number">144</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>: result = <span class="number">233</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>: result = <span class="number">377</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>: result = <span class="number">610</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>: result = <span class="number">987</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>: result = <span class="number">1597</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">17</span>: result = <span class="number">2584</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>: result = <span class="number">4181</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">19</span>: result = <span class="number">6765</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">20</span>: result = <span class="number">10946</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>: result = <span class="number">17711</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>: result = <span class="number">28657</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">23</span>: result = <span class="number">46368</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">24</span>: result = <span class="number">75025</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">25</span>: result = <span class="number">121393</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">26</span>: result = <span class="number">196418</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">27</span>: result = <span class="number">317811</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">28</span>: result = <span class="number">514229</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">29</span>: result = <span class="number">832040</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">30</span>: result = <span class="number">1346269</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">31</span>: result = <span class="number">2178309</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">32</span>: result = <span class="number">3524578</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">33</span>: result = <span class="number">5702887</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">34</span>: result = <span class="number">9227465</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">35</span>: result = <span class="number">14930352</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">36</span>: result = <span class="number">24157817</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">37</span>: result = <span class="number">39088169</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">38</span>: result = <span class="number">63245986</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">39</span>: result = <span class="number">102334155</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">40</span>: result = <span class="number">165580141</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">41</span>: result = <span class="number">267914296</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">42</span>: result = <span class="number">433494437</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">43</span>: result = <span class="number">701408733</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">44</span>: result = <span class="number">1134903170</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">45</span>: result = <span class="number">1836311903</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/670d76eb/image-20221226192311063.png" alt="image-20221226192311063"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode69</title>
      <link href="/post/7caff0e.html"/>
      <url>/post/7caff0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根 "></a><a href="https://leetcode.cn/problems/sqrtx/">x 的平方根 </a></h4><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code> 的<strong>算术平方根</strong> 。<br>由于返回类型是整数，结果只保留<strong>整数部分</strong> ，小数部分将被<strong>舍去</strong> 。<br>注意：不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p>示例 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = <span class="number">4</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = <span class="number">8</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：<span class="number">8</span> 的算术平方根是 <span class="number">2.82842</span>..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong></p><ul><li><code>0 &lt;= x &lt;= 231 - 1</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>我首先想到的是缩小遍历范围。一定存在一种特殊关系，根据 x 的大小可以确定 平方根的大概范围。</p><p>由于上面一种方案我并不了解其中的关系，所以我在想是否有其他方法？</p><p>二分法。</p><p>这题本质上也是顺序查找，只不过最后<strong>一定存在某个数 a ，使得 <code>a * a &lt; x</code> 且 <code>(a + 1) * (a + 1) &gt; x</code></strong> 。那么，这个 a 便是本题的解。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> x;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> ((right - left) &gt;&gt; <span class="number">1</span>) + left;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>)mid * mid &lt; x) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">long</span>)mid * mid == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left * left &gt; x ? left -<span class="number">1</span> : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/7caff0e/image-20221226180853692.png" alt="image-20221226180853692"></p><p><strong>踩坑：</strong></p><ul><li><code>int mid = ((right - left) &gt;&gt; 1) + left;</code> 对于 mid 值，使用 <code>(right + left) &gt;&gt; 1</code> 会出现溢出。</li><li><code>(long)mid * mid &lt; x；</code>  对于 <code>mid * mid</code> 有概率溢出。</li></ul><p>对于 <code>mid * mid</code> 溢出问题，我们可以使用 <code>mid &lt; x / mid</code> 判断，消除溢出的可能。但是，我们要在极限边界讨论中排除 <code>mid  = 0</code> 的可能。</p><p>对于边界值的写法补充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> mid * mid;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; x) high = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (r &lt; x) low = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (<span class="type">int</span>) mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) low - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> mid * mid;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; x) high = mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (r &lt; x) low = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (<span class="type">int</span>) mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) low - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">r</span> <span class="operator">=</span> mid * mid;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; x) high = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (r &lt; x) low = mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (<span class="type">int</span>) mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) low;</span><br></pre></td></tr></table></figure><h1 id="其他解法："><a href="#其他解法：" class="headerlink" title="其他解法："></a>其他解法：</h1><h2 id="牛顿迭代"><a href="#牛顿迭代" class="headerlink" title="牛顿迭代"></a>牛顿迭代</h2><p><a href="https://leetcode.cn/problems/sqrtx/solution/x-de-ping-fang-gen-by-leetcode-solution/">https://leetcode.cn/problems/sqrtx/solution/x-de-ping-fang-gen-by-leetcode-solution/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode67</title>
      <link href="/post/e072d209.html"/>
      <url>/post/e072d209.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="二进制求和"><a href="#二进制求和" class="headerlink" title="二进制求和"></a><a href="https://leetcode.cn/problems/add-binary/">二进制求和</a></h4><p>给你两个二进制字符串 <code>a</code> 和 <code>b</code> ，以二进制字符串的形式返回它们的和。</p><p>示例 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:a = <span class="string">&quot;11&quot;</span>, b = <span class="string">&quot;1&quot;</span></span><br><span class="line">输出：<span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = <span class="string">&quot;1010&quot;</span>, b = <span class="string">&quot;1011&quot;</span></span><br><span class="line">输出：<span class="string">&quot;10101&quot;</span></span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= a.length, b.length &lt;= 104</code></li><li><code>a 和 b 仅由字符 &#39;0&#39; 或 &#39;1&#39; 组成</code></li><li><code>字符串如果不是 &quot;0&quot; ，就不含前导零</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><ul><li><p>定义一个变量，存储是否存在进位。</p></li><li><p>两个字符串可能长度不相等，对不相等的地方相加，循环结束之后，长字符串多余的部分只需要和进位相加就行。</p></li><li>存在溢出，即超于最长字符串长度。判断方法为最长字符串遍历完成后，进位标志表示还要进位。</li></ul><p>对于溢出处理，我们可以选择使用 <code>StringBuilder</code> 类，我们对循环得到的每次数据都进行 <code>append</code>，最后反转字符串。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//循环相加两个字符串相同长度的低位数部分</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> carry;</span><br><span class="line">            sum += a.charAt(i--) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            sum += b.charAt(j--) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            carry = sum / <span class="number">2</span>;</span><br><span class="line">            builder.append(sum % <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 a 还没遍历完成（a串比b串长），则继续遍历添加 a 的剩余部分</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> carry + a.charAt(i--) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            carry = sum / <span class="number">2</span>;</span><br><span class="line">            builder.append(sum % <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 b 还没遍历完成（b串比a串长），则继续遍历添加 b 的剩余部分</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> carry + b.charAt(j--) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            carry = sum / <span class="number">2</span>;</span><br><span class="line">            builder.append(sum % <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果 carry 不等于0 还有个进位数没加进去，需要补充</span></span><br><span class="line">        <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">            builder.append(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//反转字符串获得正常结果</span></span><br><span class="line">        <span class="keyword">return</span> builder.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/e072d209/image-20221226163946910.png" alt="image-20221226163946910"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码阅读环境搭建</title>
      <link href="/post/37da52d6.html"/>
      <url>/post/37da52d6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h1><h2 id="下载-gradle"><a href="#下载-gradle" class="headerlink" title="下载 gradle"></a>下载 gradle</h2><p>Spring 5.x 使用的 gradle 版本是 4.4.1 ，在这里我下载 4.4.1版本。、</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gradle.org/releases/</span><br></pre></td></tr></table></figure><p><img src="/post/37da52d6/image-20221225020325110.png" alt="image-20221225020325110"></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>将下载的压缩包解压到需要安装的目录即可。</p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>新建系统变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRADLE_HOME</span><br><span class="line">E:\develop\gradle-<span class="number">4.4</span><span class="number">.1</span>  <span class="comment">//你的 gradle 根目录</span></span><br></pre></td></tr></table></figure><p><img src="/post/37da52d6/image-20221225020503433.png" alt="image-20221225020503433"></p><p>修改 path ，添加 <code>%GRADLE_HOME%\bin;</code> 。</p><p>打开 cmd ，输入 gradle -version 。</p><p><img src="/post/37da52d6/image-20221225020651173.png" alt="image-20221225020651173"></p><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>在 gradle 根目录下找到 init.d文件夹， 新建文件 init.gradle ，复制粘贴以下内容：</p><ul><li>目的是修改gradle下载依赖的地址，我们改为了阿里仓库。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">gradle.projectsLoaded &#123;</span><br><span class="line">    rootProject.allprojects &#123;</span><br><span class="line">        buildscript &#123;</span><br><span class="line">            repositories &#123;</span><br><span class="line">                def JCENTER_URL = &#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span><br><span class="line">                def GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google&#x27;</span><br><span class="line">                def NEXUS_URL = &#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span><br><span class="line">                all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">                    if (repo instanceof MavenArtifactRepository) &#123;</span><br><span class="line">                        def url = repo.url.toString()</span><br><span class="line">                        if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class="line">                            project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;</span><br><span class="line">                            println(&quot;buildscript $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;)</span><br><span class="line">                            remove repo</span><br><span class="line">                        &#125;</span><br><span class="line">                        else if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123;</span><br><span class="line">                            project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;</span><br><span class="line">                            println(&quot;buildscript $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;)</span><br><span class="line">                            remove repo</span><br><span class="line">                        &#125;</span><br><span class="line">                        else if (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)) &#123;</span><br><span class="line">                            project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span><br><span class="line">                            println(&quot;buildscript $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;)</span><br><span class="line">                            remove repo</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                jcenter &#123;</span><br><span class="line">                    url JCENTER_URL</span><br><span class="line">                &#125;</span><br><span class="line">                google &#123;</span><br><span class="line">                    url GOOGLE_URL</span><br><span class="line">                &#125;</span><br><span class="line">                maven &#123;</span><br><span class="line">                    url NEXUS_URL</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            def JCENTER_URL = &#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span><br><span class="line">            def GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google&#x27;</span><br><span class="line">            def NEXUS_URL = &#x27;http://maven.aliyun.com/nexus/content/repositories/jcenter&#x27;</span><br><span class="line">            all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">                if (repo instanceof MavenArtifactRepository) &#123;</span><br><span class="line">                    def url = repo.url.toString()</span><br><span class="line">                    if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123;</span><br><span class="line">                        project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;</span><br><span class="line">                        println(&quot;buildscript $&#123;repo.url&#125; replaced by $JCENTER_URL.&quot;)</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123;</span><br><span class="line">                        project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;</span><br><span class="line">                        println(&quot;buildscript $&#123;repo.url&#125; replaced by $GOOGLE_URL.&quot;)</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (url.startsWith(&#x27;https://repo1.maven.org/maven2&#x27;)) &#123;</span><br><span class="line">                        project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;</span><br><span class="line">                        println(&quot;buildscript $&#123;repo.url&#125; replaced by $REPOSITORY_URL.&quot;)</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            jcenter &#123;</span><br><span class="line">                url JCENTER_URL</span><br><span class="line">            &#125;</span><br><span class="line">            google &#123;</span><br><span class="line">                url GOOGLE_URL</span><br><span class="line">            &#125;</span><br><span class="line">            maven &#123;</span><br><span class="line">                url NEXUS_URL</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Idea-集成"><a href="#Idea-集成" class="headerlink" title="Idea 集成"></a>Idea 集成</h2>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode66</title>
      <link href="/post/9775e29f.html"/>
      <url>/post/9775e29f.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="加一"><a href="#加一" class="headerlink" title="加一"></a><a href="https://leetcode.cn/problems/plus-one/">加一</a></h4><p>给定一个由<strong>整数</strong>组成的<strong>非空</strong>数组所表示的非负整数，在该数的基础上加一。<br>最高位数字存放在数组的首位， 数组中每个元素只存储<strong>单个</strong>数字。<br>你可以假设除了整数 <code>0</code> 之外，这个整数不会以零开头。</p><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">解释：输入数组表示数字 <span class="number">123</span>。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释：输入数组表示数字 <span class="number">4321</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><br><strong>提示：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 100</code></li><li><code>0 &lt;= digits[i] &lt;= 9</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int[] plusOne(int[] digits) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>整数相加，涉及到进位操作。在数组中，遇到 <code>9</code> 则需要进位，<code>非9</code> 则不需要进位。</p><ul><li>倒序遍历数组，如果索引处为 <code>9</code> ，则置为 <code>0</code> ，继续遍历。</li><li>如果索引处为 <code>非9</code> ，则 <code>+1</code> ，直接打破循环。</li><li>如果数组中所有索引处都是 <code>9</code> ，遍历完成后的所有索引定然是 <code>0</code> ，我们只需要判断最高位（即 <code>digits[0]</code> ）处是否为 <code>0</code>，是则代表需要扩容。</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> digits.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> len - <span class="number">1</span>; r &gt;= <span class="number">0</span>; --r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[r] &lt; <span class="number">9</span>) &#123;</span><br><span class="line">                digits[r]++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                digits[r] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扩容，此可能性出现在数组中的每一个元素都为9时。扩容后返回值定然为 100...00</span></span><br><span class="line">        <span class="keyword">if</span> (digits[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[len+<span class="number">1</span>];</span><br><span class="line">            answer[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> answer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/9775e29f/image-20221224192324574.png" alt="image-20221224192324574"></p><h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><h2 id="进一法"><a href="#进一法" class="headerlink" title="进一法"></a>进一法</h2><p>定义一个变量存储是否需要进位。</p><p>代码实现：</p><p>略</p><h2 id="首位为-非9-索引"><a href="#首位为-非9-索引" class="headerlink" title="首位为 非9 索引"></a>首位为 非9 索引</h2><ul><li>对数组倒序遍历，当出现索引处整数为 <code>非9</code> 时 <code>break</code>，返回索引。</li><li>如果循环结束， 索引的值为 <code>-1</code> ，代表并未找到 <code>非9</code> 元素。说明全部元素均为 <code>9</code> ，需要扩容，扩容参考上面代码。</li><li>如果索引不为 <code>-1</code> ，则把索引处元素 <code>+1</code> ，其后所有元素均置为 <code>0</code> 。</li></ul><p>对于以上思路，更方便写法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] plusOne(<span class="type">int</span>[] digits) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> digits.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] != <span class="number">9</span>) &#123;</span><br><span class="line">                ++digits[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    digits[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// digits 中所有的元素均为 9</span></span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode58</title>
      <link href="/post/5be09c5b.html"/>
      <url>/post/5be09c5b.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="最后一个单词的长度"><a href="#最后一个单词的长度" class="headerlink" title="最后一个单词的长度"></a><a href="https://leetcode.cn/problems/length-of-last-word/">最后一个单词的长度</a></h4><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。<br>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。<br>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：最后一个单词是“World”，长度为<span class="number">5</span>。</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;   fly me   to   the moon  &quot;</span></span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最后一个单词是“moon”，长度为<span class="number">4</span>。</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;luffy is still joyboy&quot;</span></span><br><span class="line">输出：<span class="number">6</span></span><br><span class="line">解释：最后一个单词是长度为<span class="number">6</span>的“joyboy”。</span><br></pre></td></tr></table></figure><br><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s 仅有英文字母和空格 &#39; &#39; 组成</code></li><li><code>s 中至少存在一个单词</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>返回最后一个单词的长度，我首先想到的是倒序遍历。</p><p>官方给的示例中，<strong>字符串结尾可能存在一个或多个空格</strong>，所以倒序遍历时，应当考虑空格是否出在结尾。</p><ul><li>定义一个 <code>int len</code> 用来储存 最后一个单词的长度，默认值为 <code>0</code> 。</li><li>倒序遍历时，当 <code>.charAt(index) != &#39; &#39;</code> 时，<code>en++</code>。</li><li>若是 <code>s.charAt(index) == &#39; &#39;</code> ，有两种情况，一种是还没遇到单词，这个字符只是字符串结尾的空格，另一种则是这个空格是单词的分割符。判定这两者的的情况可以靠 <code>len == 0</code> 。</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(r) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (len != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> len;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5be09c5b/image-20221223184614552.png" alt="image-20221223184614552"></p><h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><p>在上面的解法中，我们并未剔除掉结尾的空格，<code>len</code> 的作用除了统计最后一个单词长度外，还用来表示之前是否有匹配到单词字符。</p><h2 id="剔除结尾空格的倒序遍历"><a href="#剔除结尾空格的倒序遍历" class="headerlink" title="剔除结尾空格的倒序遍历"></a>剔除结尾空格的倒序遍历</h2><p>我们可以先记录最后一个非空格的字符的索引，再从这个索引开始倒序遍历。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; s.charAt(index) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; s.charAt(index) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5be09c5b/image-20221223185908175.png" alt="image-20221223185908175"></p><h2 id="暴力API"><a href="#暴力API" class="headerlink" title="暴力API"></a>暴力API</h2><p>除了使用遍历的方法以外，我们还可以使用 API 来进行解答。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] strArr = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (strArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strArr[strArr.length - <span class="number">1</span>].length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5be09c5b/image-20221223190507571.png" alt="image-20221223190507571"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode35</title>
      <link href="/post/730b4760.html"/>
      <url>/post/730b4760.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="搜索插入位置"><a href="#搜索插入位置" class="headerlink" title="搜索插入位置"></a><a href="https://leetcode.cn/problems/search-insert-position/">搜索插入位置</a></h4><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。<br>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], target = <span class="number">5</span></span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>示例 2:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], target = <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure><br>示例 3:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], target = <span class="number">7</span></span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure><br><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums 为 无重复元素 的 升序 排列数组</code></li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>顺序数组，查找目标值，我首先想到的是 二分查找。</p><p>题目描述中要求<strong>必须使用时间复杂度为 <code>O(log n)</code> 的算法</strong>，恰巧二分查找的时间复杂度就是 <code>O(log n)</code> 。</p><p>对于二分查找，求中间值有不同方法。有两种情况，一种是中间值偏左，例如 <code>1、2、3、4</code> ，中间值可能为 <code>2</code> 或者 <code>3</code> ，取 <code>2</code> 为偏左的情况，取 <code>3</code> 为偏右的情况。</p><p>取法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//偏左</span></span><br><span class="line">mid = (right + left) &gt;&gt; <span class="number">1</span>;  <span class="comment">//不建议使用，(right + left) 有可能超出 int 范围</span></span><br><span class="line">mid = ((right - left) &gt;&gt; <span class="number">2</span>) + left;</span><br><span class="line"><span class="comment">//偏右</span></span><br><span class="line">mid = (right + left + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; <span class="comment">//不建议使用，(right + left) 有可能超出 int 范围</span></span><br><span class="line">mid = ((right - left + <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) + left;</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            mid = ((right - left) &gt;&gt; <span class="number">1</span>) + left;</span><br><span class="line">            <span class="keyword">if</span> (target == nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target &lt;= nums[left] ? left : left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/730b4760/image-20221223171145502.png" alt="image-20221223171145502"></p><h1 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h1><p>在上述内容中，由于循环条件为 <code>left &lt; right</code> 。导致最终循环结束时，<code>left == right</code> 。这个时候，我们对 <code>target</code> 值插入的位置是不确定的，需要有条件判断。</p><p>如果改为 <code>left &lt;= right</code> ，必然在循环结束时有 <code>left - right = 1</code> 。这个是时候，<code>target</code> 插入位置必然为 <code>left</code> 。</p><p>理解：</p><p>当 <code>left == mid == right</code> 时，如果 <code>target &gt; nums[mid]</code>，<code>left</code> 右移，<code>target</code> 应当插入在 <code>right</code> 右边，即 <code>left</code> 位置。如果 <code>target &lt; nums[mid]</code> ，<code>right</code> 左移，<code>target</code> 插入在 <code>left</code> 位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            mid = ((right - left) &gt;&gt; <span class="number">1</span>) + left;</span><br><span class="line">            <span class="keyword">if</span> (target == nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/730b4760/image-20221223181025332.png" alt="image-20221223181025332"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode27</title>
      <link href="/post/841e170d.html"/>
      <url>/post/841e170d.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">移除元素</a></h4><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要<strong>原地</strong>移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并<strong>原地</strong>修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> removeElement(nums, val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>示例 1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span></span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span>, 并且 nums 中的前两个元素均为 <span class="number">2</span>。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 <span class="number">2</span> ，而 nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>] 或 nums = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><br>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span></span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span>, 并且 nums 中的前五个元素为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><br><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>看到这一题时，我觉得很熟悉，似乎做过。查了之前的题解，发现这题和26题类似。</p><p>同样，我们可以使用<strong>双指针</strong>。</p><ul><li>判断 <code>nums</code> 是否为 <code>null</code>。</li><li>定义一个 <code>int</code> 变量，初始值为 <code>0</code> ，用来存储<strong>移除后数组</strong>的长度。</li><li>遍历数组，对每个遍历到的整数，都与 <code>val</code> 比较，不相等则需要与<strong>移除后数组</strong>的后一位（即索引为 <code>len</code> 的位置）替换。</li></ul><p>这里理解为，定义了两个指针。<code>len</code> 指针指向<strong>移除后数组</strong>的后一位元素，<code>i</code> 指针（<code>for循环</code>的索引）指向要判断的元素。当 <code>i</code> 指针处元素等于 <code>val</code> 时，我们不需要进行任何操作，直接进行下一轮遍历。这样的话，我们可以得出，<code>len &lt;= i</code> ，即 <code>i  - len</code> 就代表着前面遍历遇到的 <code>val</code> 的次数。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[len++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/841e170d/image-20221223142413125.png" alt="image-20221223142413125"></p><h1 id="优化思考"><a href="#优化思考" class="headerlink" title="优化思考"></a>优化思考</h1><p>在题目描述中，有提到<strong>元素的顺序可以改变</strong>。说明至少有一种较优的解法，其对元素顺序做了改变。</p><p>思考出的思路如下：</p><ul><li>定义两个指针 <code>left</code>、<code>right</code> 。<code>left</code> 初始为 <code>0</code>，<code>right</code> 初始为 <code>nums.length - 1</code>。</li><li>当 <code>nums[left] == val</code> 时，将 <code>nums[left]</code> 与 <code>nums[right]</code> 互换。</li><li>交换之后，<code>right</code> 指针所指向的元素就被确定为 <code>val</code> ，下一轮遍历的时候 <code>right = right - 1</code> 。</li><li>交换之后，<code>left</code> 指针指向的元素还未被确定是否为 <code>val</code> ，下一轮遍历的时候 <code>left = left</code> 。</li><li>如果没有 <code>nums[left] != val</code> ，下一轮遍历的时候 <code>right = right</code> ，<code>left = left + 1</code> 。</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] == val) &#123;</span><br><span class="line">                <span class="comment">//交换元素</span></span><br><span class="line">                nums[left] = nums[left] ^ nums[right];</span><br><span class="line">                nums[right] = nums[right] ^ nums[left];</span><br><span class="line">                nums[left] = nums[left] ^ nums[right--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/841e170d/image-20221223145043552.png" alt="image-20221223145043552"></p><p>其中，交换两个变量，可以在不使用第三个中间变量的情况下进行。例如交换 <code>a</code> 和 <code>b</code> 可以写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = b ^ a;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode13</title>
      <link href="/post/a85e80d7.html"/>
      <url>/post/a85e80d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="罗马数字转整数"><a href="#罗马数字转整数" class="headerlink" title=" 罗马数字转整数"></a><a href="https://leetcode.cn/problems/roman-to-integer/"> 罗马数字转整数</a></h4><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>， <code>C</code>， <code>D</code> 和 <code>M</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 <code>1</code> 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X + II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX + V + II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 <code>4</code> 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 <code>1</code> 在数字 <code>5</code> 的左边，所表示的数等于大数 <code>5</code> 减小数 <code>1</code> 得到的数值 <code>4</code> 。同样地，数字 <code>9</code> 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><p><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 <code>4</code> 和 <code>9</code>。</p></li><li><p><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 <code>40</code> 和 <code>90</code>。 </p></li><li><p><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 <code>400</code> 和 <code>900</code>。</p></li></ul><p>给定一个罗马数字，将其转换成整数。</p><p>示例 1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;III&quot;</span></span><br><span class="line">输出: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>示例 2:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;IV&quot;</span></span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure><br>示例 3:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;IX&quot;</span></span><br><span class="line">输出: <span class="number">9</span></span><br></pre></td></tr></table></figure><br>示例 4:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;LVIII&quot;</span></span><br><span class="line">输出: <span class="number">58</span></span><br><span class="line">解释: L = <span class="number">50</span>, V= <span class="number">5</span>, III = <span class="number">3.</span></span><br></pre></td></tr></table></figure><br>示例 5:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = <span class="string">&quot;MCMXCIV&quot;</span></span><br><span class="line">输出: <span class="number">1994</span></span><br><span class="line">解释: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span>, IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure><br><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。<code>IL</code> 和 <code>IM</code> 这样的例子并不符合题目要求，<code>49</code> 应该写作 <code>XLIX</code>，<code>999</code> 应该写作 <code>CMXCIX</code> 。</li><li>关于罗马数字的详尽书写规则，可以参考<a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/罗马数字#knowledge_article">罗马数字 - Mathematics</a>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>对字符串挨个遍历，对每个字符对应的整数进行累加。可是，因为有一些特殊情况，遇到这些情况要做一些特殊处理。遇到这些情况的处理方式为遇到 I ，则判断右边是否是 V 或 X，是的话就 + X - I，其他情况也类似处理。</p><ul><li>从左往右遍历。</li><li>遇到 I，X，C，判断其右边元素进行特殊处理（需注意右边是否有字符）</li><li>累加求和</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;V&#x27;</span> || s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                    sum -= <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    sum += <span class="number">10</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;L&#x27;</span> || s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">                    sum -= <span class="number">10</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum += <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == s.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                    sum += <span class="number">100</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;D&#x27;</span> || s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">                    sum -= <span class="number">100</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sum += <span class="number">100</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += map.get(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a85e80d7/image-20221221181242276.png" alt="image-20221221181242276"></p><p>效率确实很差劲，得考虑优化。</p><h1 id="优化思考"><a href="#优化思考" class="headerlink" title="优化思考"></a>优化思考</h1><p>在上面，使用了 HashMap ，这里考虑替换为 switch 语句，抽出一个方法出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a85e80d7/image-20221221182239422.png" alt="image-20221221182239422"></p><p>哦吼，效率一下子就高起来了，差距还是很大得。那么，还有可以优化的地方吗？</p><p>在如上代码中，进行了大量的 if 判断，在做什么时候该减的时候，我是对每个字符都进行判断。需要减数值的判断出现的可能有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IV  <span class="number">1</span><span class="number">5</span><span class="number">4</span></span><br><span class="line">IX<span class="number">1</span><span class="number">10</span><span class="number">9</span></span><br><span class="line">XL<span class="number">10</span><span class="number">50</span><span class="number">40</span></span><br><span class="line">XC<span class="number">10</span><span class="number">100</span><span class="number">90</span></span><br><span class="line">CD<span class="number">100</span><span class="number">500</span><span class="number">400</span></span><br><span class="line">CM<span class="number">100</span><span class="number">1000</span><span class="number">900</span></span><br></pre></td></tr></table></figure><p>我们可以发现左边的整数总是小于右边的整数，即需要进行减值的时候，左边的整数需要小于右边的整数。</p><p>修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len - <span class="number">1</span> &amp;&amp; getValue(ch) &lt; getValue(s.charAt(i + <span class="number">1</span>))) &#123;</span><br><span class="line">                sum -= getValue(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += getValue(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a85e80d7/image-20221221184204257.png" alt="image-20221221184204257"></p><p>还能更改吗？</p><p>在特殊处理的判断中，我的思路是左边的整数比右边的整数小，换个角度想，就是右边的比左边的整数大。</p><p>我们可以定义一个变量，记录上一次循环的整数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">preValue</span> <span class="operator">=</span> getValue(s.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getValue(s.charAt(i)) &gt; preValue) &#123;</span><br><span class="line">                sum -= preValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += preValue;</span><br><span class="line">            &#125;</span><br><span class="line">            preValue = getValue(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        sum += preValue;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a85e80d7/image-20221221190522243.png" alt="image-20221221190522243"></p><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="超暴力法"><a href="#超暴力法" class="headerlink" title="超暴力法"></a>超暴力法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s = s.replace(<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        s = s.replace(<span class="string">&quot;IX&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        s = s.replace(<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        s = s.replace(<span class="string">&quot;XC&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        s = s.replace(<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        s = s.replace(<span class="string">&quot;CM&quot;</span>,<span class="string">&quot;f&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">            result += which(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">which</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>: <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>: <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>: <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>: <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>: <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>: <span class="keyword">return</span> <span class="number">40</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: <span class="keyword">return</span> <span class="number">90</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="keyword">return</span> <span class="number">400</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: <span class="keyword">return</span> <span class="number">900</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a85e80d7/image-20221221190916033.png" alt="image-20221221190916033"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode9</title>
      <link href="/post/38ee7a8a.html"/>
      <url>/post/38ee7a8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a><a href="https://leetcode.cn/problems/palindrome-number/">回文数</a></h4><p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个<strong>回文整数</strong>，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>例如，<code>121</code> 是回文，而 <code>123</code> 不是。<br>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = <span class="number">121</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = -<span class="number">121</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：从左向右读, 为 -<span class="number">121</span> 。 从右向左读, 为 <span class="number">121</span>- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = <span class="number">10</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：从右向左读, 为 <span class="number">01</span> 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p><h1 id="解答思考-方法一"><a href="#解答思考-方法一" class="headerlink" title="解答思考_方法一"></a>解答思考_方法一</h1><p>这道题首先想到的就是<strong>双指针</strong>。<code>left</code> 指针从最左开始，<code>right</code> 指针从最右开始，每遍历一次两个指针都移动一次，直至两个指针相遇（奇数长度的数字，最后指针都会指向同一个数字）或者 <code>left &gt; right</code> （偶数长度的数字）。</p><ul><li><p>正数小于<code>10</code> 必定是回文数，负数没有回文数。</p></li><li><p><code>left</code> 指针初始值为 <code>0</code>。</p></li><li><code>right</code> 指针初始值为 <code>String.valueOf(x).length()</code>。</li><li>循环条件为 <code>left &lt; right</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(left++) != s.charAt(right--)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/38ee7a8a/image-20221221133812064.png" alt="image-20221221133812064"></p><h1 id="优化思考"><a href="#优化思考" class="headerlink" title="优化思考"></a>优化思考</h1><p>个位为<code>0</code> 的多位数，必定不是回文数。</p><p>修改边界条件为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考-方法二"><a href="#解答思考-方法二" class="headerlink" title="解答思考_方法二"></a>解答思考_方法二</h1><p>进阶方法中提到不将整数转化为字符串，不转化为字符串，我能想到的是取模和取余运算。</p><p>若是要参考上面字符串的解法，那就要每次取最高位和最低位的数字，进行判断。最低位好取，只需要 <code>%10</code> 运算。最高位怎么取？我们平时要取一个数字最高位是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> XXXXXXX;</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="keyword">while</span> (x / <span class="number">10</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    number = x / <span class="number">10</span>;</span><br><span class="line">&#125; <span class="comment">//此处代码有问题，可以参考后面的，因为涉及到个人思路，此处不做更改</span></span><br></pre></td></tr></table></figure><p>这明显效率不高，只能作为备选。</p><p>那还有什么方法呢？我想到了字符串反转，我们也可以将一个整数反转。</p><p>将一个整数对 <code>10</code> 取余，再拼接起来，取得倒序，判断是否相等。</p><p>但是，这是有一些小问题的。<code>int</code> 的取值范围为 <code>-2147483648 ~ 2147483647</code> ，比如 <code>2147483647</code> ，倒序后超出了 <code>int</code> 的范围，<strong>最后赋值的时候会溢出（并不会抛异常）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">reverseX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> x;</span><br><span class="line">            <span class="keyword">while</span> (number % <span class="number">10</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                reverseX = reverseX * <span class="number">10</span> + number % <span class="number">10</span>;</span><br><span class="line">                number /= <span class="number">10</span>;</span><br><span class="line">                System.out.println(reverseX);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reverseX == x) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2147483647</span>;</span><br><span class="line">        System.out.println(Solution.isPalindrome(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/38ee7a8a/image-20221221150756719.png" alt="image-20221221150756719"></p><p>可以看出，最后一次赋值，将 <code>7463847412</code> 赋值给 <code>reverseX</code> 的时候，溢出了（溢出规则参考二进制补码）。</p><p>那有什么办法解决？我们可以反转并截取一半。</p><p>可是，问题又出现了，如果是偶数位数的整数，可以刚好取到一半；奇数位数的整数，要怎么取？</p><ol><li>取 <code>1/2 + 1</code>， 再除以 <code>10</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">123454321</span>;</span><br><span class="line">---------------------------------</span><br><span class="line"><span class="type">int</span> <span class="variable">reverseX</span> <span class="operator">=</span> <span class="number">12345</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line">x = reverseX / <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ol><li>取 1/2 ，x 除以 10。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">123454321</span>;</span><br><span class="line">---------------------------------</span><br><span class="line"><span class="type">int</span> <span class="variable">reverseX</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1235</span>;</span><br><span class="line"></span><br><span class="line">x / <span class="number">10</span> = revserseX;</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取数字长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">xLong</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> x;</span><br><span class="line">            <span class="keyword">while</span> (number % <span class="number">10</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                xLong++;</span><br><span class="line">                number /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//反转</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">revserseTimes</span> <span class="operator">=</span> xLong / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">revserseX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (revserseTimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                revserseX = revserseX * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">                revserseTimes--;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x == revserseX || x / <span class="number">10</span> == revserseX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错了</p><p><img src="/post/38ee7a8a/image-20221221155709270.png" alt="image-20221221155709270"></p><p>从这里可以看出，我们获取数字长度的代码是有问题的，进行修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">xLong</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> x;</span><br><span class="line"><span class="keyword">while</span> (number % <span class="number">10</span> != <span class="number">0</span> || number / <span class="number">10</span> != <span class="number">0</span>) &#123;</span><br><span class="line">xLong++;</span><br><span class="line">number /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次提交，再次报错</p><p><img src="/post/38ee7a8a/image-20221221160241634.png" alt="image-20221221160241634"></p><p>这次出在最后一行代码，<code>x = 1</code>，<code>revserseX = 0</code> 。对于这种写法，只有在反转 <code>1/2</code> 时会出现（反转 <code>1/2 + 1</code> 时，返回值是对 <code>revserseX / 10</code>，极限边界已经剔除了个位是 <code>0</code> 的整数，所以反转后不会出问题）。</p><p>再次修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取数字长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">xLong</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> x;</span><br><span class="line">            <span class="keyword">while</span> (number % <span class="number">10</span> != <span class="number">0</span> || number / <span class="number">10</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                xLong++;</span><br><span class="line">                number /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//反转</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">revserseTimes</span> <span class="operator">=</span> (xLong + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">revserseX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (revserseTimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                revserseX = revserseX * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">                revserseTimes--;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x == revserseX || x == revserseX / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次提交</p><p><img src="/post/38ee7a8a/image-20221221161131276.png" alt="image-20221221161131276"></p><p>可以看出，与<strong>方法一</strong>相差并不是很多。</p><h1 id="优化思考-1"><a href="#优化思考-1" class="headerlink" title="优化思考"></a>优化思考</h1><p><code>x</code> 每截取一次都会变小，<code>revserseX</code> 随着 <code>x</code> 的截取会慢慢变大，到最后，一定会出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x == revserseX || x == revserseX / <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>前一种情况恰巧是偶数长度反转了一半，后一种是奇数长度反转了 <code>1 / 2 + 1</code>。</p><p>那么，我并不需要计算出 <code>xLong</code> 和反转次数，循环条件只需要改为 <code>x &gt; revserseX</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">revserseX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &gt; revserseX) &#123;</span><br><span class="line">                revserseX = revserseX * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">                x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x == revserseX || x == revserseX / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/38ee7a8a/image-20221221162147571.png" alt="image-20221221162147571"></p><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="对上述模拟字符串双指针的补充"><a href="#对上述模拟字符串双指针的补充" class="headerlink" title="对上述模拟字符串双指针的补充"></a>对上述模拟字符串双指针的补充</h2><p>在查阅了其他人的题解后，发现<a href="https://leetcode.cn/problems/palindrome-number/solution/ji-bai-liao-99de-javayong-hu-dai-ma-you-ya-by-reed/">有位道友的题解</a>比较巧妙，其思路如下：</p><ul><li>采用一个 <code>int</code> 类型的 <code>help</code> 变量来存储最高位为 <code>1</code> 其余位均为 <code>0</code> 的整数。</li><li>每次取最高位和最低位对比。</li><li><code>help</code> 每次 <code>/ 100</code> 。</li></ul><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x / <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">help</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> x;</span><br><span class="line">        <span class="keyword">while</span> (tmp &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            help *= <span class="number">10</span>;</span><br><span class="line">            tmp /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">10</span> != x / help) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x = x % help / <span class="number">10</span>;</span><br><span class="line">            help /= <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode1</title>
      <link href="/post/3635f2b8.html"/>
      <url>/post/3635f2b8.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><h4 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a><a href="https://leetcode.cn/problems/two-sum/">两数之和</a></h4><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出<strong>和为目标值</strong> <code>target</code>  的那<strong>两个整数</strong>，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> ，返回 [<span class="number">0</span>, <span class="number">1</span>] 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">3</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>找出目标值和返回下标，说明要使用 <code>Map</code> 集合。</p><ul><li>定义一个 <code>map</code> ，<code>key</code> 存放 <code>target - 数值</code>，<code>value</code> 存放下标。</li><li>对每个数据都在 <code>map</code> 中 <code>get(这个数据)</code>，若是能 <code>get</code> 到，则代表找到，若是 <code>get</code> 不到，则存 <code>target - 这个数据</code> 进 <code>map</code>。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//极限边界值</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(nums[i]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                map.put(target - nums[i], i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                answer[<span class="number">0</span>] = map.get(nums[i]);</span><br><span class="line">                answer[<span class="number">1</span>] = i;</span><br><span class="line">                <span class="keyword">return</span> answer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3635f2b8/image-20221221124453601.png" alt="image-20221221124453601"></p><h1 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h1><p>对比 <code>hashMap</code> 的 <code>get</code> 方法 和 <code>containsKey</code> 方法可以看出，<code>get</code> 方法比 <code>containsKey</code> 效率低一点点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getNode(hash(key), key) != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在返回值方面，<code>answer</code> 数组固定长度为 <code>2</code>，但是如果找不到解，返回的 <code>answer</code> 数组并不需要长度为 <code>2</code>，这里可以替换成匿名数组，代替提前声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//极限边界值</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(nums[i]), i&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(target - nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3635f2b8/image-20221221130051076.png" alt="image-20221221130051076"></p><p>多次提交后达不到最初的结果，leetcode 有时候确实挺靠运气的。</p><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>暴力破解的解法，其实就是双层循环。外层循环从 <code>0</code> 开始，到 <code>nums.length - 2(包含)</code> 为止。内层循环从 <code>外层循环 + 1</code>  开始，到 <code>nums.length - 1(包含)</code>  结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// should not be here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;&#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/post/3635f2b8/image-20221221131219820.png" alt="image-20221221131219820"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode26</title>
      <link href="/post/f319279b.html"/>
      <url>/post/f319279b.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a></p><p>给你一个<strong>升序排列</strong>的数组 <code>nums</code> ，请你<strong>原地</strong>删除重复出现的元素，使每个元素<strong>只出现一次</strong> ，返回删除后数组的新长度。元素的<strong>相对顺序</strong>应该保持<strong>一致</strong> 。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组 <code>nums</code> 的第一部分。更规范地说，如果在删除重复项之后有 <code>k</code> 个元素，那么 <code>nums</code> 的前 <code>k</code> 个元素应该保存最终结果。</p><p>将最终结果插入 <code>nums</code> 的前 <code>k</code> 个位置后返回 <code>k</code> 。</p><p>不要使用额外的空间，你必须在<strong>原地修改输入数组</strong>并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p>判题标准:</p><p>系统会用下面的代码来测试你的题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = [...]; <span class="comment">// 输入数组</span></span><br><span class="line"><span class="type">int</span>[] expectedNums = [...]; <span class="comment">// 长度正确的期望答案</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> removeDuplicates(nums); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> k == expectedNums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">    <span class="keyword">assert</span> nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被<strong>通过</strong>。</p><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span>, nums = [<span class="number">1</span>,<span class="number">2</span>,_]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">2</span> ，并且原数组 nums 的前两个元素被修改为 <span class="number">1</span>, <span class="number">2</span> 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">5</span>, nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">解释：函数应该返回新的长度 <span class="number">5</span> ， 并且原数组 nums 的前五个元素被修改为 <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>升序</strong> 排列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>操作数组，原地修改。首先想到的是<strong>双指针</strong>。</p><ul><li><p>若是数组为空，数组长度等于 <code>0</code>，直接返回 <code>0</code> 。</p></li><li><p><code>left</code> 指针指向有序不重复元素的最后一个元素（处理后的元素）。</p></li><li><code>right</code> 指针指向待操作的元素，每次与 <code>left</code> 元素对比，若是不相等，则代表 <code>right</code> 元素比 <code>left</code> 元素大，<code>left++</code>，再把 <code>right</code> 元素赋值给 <code>left</code> 元素，<code>right++</code> ，相等则 <code>right++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">1</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[left] &lt; nums[right]) &#123;</span><br><span class="line">                nums[++left] = nums[right];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/f319279b/image-20221220211306470.png" alt="image-20221220211306470"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode21</title>
      <link href="/post/6d7db238.html"/>
      <url>/post/6d7db238.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">合并两个有序链表</a></p><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><img src="/post/6d7db238/image-20221220185107898.png" alt="image-20221220185107898"></p><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>], l2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>单链表的拼接实际上是 next 指针的指向问题。</p><ul><li>先判断两个链表是否为空，对单个空或者两个空情况下直接做返回。只有两个链表都不为空才有拼接的意义。</li><li>新建一个链表头节点，维护一个指针 pre 始终指向这个链表尾节点</li><li>比较 l1 和 l2 头节点的值大小，哪个小就把 pre.next 指向这个头节点，再把这个头节点后移，循环。</li><li>最后若是存在一个链表没有拼接完，直接把 pre.next 指向这个链表。</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界值判断</span></span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                pre.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剩余节点拼接</span></span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            pre.next = list2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/6d7db238/image-20221220191954148.png" alt="image-20221220191954148"></p><p>时间上做的比较好，空间上也还过得去。查阅官方解后发现与这个解类似。</p><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>当我看到有人使用栈来解答时，一下子就蠢蠢欲动起来。</p><p>自己实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt;= list2.val) &#123;</span><br><span class="line">                list1.next = mergeTwoLists(list1.next, list2);</span><br><span class="line">                <span class="keyword">return</span> list1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                list2.next = mergeTwoLists(list1, list2.next);</span><br><span class="line">                <span class="keyword">return</span> list2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/6d7db238/image-20221220201718991.png" alt="image-20221220201718991"></p><p>发现和官方结果差不多。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode20</title>
      <link href="/post/1a7a82ae.html"/>
      <url>/post/1a7a82ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></p><p>给定一个只包括 <code>(</code>，<code>)</code>，<code>&#123;</code>，<code>&#125;</code>，<code>[</code>，<code>]</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p>示例 1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;()&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>示例 2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;()[]&#123;&#125;&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><br>示例 3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;(]&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解答思考"><a href="#解答思考" class="headerlink" title="解答思考"></a>解答思考</h1><p>当我看到这道题时，我首先想到的是<strong>栈</strong></p><ul><li>判断 <code>s</code> 是否为空，<code>s</code> 长度是否为奇数，如果是，则必定不配对，返回 <code>false</code>。</li><li>使用 <code>s.charAt()</code> 方法，拿到指定索引元素。</li><li>如果是左括号，则执行入栈操作。</li><li>如果是右括号，则从栈顶弹出一个元素（需判断栈是否为空，为空返回 <code>false</code> ），对比是否配对，不配对则直接返回 <code>false</code> 。</li><li>当索引走到最后时，如果栈中还有元素，则表明没有全部配对，返回 <code>false</code> ；如果没有，则全部配对。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界，判断s是否为空，s长度是否为奇数，如果是，则必定不配对，返回false。</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span> || s.length() % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储左括号的栈</span></span><br><span class="line">        LinkedList&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Character&gt;();</span><br><span class="line">        <span class="comment">//map，存储括号对，用来校验是否配对</span></span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        <span class="type">char</span> curChar;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; s.length(); index++) &#123;</span><br><span class="line">            curChar = s.charAt(index);</span><br><span class="line">            <span class="comment">//如果是左括号，加入栈</span></span><br><span class="line">            <span class="keyword">if</span> (map.get(curChar) == <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.addLast(curChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//右括号，先判断栈是否为空，再进行弹栈配对。</span></span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map.get(curChar) != stack.removeLast()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果栈不为空，则直接pass</span></span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/1a7a82ae/image-20221220171509767.png" alt="image-20221220171509767"></p><h1 id><a href="#" class="headerlink" title=" "></a> </h1><p>可以看到，执行结果很不理想。</p><h1 id="优化思考"><a href="#优化思考" class="headerlink" title="优化思考"></a>优化思考</h1><p>算法很多情况下是在时间和空间上面进行取舍，但是我的代码在时间和空间的表现上都很糟糕。</p><p>在栈的使用上，我是用的时 <code>Stack</code> 类，但是在查阅资料后，发现 <code>Stack</code> 类 继承自 <code>Vector</code> 类，本质上也是一个数组。但是，由于 <code>Vector</code> 对线程安全的支持，在单线程模式下，性能没有 <code>ArrayList</code> 和 <code>LinkedList</code> 高。</p><p>我们都知道，数组查询效率高于链表，增删效率低于链表。但是，此处是模拟栈，都是进行尾部增删，查阅资料得知，在容量小的情况下，两者性能相近，容量大的情况下，数组优于链表。此处，我选择 ArrayList。</p><p>那么，<code>ArrayList</code> 怎么实现尾插和尾删呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>; <span class="comment">//将指定的元素列表的结尾</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">//移除此列表中指定位置的元素。所有后续元素左移（下标减1）。</span></span><br></pre></td></tr></table></figure><p>此处想起索引有 <code>-1</code> 的用法，本打算在<code>remove</code>中使用，导致了<code>**java.lang.IndexOutOfBoundsException: Index -1 out of bounds for length 1**</code> 异常。查看 API 文档发现，<code>index &lt; 0 || index &gt;= size()</code> 会引发 <code>IndexOutOfBoundsException</code> 异常。</p><p><img src="/post/1a7a82ae/image-20221220175924248.png" alt="image-20221220175924248"></p><p>最后结尾处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if</code> 判断存在多余，所以修改，直接返回 <code>stack.isEmpty()</code></p><p>修改后如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界，判断s是否为空，s长度是否为奇数，如果是，则必定不配对，返回false。</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span> || s.length() % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储左括号的栈</span></span><br><span class="line">        ArrayList&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;(s.length());</span><br><span class="line">        <span class="comment">//map，存储括号对，用来校验是否配对</span></span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">        <span class="type">char</span> curChar;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; s.length(); index++) &#123;</span><br><span class="line">            curChar = s.charAt(index);</span><br><span class="line">            <span class="comment">//如果是左括号，加入栈</span></span><br><span class="line">            <span class="keyword">if</span> (map.get(curChar) == <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.add(curChar);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || map.get(curChar) != stack.remove(stack.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">//右括号，先判断栈是否为空，再进行弹栈配对。</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果栈不为空，则直接pass</span></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次提交，得到结果如下：</p><p><img src="/post/1a7a82ae/image-20221220182333541.png" alt="image-20221220182333541"></p><p>如果，不使用 <code>hashMap</code> 性能是否会更好？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//极限边界，判断s是否为空，s长度是否为奇数，如果是，则必定不配对，返回false。</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span> || s.length() % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储左括号的栈</span></span><br><span class="line">        ArrayList&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;(s.length());</span><br><span class="line">        <span class="type">char</span> curChar;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; s.length(); index++) &#123;</span><br><span class="line">            curChar = s.charAt(index);</span><br><span class="line">            <span class="keyword">if</span> (curChar == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.add(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curChar == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                stack.add(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curChar == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stack.add(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || curChar != stack.remove(stack.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果栈不为空，则直接pass</span></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五次提交，取到的最好结果。</p><p><img src="/post/1a7a82ae/image-20221220182513804.png" alt="image-20221220182513804"></p><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><h2 id="原生API"><a href="#原生API" class="headerlink" title="原生API"></a>原生API</h2><p>我们都知道，括号的包裹顺序是 <code>&#123;[()()][()]&#125;</code>，由于括号中没有内容，所以我们可以使用 replaceAll() 方法，挨个注意全部替换为空，若是最后只需要判断 s 长度是否为 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.length() == <span class="number">0</span> || s.length() % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最大替换次数，因为一次替换掉两个字符，所以最多只需要替换 s.length() / 2 次</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> s.length() &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = s.replace(<span class="string">&quot;()&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;[]&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.length() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果也确实在我料想范围内，效率确实拉跨到不行。</p><p><img src="/post/1a7a82ae/image-20221220184353153.png" alt="image-20221220184353153"></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java服务发展历程</title>
      <link href="/post/89611e50.html"/>
      <url>/post/89611e50.html</url>
      
        <content type="html"><![CDATA[<p>现如今的大部分 Java 开发，都是围绕 Web 开发进行的。1995 年 Java 语言诞生时，刚好赶上了互联网浪潮。但是，Java在桌面应用开发上却不尽如人意。但是，天无绝人之路，Java 因为 JVM 的平台无关性，对 Web 的支持出奇的好，很快就占领了大部分 Web 市场。</p><h1 id="BS架构与CS架构"><a href="#BS架构与CS架构" class="headerlink" title="BS架构与CS架构"></a>BS架构与CS架构</h1><h2 id="CS架构"><a href="#CS架构" class="headerlink" title="CS架构"></a>CS架构</h2><p>C：Client 客户端</p><p>S：Server 服务端</p><p>例如 QQ，微信，微博…… 大部分都需要安装 apk ，通过手机 app 与服务端通信。</p><p>数据传输流程：</p><p><img src="/post/89611e50/image-20221215043858173.png" alt="image-20221215043858173"></p><ol><li>客户端软件产生数据，存放于客户端软件的内存中，然后调用接口将自己内存中的数据发送／拷贝给操作系统内存</li><li>客户端操作系统收到数据后，按照客户端软件指定的规则（即协议）、调用网卡发送数据</li><li>网络传输数据</li><li>服务端软件调用系统接口，想要将数据从操作系统内存拷贝到自己的内存中</li><li>服务端操作系统收到4的指令后，使用与客户端相同的规则（即协议）从网卡接收到数据，然后拷贝给服务端软件</li></ol><h2 id="BS架构"><a href="#BS架构" class="headerlink" title="BS架构"></a>BS架构</h2><p>B：Browser  浏览器</p><p>S：Server 服务器</p><p>现如今越来越多的网络产品都使用 BS 架构，例如学校官网，WMS系统……</p><p>BS架构之间使用 http 通信，参考（待补充）</p><h1 id="Java-Web发展历史"><a href="#Java-Web发展历史" class="headerlink" title="Java Web发展历史"></a>Java Web发展历史</h1><h2 id="无Servlet时代"><a href="#无Servlet时代" class="headerlink" title="无Servlet时代"></a>无Servlet时代</h2><p>在Servlet诞生之前，BS架构的 Web 程序都是静态的。用户通过互联网访问的内容都是html、css等资源，再经过浏览器渲染成用户所看到的界面。</p><h2 id="Servlet（纯Servlet开发）"><a href="#Servlet（纯Servlet开发）" class="headerlink" title="Servlet（纯Servlet开发）"></a>Servlet（纯Servlet开发）</h2><p>SUN公司刚刚推出 JavaEE 时，推出了 Servlet 这个东西，其命名为 Service Applet，即服务小程序。</p><p>Servlet 可以说是 Java 技术中最早的 Web 解决方案，Servlet 与普通 Java 类的编写非常类似。在 Servlet 中可以通过挨着行输出 Html 等语句来实现页面的样式和输出，数据的动态功能当然也就实现了。<strong>表现、逻辑、控制、业务全部混在 Servlet 类中。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html;charset=gb2312&quot;</span>);</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;head&gt;&lt;title&gt;Hello World！&lt;/title&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;p&gt;Hello World！&lt;/p&gt;&quot;</span>);</span><br><span class="line">    out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet 代码有大量冗余代码，开发 Servlet 必须精通网页前端和美工，你得非常不直观的在 Servlet 中写前端代码，这使得实现各种页面效果和风格非常困难。<br>对于后端来说，所有的业务逻辑、页面跳转、央视表现全部混杂在同一个类中，并且一项业务一般只有一个Servlet 类与其对应，实在是….太麻烦了。</p><h1 id="JSP（纯JSP开发）——-也叫-Model1第一代"><a href="#JSP（纯JSP开发）——-也叫-Model1第一代" class="headerlink" title="JSP（纯JSP开发）—— 也叫 Model1第一代"></a>JSP（纯JSP开发）—— 也叫 Model1第一代</h1><p>经过纯 Servlet 开发的噩梦之后，Sun 公司又推出了 JSP ( Java Server Page ) 技术，JSP 中采用 HTML 语言直接生成界面，还可以在界面中使用 <code>&lt;% %&gt;</code> 脚本标识嵌入 Java 代码，揪其本质也是最终生成一个 Servlet 类来编译解析。如果要开发具有大量网页内容的网站，可以先使用网页编辑工具编写网页，然后在网页中嵌入处理代码即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;&lt;title&gt;测试&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     显示的内容是：&lt;% String aa= “hello” ; out.println(aa); %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>虽然 JSP 可以实现网站的快速开发，但依然存在缺点：网站的输入输出、处理、控制全部夹杂在一起，维护不方便，即使只需要修改该页面的一个简单按钮文本，或者一段静态的文本内容，也不得不打开混杂的动态脚本的页面源文件进行修改。</p><p>当网站中需要进行大量的处理代码的时候，JSP 文件将很难维护，并且代码也不容易共享。</p><p>前端开发人员需要看大量他看不懂的后端代码，同样，Servlet 开发人员也要在复杂的前端代码中找到其能写Servlet 代码的地方。</p><h1 id="JSP-JavaBean（Model1-第二代）"><a href="#JSP-JavaBean（Model1-第二代）" class="headerlink" title="JSP + JavaBean（Model1 第二代）"></a>JSP + JavaBean（Model1 第二代）</h1><p>因为 JSP 在编写网页方面具有优势，而编写处理代码存在很多问题，所以人们把 JSP 中的处理代码使用 JavaBean来实现。于是出现了 JSP JavaBean 的开发模式（ javaBean 这里负责业务逻辑和实体类模型 ）。</p><p>JavaBean 是一种 JAVA 语言写成的可重用组件。为写成 JavaBean，javabea的功能：封装数据和封装业务逻辑。</p><p>JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set 和 get 方法获取（百度）。其实可以理解就是 Java 类，这里我理解为 <strong>JavaBean 的出现作为和数据库交互的类</strong>，Jsp 页面里边中写部分Java 代码用于转发等操作以及 HTML 页面的生成代码，而获取数据的方式以及业务逻辑 ( 这里的业务逻辑就是非请求转发部分的代码 ) 则通过 JavaBean 来实现。</p><p><strong>javabea的功能：封装数据和封装业务逻辑。</strong></p><p>这种开发模式有一个简单的分层 JSP：表现层、控制层； JavaBean：模型层。</p><p>利用我们现在熟悉的 MVC 模型的思想去看，虽然编写代码十分容易，但 JSP 混淆了 MVC 模型中的视图层和控制层， 高度耦合的结果使 JSP 代码十分复杂，后期维护依旧困难。由原有的 Model1 第二代开发模式转变成 Model2 开发模式，即 Servlet + JSP + JavaBean。同时也使得在 Web 项目中将 MVC 设计模式实现。</p><h1 id="Servlet-JSP-JavaBean（Model2）"><a href="#Servlet-JSP-JavaBean（Model2）" class="headerlink" title="Servlet + JSP + JavaBean（Model2）"></a>Servlet + JSP + JavaBean（Model2）</h1><p>Model1 第二代虽然在一定程度上解耦了，但 JSP 依旧即要负责页面控制，又要负责逻辑处理，职责不单一！</p><p>此时，Model2 应运而生，使得各个部分各司其职，Model2 是基于 MVC 模式的。Model2 的开发模式是：JSP + Servlet + JavaBean 的模式，它和 Model1 不同的是，增加了 Servlet。</p><p>在这种开发模式下，JSP 页面中就可以不用任何的 <code>&lt;%%&gt;</code> 语句了，<code>&lt;%=%&gt;</code> 全部用 EL 表达式来代替，列表的遍历和条件判断等（ Java 中的 for 循环和 if 语句）也可以通过 JSTL 来代替。 </p><p>这样的话，视图层相比较之前的开发模式来说要薄得多的多，JSP 中不涉及任何的业务逻辑，前端人员修改样式也十分方便。这里可以理解为 JSP 为 MVC 设计模式中的 V（View），即视图。</p><p>控制层通过 Servlet 来实现，获取前台传的参数、控制页面跳转，封装对象、向前台传输对象或者参数。并且可以由自己设计，设法用一个 Servlet 类实现该模块的所有功能的页面跳转。这里可以理解为 Servlet 为 MVC 设计模式中的 C（Controller） ，即控制器。</p><p><img src="/post/89611e50/image-20221215155435397.png" alt="image-20221215155435397"></p><p>Model2 并不是一个完全标准的 MVC 设计模式，因为 JavaBean 还过于臃肿，并不能完全作为 M 层存在，<strong>所以将JavaBean中的封装业务功能再一次进行分割：业务逻辑、数据持久化。</strong></p><p><img src="/post/89611e50/image-20221215155610718.png" alt="image-20221215155610718"></p><h1 id="框架阶段"><a href="#框架阶段" class="headerlink" title="框架阶段"></a>框架阶段</h1><p>倡导了MVC思想的 JSP + Javabean + Servlet 出现，也存在问题。Jsp 页面中嵌入了很多 Java 代码，使得结构很乱，对于大型项目，Servlet 过多，转向频繁，流程、配置等不易集中管理，因而出现了struts框架。</p><h1 id="Struts框架"><a href="#Struts框架" class="headerlink" title="Struts框架"></a>Struts框架</h1><p>2001年6月，Struts 1.0 出现，Struts 针对 JSP 推出了一套 Struts 标签，从而使得 JSP 中没有了 Java 代码，结构清晰，功能强大。针对 Servlet ，它提供了 Action 类来代替了 Servlet ，这个 Action 类具有 Servlet 的功能，并且能够进行一些请求过滤和自动转码的功能。</p><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><p>原本已经看起来很完美了，但是又有一个问题，就是我们在 Action 调用 DAO、Java Bean 等对象的时候都需要在自身代码中构建它们的对象来使用，这样增加了程序的耦合性，这与我们：“高内聚、低耦合“ 的思想不符合，那么怎么解决这个问题呢？因而出现了 Spring 框架。</p><p>Spring 框架有两大功能：IOC（控制反转）和 AOP（面向切面的编程），其中 IOC 就是说：当一个类中想要调用另外一个类的对象时，不需要再通过 new 关键字来创建，而是由 Spring 框架来负责：创建、分配和管理，从而降低了程序中的耦合性。而 AOP 可以用来做一些日志的打印和输出，用于提示程序执行过程中的一些具体信息等。</p><h1 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h1><p>Struts 和 Spring 的整合，由于每一个 Bean 都要在 Spring 中注册，每一个 URL 都要在 Struts 配置文件中配置。当 Bean 很多和 URL 对应的请求很多的时候，配置文件无疑会是很庞大的，这个就会使得配置起来很麻烦的费力。那么还有没有更好的办法使得能够结合 Spring 的功能和 Struts 的功能，但是又可以使配置文件不会批量的增加？因而 SpringMVC 出现了。</p><p>SpringMVC 通过“基于注解”的方式代替了 Struts ，并且通过 Controller 类来代替和实现了 Action 的功能。由于是基于注解的，所以很多的配置信息放在了 Controller 类中配置，从而降低了 .xml 文件的配置复杂度。</p><h1 id="SpringBoot框架"><a href="#SpringBoot框架" class="headerlink" title="SpringBoot框架"></a>SpringBoot框架</h1><p>Spring 框架可以像积木一样整合其他框架，但是整合的过程往往需要创建配置文件以及配置一大堆信息。同时还要考虑 jar 包依赖的冲突…… 这导致程序员需要花大量的经历和时间在这上面，成为了一大痛点。</p><p>SpringBoot 框架设计目的是尽可能简单和快速的开发、运行 Spring 应用程序，简化配置。它为开发者快捷的使用Spring 及相关开发框架提供了便利（提供了许多 Starter 整合包），但是它并不是微服务的框架，它只是为微服务框架的使用也提供了很好的脚手架。</p><p>Spring Boot 中的 Starter 是一个包含很多依赖描述的集合，只要添加一个 Starter，这个 Starter 里面约定的依赖都会被添加到项目中，例如代码添加了 spring-boot-starter-web ，执行 maven 操作就会下载 web 应用需要的依赖 jar。开发者通过使用这些 Starter 可以快速的搭建开发环境，自动加载所需要的依赖和配置参数属性。</p><h1 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h1><p>单体架构也可叫单体系统或单体应用，是一种把系统所有的功能模块耦合在一个应用的架构方式。</p><p><strong>优点</strong>：</p><ol><li>架构简单</li><li>易开发（前期）</li><li>易部署</li><li>易测试</li><li>开发成本低</li><li>适用于小团队</li></ol><p><strong>缺点</strong>：</p><ol><li>耦合度高</li><li>容错效率低</li><li>扩展性差</li><li>不利团队协同开发</li></ol><h1 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h1><p>一个系统复制部署在不同服务器上，形式上分布，逻辑上单体。</p><p>优点：</p><ol><li>提高系统的可用性</li><li>降低管理维护的难度</li><li>减少对硬件的要求</li><li>增加服务的可扩充性和灵活性</li><li>提供高可靠性</li></ol><p>缺点：</p><ol><li>需要大量的资金投入</li><li>容易形成单点故障</li></ol><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><p>集群是指一组独立的计算机系统构成的一个松耦合的多处理器系统，它们之间通过网络实现进程间的通信。应用程序可以通过网络共享内存进行消息传送，实现分布式计算功能。通俗一点来说，就是让若干台计算机联合起来工作(服务)，可以是并行的，也可以是做备份。</p><p>优点：</p><ol><li>加强系统可用，天然的解决单点故障问题</li><li>加强模块的复用性</li><li>提高单模块的开发部署效率</li><li>提高系统的扩展性</li><li>提高团队协助能力</li></ol><p>缺点：</p><ol><li>增加了架构设计变得复杂（分布式事务，分布式锁）</li><li>增加了运维、部署的复杂度（单模块简洁快速，多模块更加复杂）</li><li>增加服务的响应时间（多模块相互调用，增加的调用链的长度，增加的响应时间）</li><li>增加的排查问题的成本（各模块逐一排查） </li><li>增加项目管理维护的复杂度</li></ol><p><strong>分布式和集群区别：</strong></p><ul><li>集群：同一个业务部署在多台机器上，提高系统可用性，是物理形态。</li><li>分布式：不同的业务模块拆分到不同的机器上，解决高并发的问题。</li><li>分布式服务器如果其中一台或者处理同一个事务服务器出了事故，那么就会导致网站部分功能缺失，严重的话整个网站都会崩溃。集群式服务器中每台服务器都实现相同的业务，做相同的事情。他不像分布式那样每台服务器都不可或缺，即使有一台服务器宕机了，整体应用程序还是能照常运行。</li><li>分布式主要的功能是用了将我们的系统模块化，将系统进行解耦的，方便我们的维护和开发的，但是其并不能解决我们的并发问题，也无法保证我们的系统在服务器宕机后的正常运转。 而集群恰好弥补了分布式的缺陷。集群，就是多个服务器处理相同的业务，这在一方面可以解决或者说改善我们系统的并发问题，一方面可以解决我们服务器如果出现一定数量的宕机后，系统仍然可以正常运转。</li><li>集群是个物理形态，分布式是个工作方式。只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；一个程序或系统，只要运行在不同的机器上，就可以叫分布式。</li></ul><p>不管是分布式还是集群式结构，系统扩展都非常容易，随着业务的发展，当前硬件无法支撑时候，再增加一个节点服务器就行了。具有高伸缩性、高可用性、负载均衡、高性能等特点。</p><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>将分布式项目进行更加精细化的划分，每个拆分出来的服务保证职责单一（微服务属于分布式模式，只是拆分更加精细，职责跟进单一）。</p><p><strong>优点</strong>：</p><ol><li>易于开发和维护</li><li>启动较快</li><li>局部修改容易部署</li><li>技术栈不受限</li><li>按需伸缩</li></ol><p><strong>缺点</strong>：</p><ol><li>运维要求较高</li><li>分布式的复杂性</li><li>接口调整成本高</li><li>重复劳动</li></ol><h1 id="SpringCloud框架"><a href="#SpringCloud框架" class="headerlink" title="SpringCloud框架"></a>SpringCloud框架</h1>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/post/6f2612a2.html"/>
      <url>/post/6f2612a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//spring.io/projects/spring-boot</span></span><br></pre></td></tr></table></figure><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can &quot;just run&quot;.</span><br><span class="line">We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.</span><br></pre></td></tr></table></figure><p><code>Spring Boot</code> 可以轻松创建独立的、生产级的基于 <code>Spring</code> 的应用程序，您可以“直接运行”。</p><p>我们对 <code>Spring</code> 平台和第三方库有自己的看法，因此您可以轻松上手。大多数 <code>Spring Boot</code> 应用程序需要最少的 <code>Spring</code> 配置。</p><p><strong>简化Spring开发。</strong></p><h1 id="Springboot的优点"><a href="#Springboot的优点" class="headerlink" title="Springboot的优点"></a>Springboot的优点</h1><ul><li>创建独立的 <code>Spring</code> 应用程序。</li><li>内嵌 <code>Tomcat、Jetty</code> 或 <code>Undertow</code>（无需部署WAR文件）。</li><li>自动 <code>starter</code> 依赖项以简化您的构建配置。</li><li>尽可能自动配置 <code>Spring</code> 和第三方库。</li><li>提供生产级别的功能，例如监控、健康检查和外部化配置。</li><li>绝对没有代码生成，也不需要 XML 配置。</li></ul><h1 id="Springboot的缺点"><a href="#Springboot的缺点" class="headerlink" title="Springboot的缺点"></a>Springboot的缺点</h1><ul><li>迭代快，需要时刻关注变化。</li><li>封装太深，内部原理复杂，不容易精通。</li></ul><h1 id="分布式难点"><a href="#分布式难点" class="headerlink" title="分布式难点"></a>分布式难点</h1><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li></ul><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>参考官方文档</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.spring.io/spring-boot/docs/2.7.6/reference/html/getting-started.html#getting-started.first-application.code</span><br></pre></td></tr></table></figure><ol><li><p>创建 <code>Maven</code> 项目</p></li><li><p>修改 <code>pom.xml</code> 文件，添加 <code>parent</code> 和 <code>dependency</code> 依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thirteen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springBootDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>创建 <code>MyApplication.java</code> 类，添加注解以及 <code>main</code> 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建 <code>HelloController.java</code> 类，添加注解以及书写 <code>hello</code> 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot!!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>启动 <code>MyApplication</code></li></ol><p><img src="/post/6f2612a2/image-20221215181409527.png" alt="image-20221215181409527"></p><ol><li>访问 <a href="http://127.0.0.1:8080/hello">http://127.0.0.1:8080/hello</a></li></ol><p><img src="/post/6f2612a2/image-20221215181434461.png" alt="image-20221215181434461"></p><h1 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h1><ol><li>添加 <code>spring-boot-maven-plugin</code> 到我们的 <code>pom.xml</code> 中。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>运行 Maven 的 Package 命令。</li></ol><p><img src="/post/6f2612a2/image-20221216164825285.png" alt="image-20221216164825285"><br>如果出现 <code>unable to rename ...</code> 报错，需要在 <code>pom.xml</code> 文件添加插件，跳过项目运行测试用例。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--跳过项目运行测试用例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/6f2612a2/image-20221216165530676.png" alt="image-20221216165530676"></p><ol><li>在 <code>target</code> 目录下复制 <code>jar</code> 包并保存到自己想要保存的目录。</li></ol><p><img src="/post/6f2612a2/image-20221216165651179.png" alt="image-20221216165651179"></p><ol><li><code>cmd</code> 进入 <code>jar</code> 包目录，运行 <code>java -jar xxx.jar</code>。</li></ol><p><img src="/post/6f2612a2/image-20221216165822074.png" alt="image-20221216165822074"></p><ol><li>访问 <code>http://127.0.0.1:8080/hello</code> 。</li></ol><p><img src="/post/6f2612a2/image-20221216170023080.png" alt="image-20221216170023080"></p><h1 id="什么是-starter-机制？"><a href="#什么是-starter-机制？" class="headerlink" title="什么是 starter 机制？"></a>什么是 starter 机制？</h1><p><code>SpringBoot</code> 中的 <code>starter</code> 是一种非常重要的机制(自动化配置)，能够抛弃以前繁杂的配置，将其统一集成进 <code>starter</code>，应用者只需要在 Maven 中引入 <code>starter</code> 依赖，<code>SpringBoot</code> 就能自动扫描到要加载的信息并启动相应的默认配置。</p><p><code>starter</code> 让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。<code>SpringBoot</code> 会自动通过 <code>classpath</code> 路径下的类发现需要的 <code>Bean</code>，并注册进 <code>IOC</code> 容器。<code>SpringBoot</code> 提供了针对日常企业应用研发各种场景的 <code>spring-boot-starter</code> 依赖模块。</p><p>所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“约定大于配置”的理念。</p><p>个人理解，<code>starter</code> 是定义并维护了某个开发场景下的依赖，使我们可以直接应用该场景下的 <code>starter</code> ，无需关心具体要导入哪些 <code>jar</code> 包和它的版本。例如：<code>spring-boot-starter-web</code> 。</p><p>官方定义了一系列 strater ，我们也可以自定义 starter。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.spring.io/spring-boot/docs/2.7.6/reference/html/using.html#using.build-systems.starters</span><br></pre></td></tr></table></figure><h1 id="依赖怎么管理？"><a href="#依赖怎么管理？" class="headerlink" title="依赖怎么管理？"></a>依赖怎么管理？</h1><p>在上述示例中，我们在 <code>pom.xml</code> 文件中定义了项目的父工程为 <code>spring-boot-starter-parent</code>，再往上查看，我们发现  <code>spring-boot-starter-parent</code>的父工程为 <code>spring-boot-dependencies</code>，查看 <code>spring-boot-dependencies</code> 的 <code>pom.xml</code> 文件，发现其中 <code>&lt;properties&gt;&lt;/properties&gt;</code> 标签内定义了一大堆的版本号，用于集中管理版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.16.5<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.98<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>2.19.1<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>3.22.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">awaitility.version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">awaitility.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义版本号"><a href="#自定义版本号" class="headerlink" title="自定义版本号"></a>自定义版本号</h2><p>虽然 Springboot 有依赖管理机制，但是有些时候我们还是想自己定义依赖版本，例如使用 <code>mybatis-spring-boot-starter</code> 时，默认定义的 <code>+++++++++++++++++++++++++++++++++++++++++++++++++++++++.jar</code> 的版本是 <code>8.0.31</code> ，但是我们想使用 <code>5.1.49</code> 。</p><p>我们只需要在项目的 pom.xml 文件中定义<code>&lt;properties&gt;&lt;/properties&gt;</code> 标签，并在标签内添加 <code>&lt;mysql.version&gt;5.1.49&lt;/mysql.version&gt;</code> （标签名与<code>spring-boot-dependencies</code>中定义的标签名一致）。0</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><p>在上面实例中，我们只是引入了一个 starter 依赖，写开了一个 Application 类，·</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/post/c24675b4.html"/>
      <url>/post/c24675b4.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/post/7273cdc.html"/>
      <url>/post/7273cdc.html</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://maven.apache.org/index.html">https://maven.apache.org/index.html</a></p><p>Maven 是一个项目开发管理和理解工具。基于项目对象模型的概念：构建、依赖关系管理、文档创建、站点发布和分发发布都由 <a href="https://maven.apache.org/ref/3.8.6/maven-model/maven.html">声明<code>pom.xml</code>文件</a>控制。<a href="https://maven.apache.org/plugins/">Maven 可以通过插件</a>进行扩展， 以利用许多其他开发工具来进行报告或构建过程。是一个软件项目管理和理解工具。基于项目对象模型 (POM) 的概念，Maven 可以从一条中央信息管理项目的构建、报告和文档。Maven 除了以程序构建能力为特色以外，还提供了高级项目管理工具。</p><h1 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h1><ul><li>遵循最佳实践的简单项目设置 ， 在几秒钟内启动新项目或模块</li><li>在所有项目中保持一致的使用方式——意味着新开发人员进入项目时无需准备时间</li><li>高级依赖管理，包括自动更新、依赖关闭（也称为传递依赖）</li><li>能够轻松地同时处理多个项目</li><li>开箱即用的大型且不断增长的库和元数据存储库，以及与最大的开源项目的安排，以实时提供其最新<a href="https://maven.apache.org/repository/">版本</a></li><li>可扩展，能够轻松地用 Java 或脚本语言<a href="https://maven.apache.org/plugin-developers/">编写插件</a></li><li>只需很少或无需额外配置即可即时访问新功能</li><li>在 Maven 之外进行依赖管理和部署的 Ant 任务</li><li>基于模型的构建：Maven 能够将任意数量的项目构建为预定义的输出类型，例如 JAR、WAR 或基于项目元数据的分发，在大多数情况下无需执行任何脚本编写。</li><li>项目信息的连贯站点：使用与构建过程相同的元数据，Maven 能够生成一个网站或 PDF，包括您想要添加的任何文档，并添加到关于项目开发状态的标准报告中。此信息的示例可以在本网站左侧导航底部的“项目信息”和“项目报告”子菜单下看到。</li><li>发布管理和分发发布：无需太多额外配置，Maven 将与您的源代码控制系统（如 Subversion 或 Git）集成，并根据某个标签管理项目的发布。它还可以将其发布到分发位置以供其他项目使用。Maven 能够发布单独的输出，例如 JAR、包含其他依赖项和文档的存档，或作为源代码分发。</li><li>依赖管理：Maven 鼓励使用 JAR 和其他依赖的中央存储库。<strong>Maven 带有一种机制，您的项目的客户可以使用该机制从中央 JAR 存储库下载构建项目所需的任何 JAR</strong>，这与 Perl 的 CPAN 非常相似。这允许 Maven 的用户跨项目重用 JAR，并鼓励项目之间的通信以确保处理向后兼容性问题。</li><li><strong>Maven定义了一套生命周期：清理、初始化、编译、测试、报告、打包、部署、站点生成。</strong></li></ul><h1 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h1><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>下载地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//archive.apache.org/dist/maven/</span></span><br></pre></td></tr></table></figure><p><code>maven-3</code> —&gt; <code>3.6.3</code> —&gt; <code>binaries/</code> —&gt; <code>apache-maven-3.6.3-bin.zip</code></p><p>解压自己需要安装的目录即可。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>新建系统变量，变量名为：<code>MAVEN_HOME</code>，变量值为Maven目录。</p><p><img src="/post/7273cdc/image-20221213154821076.png" alt="image-20221213154821076"></p><p>编辑系统变量<code>path</code>，添加<code>%MAVEN_HOME%\bin;</code>。</p><p><img src="/post/7273cdc/image-20221213155242815.png" alt="image-20221213155242815"></p><p>打开 <code>cmd</code> ，输入 <code>mvn -version</code>测试是否成功。</p><p><img src="/post/7273cdc/image-20221213155318700.png" alt="image-20221213155318700"></p><h2 id="修改settings-xml文件"><a href="#修改settings-xml文件" class="headerlink" title="修改settings.xml文件"></a>修改<code>settings.xml</code>文件</h2><p>打开 <code>settings.xml</code> （在 Maven 目录下的 <code>conf</code> 目录下），查找 <code>localRepository</code> ，在注释外添加 <code>&lt;localRepository&gt;本地仓库路径&lt;/localRepository&gt;</code> 用来存储和管理本地 <code>jar</code> 包。例如：</p><p><img src="/post/7273cdc/image-20221213155733232.png" alt="image-20221213155733232"></p><p>查找 <code>&lt;mirrors&gt;</code> ，在 <code>&lt;mirrors&gt;&lt;/mirrors&gt;</code> 标签内添加如下内容，配置阿里云镜像源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/7273cdc/image-20221213160126672.png" alt="image-20221213160126672"></p><h1 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h1><p>Maven 的生命周期就是为了对所有的构建过程进行抽象和统一。包括项目的<strong>清理，初始化，编译，测试，打包，集成测试，验证，部署和生成站点</strong>等构建步骤。</p><h2 id="Maven三套独立的生命周期"><a href="#Maven三套独立的生命周期" class="headerlink" title="Maven三套独立的生命周期"></a>Maven三套独立的生命周期</h2><p>Maven 提供了三套独立的生命周期：<strong>clean</strong>, <strong>default</strong> 和 <strong>site</strong></p><ol><li><p><code>clean</code> 生命周期：清理项目，删除前一次构建在<code>target</code>文件夹下生成的各个Jar包等……</p><p>三个步骤：</p><ul><li><p><code>pre-clean</code>：执行一些清理前需要完成的工作</p></li><li><p><code>clean</code>：清理上一次构建生成的文件</p></li><li><p><code>post-clean</code>：执行一些清理后需要完成的工作</p></li></ul><p>举例：</p><ul><li><code>mvn clean</code>  就是在调用 <code>clean</code> 生命周期的 <code>clean</code> 阶段，实际执行了 <code>pre-clean</code> 和 <code>clean</code> 阶段</li></ul></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">阶段（phase）</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">pre-clean</td><td style="text-align:center">执行清理前的预处理工作</td></tr><tr><td style="text-align:center">clean</td><td style="text-align:center">清理之前构建的结果</td></tr><tr><td style="text-align:center">post-clean</td><td style="text-align:center">执行清理后需要做的工作</td></tr></tbody></table></div><ol><li><p><code>default</code> 生命周期：定义了真正构建项目中需要执行的所有步骤</p><p>八个步骤：</p><ul><li><code>validate</code>：验证工程是否正确，所有需要的资源是否可用。</li><li><code>compile</code>：编译项目的源代码。</li><li><code>test</code>：使用合适的单元测试框架来测试已编译的源代码。这些测试不需要已打包和布署。</li><li><code>Package</code>：把已编译的代码打包成可发布的格式，比如 <code>jar</code>。</li><li><code>integration-test</code>：如有需要，将包处理和发布到一个能够进行集成测试的环境。</li><li><code>verify</code>：运行所有检查，验证包是否有效且达到质量标准。</li><li><code>install</code>：把包安装到 Maven 本地仓库，可以被其他工程作为依赖来使用。</li><li><code>Deploy</code>：在集成或者发布环境下执行，将最终版本的包拷贝到远程的 <code>repository</code> ，使得其他的开发者或者工程可以共享。</li></ul><p>举例：</p><ul><li><code>mvn test</code>  就是在调用 <code>default</code> 生命周期的 <code>test</code> 阶段，实际执行了 <code>validate</code> 到 <code>test</code> 阶段之间的所有阶段</li><li><code>mvn clean package</code> 就是在调用 <code>clean</code> 生命周期的 <code>clean</code> 阶段和 <code>default</code>生命周期的<code>package</code>阶段，实际执行<code>clean</code>生命周期<code>pre-clean</code>和<code>clean</code>阶段和<code>default</code>生命周期<code>validate</code>到<code>package</code>阶段之间的所有阶段</li></ul></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">阶段（phase）</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">validate</td><td style="text-align:center">验证项目有效性还有所有必要的信息是否可以获取到</td></tr><tr><td style="text-align:center">initialize</td><td style="text-align:center">初始化构建状态，比如设置一些属性或者创建一些目录</td></tr><tr><td style="text-align:center">generate-sources</td><td style="text-align:center">生成一些源码，这些源码在编译的时候可能会用到</td></tr><tr><td style="text-align:center">process-sources</td><td style="text-align:center">处理源码，比如过滤一些值</td></tr><tr><td style="text-align:center">generate-resources</td><td style="text-align:center">生成一些资源，在打包的时候可能会包含这些资源</td></tr><tr><td style="text-align:center">process-resources</td><td style="text-align:center">拷贝或者处理资源，将它们移动到目标目录，用于打包</td></tr><tr><td style="text-align:center">compile</td><td style="text-align:center">编译项目的源码</td></tr><tr><td style="text-align:center">process-classes</td><td style="text-align:center">后置处理编译阶段生成的文件，比如对Java类进行字节码增强</td></tr><tr><td style="text-align:center">generate-test-sources</td><td style="text-align:center">生成一些测试源码，在编译的时候可能会用到</td></tr><tr><td style="text-align:center">process-test-sources</td><td style="text-align:center">处理测试源码，比如过滤一些值</td></tr><tr><td style="text-align:center">generate-test-resources</td><td style="text-align:center">创建测试需要用的资源</td></tr><tr><td style="text-align:center">process-test-resources</td><td style="text-align:center">拷贝或者处理资源，将它们移动到测试用的目录</td></tr><tr><td style="text-align:center">test-compile</td><td style="text-align:center">编译测试源码，结果输出到目标目录</td></tr><tr><td style="text-align:center">process-test-classes</td><td style="text-align:center">后置处理测试阶段编译产生的文件，比如对Java类进行字节码增强</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">使用合适的单元测试框架进行测试，这些测试不应该依赖被打包或部署的代码</td></tr><tr><td style="text-align:center">prepare-package</td><td style="text-align:center">在真正打包前做一些必要的准备操作，这个操作会产生未打包的，处理过的package版本</td></tr><tr><td style="text-align:center">package</td><td style="text-align:center">将编译后的代码打包成可分发的格式，比如jar包</td></tr><tr><td style="text-align:center">pre-integration-test</td><td style="text-align:center">执行集成测试之前的准备工作，比如设置一些需要的环境信息</td></tr><tr><td style="text-align:center">integration-test</td><td style="text-align:center">如果有必要，会处理和部署包到继承测试可以运行的环境中</td></tr><tr><td style="text-align:center">post-integration-test</td><td style="text-align:center">集成测试后的后置处理，比如清理集成测试用的环境</td></tr><tr><td style="text-align:center">verify</td><td style="text-align:center">运行检测任务，以检查包是否合法，是否符合质量要求</td></tr><tr><td style="text-align:center">install</td><td style="text-align:center">将包安装到本地仓库，作为依赖提供给本地的其它项目用</td></tr><tr><td style="text-align:center">deploy</td><td style="text-align:center">将包发送到远程仓库，其它的开发者和项目可以使用它作为依赖</td></tr></tbody></table></div><ol><li><p><code>site</code>生命周期：是建立和发布项目站点，Maven可以给予<code>pom</code>所包含的信息，生成一个站点，方便团队交流和发布项目信息</p><p>四个步骤：</p><ul><li><code>pre- site</code></li><li><code>site</code>：生成项目站点文档</li><li><code>post-site</code></li><li><code>site-deploy</code>：将生成的项目站点发布到服务器上</li></ul><p>举例：</p><ul><li><code>mvn clean deploy site-deploy</code> 就是在调用<code>clean</code>生命周期的<code>clean</code>阶段、<code>default</code>生命周期的<code>package</code>阶段和<code>site</code>生命周期的<code>site-deploy</code>，实际执行了<code>clean</code>生命周期<code>pre-clean</code>到<code>clean</code>阶段、<code>default</code>生命周期<code>validate</code>到<code>package</code>阶段、<code>site</code>生命周期<code>pre-site</code>到<code>site-deploy</code>阶段</li></ul></li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">阶段（phase）</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">pre-site</td><td style="text-align:center">执行生成项目站点前的准备工作</td></tr><tr><td style="text-align:center">site</td><td style="text-align:center">生成项目站点文档</td></tr><tr><td style="text-align:center">post-site</td><td style="text-align:center">执行操作用于完成站点文档生成，为站点部署做准备</td></tr><tr><td style="text-align:center">site-deploy</td><td style="text-align:center">部署站点文档到指定的web服务器</td></tr></tbody></table></div><h1 id="Maven插件"><a href="#Maven插件" class="headerlink" title="Maven插件"></a>Maven插件</h1><p>生命周期中的阶段，类似 Java 的模版方法，它是抽象的，需要由插件去实现它。执行 Maven 命令的时候都是由各个生命周期阶段的插件来完成具体的工作的。比如<code>default</code>生命周期的<code>package</code>阶段可能就是由<code>maven-jar-plugin</code>完成的，之所以说是可能，是因为 Maven 会给一些阶段绑定默认的插件实现，我们也可以通过提供别的插件来改变阶段的执行。</p><p>插件除了和生命周期的阶段绑定执行，也可以单独执行，比如<code>mvn dependency:tree</code>可以直接执行<code>dependency</code>插件的<code>tree</code>目标。即生命周期离不开插件，但是插件却可以离开生命周期单独执行。</p><h2 id="插件的种类"><a href="#插件的种类" class="headerlink" title="插件的种类"></a>插件的种类</h2><p>Maven 插件有<code>build</code>类型和<code>reporting</code>类型插件两类，分别在<code>pom.xml</code>的<code>&lt;build/&gt;</code>和<code>&lt;reporting/&gt;</code>部分指定。我们平时主要用的都是<code>build</code>类型插件。</p><h2 id="插件的命名"><a href="#插件的命名" class="headerlink" title="插件的命名"></a>插件的命名</h2><p>自己开发的Maven插件名字需要遵循<code>&lt;yourplugin&gt;-maven-plugin</code>。Maven官方的插件名字遵循<code>maven-&lt;yourplugin&gt;-plugin</code>的格式。</p><h2 id="生命周期阶段和插件的绑定"><a href="#生命周期阶段和插件的绑定" class="headerlink" title="生命周期阶段和插件的绑定"></a>生命周期阶段和插件的绑定</h2><p>Maven 的生命周期的阶段需要和插件绑定，才能完成构建任务。比如 <code>default</code> 生命周期的 <code>compile</code> 这个阶段，可以通过<code>maven-compiler-plugin</code>的<code>compile</code>目标完成。</p><p>一些生命周期阶段和插件默认绑定的关系：</p><p><img src="/post/7273cdc/657e35d45fe949339fe48a9f2728ca90.png" alt="img"></p><p>也可以通过在 <code>pom.xml</code> 中自定义插件和生命周期的阶段的绑定关系，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">2.1</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">      &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">          &lt;id&gt;attach-sources&lt;/id&gt;</span><br><span class="line">          &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class="line">          &lt;goals&gt;</span><br><span class="line">            &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class="line">          &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">      &lt;/executions&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><h1 id="Idea集成本地Maven"><a href="#Idea集成本地Maven" class="headerlink" title="Idea集成本地Maven"></a>Idea集成本地Maven</h1><p><code>File</code>  —&gt;  <code>Close Project</code> （如果有 <code>Close All Projects</code> 选项，选择 <code>Close All Projects</code>）</p><p>选择 <code>Customize</code></p><p><img src="/post/7273cdc/image-20221213161905675.png" alt="image-20221213161905675"></p><p>点击 <code>Configure...</code></p><p><img src="/post/7273cdc/image-20221213162244716.png" alt="image-20221213162244716"></p><p>搜索框输入 <code>Maven</code></p><p><img src="/post/7273cdc/image-20221213162304213.png" alt="image-20221213162304213"></p><p>修改<code>Maven home path</code>为自己的Maven目录。</p><p>勾选<code>User setting file</code>后面的<code>Override</code>，选择Maven目录<code>conf</code>文件夹下的<code>settings.xml</code>文件（若<code>settings.xml</code>文件已配置本地仓库，<code>Local repository</code>会自动变为本地仓库地址）</p><p><img src="/post/7273cdc/image-20221213161505953.png" alt="image-20221213161505953"></p><p><code>Apply</code> 即可</p><h1 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h1><p>打开 <code>Idea</code>， <code>New Project</code> </p><p><img src="/post/7273cdc/image-20221213163642594.png" alt="image-20221213161058138"></p><p>选择<code>Maven</code> —&gt; 勾选 <code>Create from archetype</code> —&gt; 选择<code>org.apache.maven.archetypes:maven-archetype-quickstart</code> </p><p><img src="/post/7273cdc/image-20221213163736256.png" alt="image-20221213163736256"></p><p>点击 <code>Next</code>  —&gt; 填写项目信息</p><p><img src="/post/7273cdc/image-20221213164119457.png" alt="image-20221213164119457"></p><p>点击 <code>Next</code></p><p><img src="/post/7273cdc/image-20221213164137690.png" alt="image-20221213164137690"></p><p>确定 <code>Maven</code> 信息以及项目信息正确，点击 <code>Finish</code></p><p>打开项目的 <code>pom.xml</code> 文件，修改 <code>JDK</code> 版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Idea使用Maven插件"><a href="#Idea使用Maven插件" class="headerlink" title="Idea使用Maven插件"></a>Idea使用Maven插件</h1><p><img src="/post/7273cdc/image-20221213190329630.png" alt="image-20221213190329630"></p><h2 id="常用命令及其作用"><a href="#常用命令及其作用" class="headerlink" title="常用命令及其作用"></a>常用命令及其作用</h2><ul><li><code>maven clean</code>：对项目进行清理，删除<code>target</code>目录下编译的内容</li><li><code>maven compile</code>：编译项目源代码</li><li><code>maven test</code>：对项目进行运行测试</li><li><code>maven packet</code>：打包文件并存放到项目的<code>target</code>目录下，打包好的文件通常都是编译后的<code>class</code>文件</li><li><code>maven install</code>：在本地仓库生成仓库的安装包，可供其他项目引用，同时打包后的文件放到项目的<code>target</code>目录下</li></ul><h2 id="常用命令使用场景举例"><a href="#常用命令使用场景举例" class="headerlink" title="常用命令使用场景举例"></a>常用命令使用场景举例</h2><ul><li><p><code>mvn clean package</code>：依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、<code>testCompile</code>、<code>test</code>、<code>jar</code> (打包)等<code>７</code>个阶段，<code>package</code>完成了项目编译、单元测试、打包功能，但没有把打好的可执行 <code>jar</code> 包（ <code>war</code> 包或其它形式的包）布署到本地 Maven 仓库和远程 Maven 私服仓库</p></li><li><p><code>mvn clean install</code>：依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、<code>testCompile</code>、<code>test</code>、<code>jar</code> (打包)、<code>install</code> 等<code>8</code> 个阶段，<code>install</code> 命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地 Maven 仓库，但没有布署到远程 Maven私服仓库</p></li><li><p><code>mvn clean deploy</code>：依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、<code>testCompile</code>、<code>test</code>、<code>jar</code> (打包)、<code>install</code>、<code>deploy</code> 等<code>９</code>个阶段，<code>deploy</code> 命令完成了项目编译、单元测试、打包功能，同时把打好的可执行 <code>jar</code> 包（ <code>war</code> 包或其它形式的包）布署到本地 Maven 仓库和远程 Maven 私服仓库</p></li></ul><h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><p><code>mvn clean install</code> 和 <code>mvn install</code> 的区别：</p><ul><li>根据 Maven 在执行一个生命周期命令时，理论上讲，不做 <code>mvn install</code> 得到的 <code>jar</code> 包应该是最新的，除非使用其他方式修改 <code>jar</code> 包的内容，但没有修改源代码</li><li>平时可以使用 <code>mvn install</code>，不使用 <code>clean</code> 会节省时间，但是最保险的方式还是 <code>mvn clean install</code>，这样可以生成最新的jar包或者其他包</li></ul><p>Maven两种跳过单元测试方法的区别：</p><ul><li><code>mvn package -Dmaven.test.skip=true</code>（不但跳过了单元测试的运行，同时也跳过了测试代码的编译）</li><li><code>mvn package -DskipTests</code>（跳过单元测试，但是会继续编译。如果没时间修改单元测试的 <code>bug</code>，或者单元测试编译错误，则使用第一种，不要使用第二种）</li></ul><p>测试环境部署的脚本：</p><ul><li><p><code>mvn clean install -U -Dmaven.test.skip=true</code></p></li><li><p><code>mvn clean install -U -DskipTests</code></p></li></ul><h1 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h1><p>中央仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://search.maven.org/#browse</span><br></pre></td></tr></table></figure><p>从中央仓库查到对应 <code>jar</code> 包坐标，粘贴到 <code>pom.xml</code> 文件中的 <code>&lt;dependencies&gt;&lt;/dependencies&gt;</code> 标签内。</p><p>例如 <code>mysql-connector-java.jar</code> 的坐标为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/post/7273cdc/image-20221213211131874.png" alt="image-20221213211131874"></p><p><img src="/post/7273cdc/image-20221213211148998.png" alt="image-20221213211148998"></p><h1 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h1><p>在 <code>&lt;dependency&gt;&lt;/dependency&gt;</code> 标签中定义 <code>&lt;scope&gt;&lt;/scope&gt;</code> 标签，<code>&lt;scope&gt;&lt;/scope&gt;</code> 标签中填写依赖范围</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">编译有效</th><th style="text-align:center">测试有效</th><th style="text-align:center">运行有效</th></tr></thead><tbody><tr><td style="text-align:center">compile</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">provided</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">runtime</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table></div><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="依赖继承"><a href="#依赖继承" class="headerlink" title="依赖继承"></a>依赖继承</h1><h1 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h1>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML</title>
      <link href="/post/a7539ae9.html"/>
      <url>/post/a7539ae9.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>XML的全称为(EXtensible Markup Language 可扩展标记语言)。</p><ul><li>标记语言：通过标签来描述数据的一 门语言(标签有时我们也将其称之为元素) 。</li><li>可扩展：标签的名字是可以自定义的，XML文件是由很多标签组成的,，而标签名是可以自定义的。</li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>XML 的设计宗旨是<strong>传输数据</strong>，而非显示数据，XML 标签没有被预定义，您需要<strong>自行定义标签</strong>。</p><ul><li><p>用于进行存储数据和传输数据。</p></li><li><p>作为软件的配置文件。</p></li></ul><p><strong>XML 是不作为的。</strong></p><p> XML 不会做任何事情，XML 被设计用来结构化、存储以及传输信息。它仅仅是纯文本而已。有能力处理纯文本的软件都可以处理 XML。</p><p>不过，能够读懂 XML 的应用程序可以有针对性地处理 XML 的标签。标签的功能性意义依赖于应用程序的特性。</p><h2 id="标签的规则"><a href="#标签的规则" class="headerlink" title="标签的规则"></a>标签的规则</h2><ul><li><p>标签由一对尖括号和合法标识符组成。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>标签必须成对出现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>特殊的标签可以不成对,但是必须有结束标记。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>标签中可以定义属性，属性和标签名空格隔开，属性值必须用引号引起来。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>XML 标签对大小写敏感。</p></li></ul><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><ul><li><p>XML文件的后缀名为<code>.xml</code>。</p></li><li><p>第一行第一列必须是文档声明。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>必须存在一个根标签，有且只能有一个。 </p></li><li><p>在 XML 中，有 5 个预定义的实体引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;lt;</span> &lt; 小于</span><br><span class="line"><span class="symbol">&amp;gt;</span> &gt; 大于</span><br><span class="line"><span class="symbol">&amp;amp;</span> &amp; 和号</span><br><span class="line"><span class="symbol">&amp;apos;</span> &#x27; 单引号</span><br><span class="line"><span class="symbol">&amp;quot;</span> &quot; 引号</span><br></pre></td></tr></table></figure><p>在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。</p></li><li><p>在 XML 中编写注释的语法与 HTML 的语法很相似：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is a comment --&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>HTML 会把多个连续的空格字符裁减（合并）为一个，在 XML 中文档中的空格不会被删节。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hobbies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hobby</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">hobby</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hobby</span>&gt;</span>music<span class="tag">&lt;/<span class="name">hobby</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hobbies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hobbies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hobby</span>&gt;</span>LOL手游<span class="tag">&lt;/<span class="name">hobby</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hobby</span>&gt;</span>music<span class="tag">&lt;/<span class="name">hobby</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hobbies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hobbies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hobby</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">hobby</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hobby</span>&gt;</span>music<span class="tag">&lt;/<span class="name">hobby</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hobbies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="dtd约束"><a href="#dtd约束" class="headerlink" title="dtd约束"></a>dtd约束</h1><p>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><h2 id="内部的-DOCTYPE-声明"><a href="#内部的-DOCTYPE-声明" class="headerlink" title="内部的 DOCTYPE 声明"></a>内部的 DOCTYPE 声明</h2><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [                            &lt;!-- 定义此文档是 note 类型的文档。 --&gt;</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>    &lt;!-- 定义 note 元素有四个元素：&quot;to、from、heading,、body&quot; --&gt;</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">to</span>      (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!-- 定义 to 元素为 &quot;#PCDATA&quot; 类型 --&gt;</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">from</span>    (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!-- 定义 from 元素为 &quot;#PCDATA&quot; 类型 --&gt;</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">heading</span> (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!-- 定义 heading 元素为 &quot;#PCDATA&quot; 类型 --&gt;</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="keyword">body</span>    (<span class="keyword">#PCDATA</span>)&gt;</span>&lt;!-- 定义 body 元素为 &quot;#PCDATA&quot; 类型 --&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="外部文档声明"><a href="#外部文档声明" class="headerlink" title="外部文档声明"></a>外部文档声明</h2><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="keyword">SYSTEM</span> <span class="string">&quot;文件名&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>note.dtd：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure></p><h2 id="网络dtd约束引入"><a href="#网络dtd约束引入" class="headerlink" title="网络dtd约束引入"></a>网络dtd约束引入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;dtd文件的名称&quot;</span> <span class="string">&quot;dtd文档的URL&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="dtd书写规则"><a href="#dtd书写规则" class="headerlink" title="dtd书写规则"></a>dtd书写规则</h2><p>参考<a href="https://www.w3school.com.cn/dtd/dtd_elements.asp"> W3school文档</a></p><h1 id="schema约束"><a href="#schema约束" class="headerlink" title="schema约束"></a>schema约束</h1><ul><li>schema约束文件也是一个xml文件，符合xml的语法，这个文件的后缀名.xsd</li><li>一个xml中可以引用多个schema约束文件，多个schema使用名称空间区分（名称空间类似于java包名）</li><li>dtd里面元素类型的取值比较单一常见的是PCDATA类型，但是在schema里面可以支持很多个数据类型</li></ul><h2 id="引入schema约束"><a href="#引入schema约束" class="headerlink" title="引入schema约束"></a>引入schema约束</h2><ol><li>在根标签上定义属性<code>xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;</code>。</li><li>通过<code>xmlns</code>引入约束文件的名称空间。</li><li>给某一个<code>xmlns</code>属性添加一个标识，用于区分不同的名称空间，格式为: <code>xmlns:标识=&quot;名称空间地址&quot;</code>，标识可以是任意的，但是一般取值都是<code>xsi</code>。</li><li>通过<code>xsi:schemaLocation</code>指定名称空间所对应的约束文件路径，格式为：<code>xsi:schemaLocation = &quot;名称空间url 文件路径&quot;</code>。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.w3school.com.cn note.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="xsd书写规则"><a href="#xsd书写规则" class="headerlink" title="xsd书写规则"></a>xsd书写规则</h2><p>参考<a href="https://www.w3school.com.cn/schema/schema_simple.asp"> W3school文档</a></p>]]></content>
      
      
      <categories>
          
          <category> xml </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/post/f6491cfb.html"/>
      <url>/post/f6491cfb.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>​        要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识。</p><ul><li>IPv4：是给每个连接在网络上的主机分配一个32bit地址。按照<code>TCP/IP</code>规定，IP地址用二进制来表示，每个IP地址长<code>32bit</code>，也就是<code>4个字节</code>。例如一个采用二进制形式的IP地址是<code>11000000 10101000 00000001 01000010</code>，这么长的地址，处理起来也太费劲了。为了方便使用，IP地址经常被写成<code>十进制</code>的形式，中间使用符号<code>.</code>分隔不同的字节。于是，上面的IP地址可以表示为<code>192.168.1.66</code>。IP地址的这种表示法叫做<strong>点分十进制表示法</strong>，这显然比<code>1</code>和<code>0</code>容易记忆得多。</li><li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，通过<code>IPv6</code>重新定义地址空间，采用<code>128bit</code>地址长度，每<code>16bit</code>一组，分成<code>8组十六进制数</code>，这样就解决了网络地址资源数量不够的问题。例如：<code>2001:0db8:86a3:08d3:1319:8a2e:0370:7344</code>。</li></ul><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>​        网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>​        通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有<code>UDP</code>（User Datagram Protocol  用户数据报协议）协议和<code>TCP</code>（Transmission Control Protocol  传输控制协议）协议。</p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><ul><li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</li><li>由于使用UDP协议消耗系统资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输。</li><li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。</li></ul><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><ul><li>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</li><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。</li></ul></li><li>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等。</li><li>四次挥手：终止一个 TCP 连接要经过四次挥手。这是由于 TCP 的半关闭（half-close）特性造成的，TCP 提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。<ul><li>第一次挥手：客户端发送一个 FIN 报文（请求连接终止：FIN = 1），报文中会指定一个序列号 seq = u。并停止再发送数据，主动关闭 TCP 连接。此时客户端处于 FIN_WAIT1 状态，等待服务端的确认。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。</li><li>第三次挥手：如果服务端也想断开连接了（没有要向客户端发出的数据），和客户端的第一次挥手一样，发送 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态，等待客户端的确认。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答（ack = w+1），且把服务端的序列值 +1 作为自己 ACK 报文的序号值（seq=u+1），此时客户端处于 TIME_WAIT（时间等待）状态。</li></ul></li></ul><h1 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h1><p>​        UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个<code>Socket</code>对象，但是这两个<code>Socket</code>只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念。</p><p>​        Java提供了<code>DatagramSocket</code>类作为基于UDP协议的<code>Socket</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket(); <span class="comment">//创建数据报套接字并将其绑定到本机地址上的任何可用端口</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DatagramPacket(<span class="type">byte</span>[] buf,<span class="type">int</span> len,InetAddress add,<span class="type">int</span> port); <span class="comment">//创建数据包,发送长度为len的数据包到指定主机的指定端口</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">send</span><span class="params">(DatagramPacket p)</span>; <span class="comment">//发送数据报包</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>; <span class="comment">//关闭数据报套接字</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(DatagramPacket p)</span>; <span class="comment">//从此套接字接受数据报包</span></span><br></pre></td></tr></table></figure><h2 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h2><p>单播用于两个主机之间的端对端通信。</p><p>发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//创建要发送的数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;这是我要发送的数据！！！&quot;</span>).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">//打包数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建接收端socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="comment">//接收对象</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            datagramSocket.receive(datagramPacket);</span><br><span class="line">            <span class="type">String</span> <span class="variable">receiveStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(datagramPacket.getData(), <span class="number">0</span>, datagramPacket.getLength());</span><br><span class="line">            System.out.println(receiveStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/f6491cfb/image-20221210165824820.png" alt="image-20221210165824820"></p><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>广播用于一个主机对整个局域网上所有主机上的数据通信。</p><p>广播UDP与单播UDP的区别就是IP地址不同，广播使用广播地址<code>255.255.255.255</code>，将消息发送到在同一广播网络上的每个主机。</p><p>值得强调的是：本地广播信息是不会被路由器转发。当然这是十分容易理解的，因为如果路由器转发了广播信息，那么势必会引起网络瘫痪。这也是为什么IP协议的设计者故意没有定义互联网范围的广播机制。</p><p>广播地址通常用于在网络游戏中处于同一本地网络的玩家之间交流状态信息等。其实广播顾名思义，就是想局域网内所有的人说话，但是广播还是要指明接收者的端口号的，因为不可能接受者的所有端口都来收听广播。</p><p>发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//创建要发送的数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;这是我要发送的数据！！！&quot;</span>).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">//打包数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length, InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>), <span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建接收端socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="comment">//接收对象</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            datagramSocket.receive(datagramPacket);</span><br><span class="line">            <span class="type">String</span> <span class="variable">receiveStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(datagramPacket.getData(), <span class="number">0</span>, datagramPacket.getLength());</span><br><span class="line">            System.out.println(receiveStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/f6491cfb/image-20221210210131547.png" alt="image-20221210210131547"></p><h2 id="多播（组播）"><a href="#多播（组播）" class="headerlink" title="多播（组播）"></a>多播（组播）</h2><p>多播，也称为“组播”，将网络中同一业务类型主机进行了逻辑上的分组，进行数据收发的时候其数据仅仅在同一分组中进行，其他的主机没有加入此分组不能收发对应的数据。</p><p>在广域网上广播的时候，其中的交换机和路由器只向需要获取数据的主机复制并转发数据。主机可以向路由器请求加入或退出某个组，网络中的路由器和交换机有选择地复制并传输数据，将数据仅仅传输给组内的主机。多播的这种功能，可以一次将数据发送到多个主机，又能保证不影响其他不需要(未加入组)的主机的其他通 信。</p><p>相对于传统的一对一的单播多播具有如下的优点：</p><ol><li>具有同种业务的主机加入同一数据流，共享同一通道，节省了带宽和服务器的优点，具有广播的优点而又没有广播所需要的带宽。</li><li>服务器的总带宽不受客户端带宽的限制。由于组播协议由接收者的需求来确定是否进行数据流的转发，所以服务器端的带宽是常量，与客户端的数量无关。</li><li>与单播一样，多播是允许在广域网即Internet上进行传输的，而广播仅仅在同一局域网上才能进行。</li></ol><p>组播的缺点：</p><ol><li>多播与单播相比没有纠错机制，当发生错误的时候难以弥补，但是可以在应用层来实现此种功能。</li><li>多播的网络支持存在缺陷，需要路由器及网络协议栈的支持。</li><li>多播的应用主要有网上视频、网上会议等。</li></ol><p>多播的地址是特定的，D类地址用于多播。D类IP地址就是多播IP地址，即<code>224.0.0.0</code>至<code>239.255.255.255</code>之间的IP地址，并被划分为局部连接多播地址、预留多播地址和管理权限多播地址3类：</p><ol><li>局部多播地址：在<code>224.0.0.0～224.0.0.255</code>之间，这是为路由协议和其他用途保留的地址，路由器并不转发属于此范围的IP包。</li><li>预留多播地址：在<code>224.0.1.0～238.255.255.255</code>之间，可用于全球范围(如Internet)或网络协议。</li><li>管理权限多播地址：在<code>239.0.0.0～239.255.255.255</code>之间，可供组织内部使用，类似于私有IP地址，不能用于Internet，可限制多播范围。</li></ol><p>发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">datagramSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//创建要发送的数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;这是我要发送的数据！！！&quot;</span>).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">//打包数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length, InetAddress.getByName(<span class="string">&quot;224.0.1.0&quot;</span>), <span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        datagramSocket.send(datagramPacket);</span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收：</p><p>​        与单播和多播不同的是，多播接收端使用的<code>socket</code>对象不是<code>DatagramSocket</code>，而是<code>MulticastSocket</code>。将<code>MulticastSocket</code>还需要加入到指定的多点广播地址，<code>MulticastSocket</code>使用<code>joinGroup()</code>方法加入指定组；使用<code>leaveGroup()</code>方法脱离一个组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建接收端socket对象</span></span><br><span class="line"><span class="comment">//        DatagramSocket datagramSocket = new DatagramSocket(8086);</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">multicastSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">8086</span>);</span><br><span class="line">        multicastSocket.joinGroup(InetAddress.getByName(<span class="string">&quot;224.0.1.0&quot;</span>));</span><br><span class="line">        <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">datagramPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length);</span><br><span class="line">        <span class="comment">//接收对象</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            multicastSocket.receive(datagramPacket);</span><br><span class="line">            <span class="type">String</span> <span class="variable">receiveStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(datagramPacket.getData(), <span class="number">0</span>, datagramPacket.getLength());</span><br><span class="line">            System.out.println(receiveStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/f6491cfb/image-20221210211513635.png" alt="image-20221210211513635"></p><h1 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h1><p>Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</p><p>Java为<strong>客户端</strong>提供了<strong>Socket</strong>类，为<strong>服务器端</strong>提供了<strong>ServerSocket</strong>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">piblic Socket <span class="title function_">Socket</span><span class="params">(InetAddress address, <span class="type">int</span> port)</span>; <span class="comment">//创建流套接字并将其连接到指定IP指定端口号</span></span><br><span class="line"><span class="keyword">public</span> Socket <span class="title function_">Socket</span><span class="params">(String host, <span class="type">int</span> port)</span>; <span class="comment">//创建流套接字并将其连接到指定主机上的指定端口号</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="keyword">public</span> OutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sender</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建客户端的Socket对象，指定接收端的ip和端口</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//得到OutputStream对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//发送数据</span></span><br><span class="line">        outputStream.write(<span class="string">&quot;这是我要发送的数据！！！&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ServletSocket</span><span class="params">(<span class="type">int</span> port)</span>; <span class="comment">//创建绑定到指定端口的服务器套接字</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Socket <span class="title function_">accept</span><span class="params">()</span> <span class="keyword">throws</span> IOException; <span class="comment">//监听要连接到此接收端的服务端，并与他建立连接</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建接收端对象，并指定监听端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8086</span>);</span><br><span class="line">        <span class="comment">//监听要连接到此接收端的服务端，并与他建立连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        <span class="comment">//得到InputStream对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> accept.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//读取数据，并输出打印</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> inputStream.read(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,read));</span><br><span class="line"></span><br><span class="line">        serverSocket.close();</span><br><span class="line">        accept.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/f6491cfb/image-20221210214757250.png" alt="image-20221210214757250"></p><h1 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h1><ul><li>http协议</li><li>统一资源定位符</li><li>请求组成</li><li>响应组成</li><li>http模拟</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/post/5729df21.html"/>
      <url>/post/5729df21.html</url>
      
        <content type="html"><![CDATA[<p>为了实现在同一时间运行多个任务，Java引入了多线程的概念。在Java中，可以通过方便、快捷的方式启动多线程模式。多线程常被应用在符合并发机制的程序中，例如网路程序等。</p><h1 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h1><ol><li>并发与并行<ul><li>并发：并发，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。</li><li>并行：在操作系统中，是指一组程序按独立异步的速度执行，无论从微观还是宏观，程序都是一起执行的。对比地，并发是指:在同一个时间段内，两个或多个程序执行，有时间上的重叠(宏观上是同时,微观上仍是顺序执行)。</li></ul></li><li><p>程序、进程与线程</p><ul><li>程序：程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念。</li><li>进程：进程是执行程序的一次执行过程，它是一个动态的概念，是系统资源分配的单位。</li><li>线程：通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没 有存在的意义。线程是CPU调度和执行的的单位。</li></ul></li><li><p>时间片：时间片（timeslice）又称为“量子（quantum）”或“处理器片（processor slice）”，是分时操作系统分配给每个正在运行的进程微观上的一段CPU时间（在抢占内核中是：从进程开始运行直到被抢占的时间）。现代操作系统（如：Windows、Linux、Mac OS X等）允许同时运行多个进程 —— 例如，你可以在打开音乐播放器听音乐的同时用浏览器浏览网页并下载文件。事实上，虽然一台计算机通常可能有多个CPU，但是同一个CPU永远不可能真正地同时运行多个任务。在只考虑一个CPU的情况下，这些进程“看起来像”同时运行的，实则是轮番穿插地运行，由于时间片通常很短（在Linux上为5ms－800ms），用户不会感觉到。<strong>进程是资源分配单位，线程是CPU调度单位，对大多数操作系统来说，时间片是线程而非进程相关的。</strong></p></li></ol><ul><li>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，<code>gc</code>线程。</li><li><code>main()</code> 称之为主线程，为系统的入口，用于执行整个程序。</li><li>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与 操作系统紧密相关的，先后顺序是不能人为的干预的。 </li><li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制。</li><li>线程会带来额外的开销，如CPU调度时间，并发控制开销。 </li><li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</li></ul><h1 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h1><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><p><code>Thread</code>类是<code>java.lang</code>包下的一个类，<code>Thread</code>类的对象用来代表线程，通过继承<code>Thread</code>类创建、启动并执行一个线程的步骤如下：</p><ol><li>创建一个继承<code>Thread</code>类的子类；</li><li>覆写<code>Thread</code>类的<code>run()</code>方法；</li><li>创建线程类的一个对象；</li><li>通过线程类的对象调用<code>start()</code>方法启动线程（启动之后会自动调用覆写的<code>run()</code>方法执行线程）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(count--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5729df21/image-20221206202653293.png" alt="image-20221206202653293"></p><h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>如果当前类不仅要继承其他类，还要实现多线程，那么继承<code>Thread</code>类肯定不行，因为Java不支持多继承。</p><p>实现<code>Runnable</code>接口的程序会创建一个<code>Thread</code>对象，并将<code>Runnable</code>对象与<code>Thread</code>对象相关联。<code>Thread</code>类中有两个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span>; <span class="comment">//创建新的Thread对象，将实现Runnable接口的对象target作为其运行对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target, String name)</span>; <span class="comment">//创建新的Thread对象，将被指定名称的、实现Runnable接口的对象target作为其运行对象。</span></span><br></pre></td></tr></table></figure><p>使用<code>Runnable</code>接口启动新线程的步骤如下：</p><ol><li>创建<code>Runnable</code>对象；</li><li>使用参数为<code>Runnable</code>对象的构造方法创建<code>Thread</code>对象；</li><li>调用<code>start()</code>方法启动线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(count--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5729df21/image-20221206204541789.png" alt="image-20221206204541789"></p><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><p>实现<code>Callable</code>接口有别于前两种创建线程的方式，实现<code>Callable</code>接口不是重写/实现<code>run()</code>而是实现<code>call()</code>方法，并且有返回值。</p><p>使用<code>Callable</code>接口启动多线程步骤：</p><ol><li>定义一个类<code>MyCallable</code>实现<code>Callable</code>接口；</li><li>在<code>MyCallable</code>类中重写<code>call()</code>方法；</li><li>创建<code>MyCallable</code>类的对象；</li><li>创建<code>Future</code>的实现类<code>FutureTask</code>对象，把<code>MyCallable</code>对象作为构造方法的参数；</li><li>创建<code>Thread</code>类的对象，把<code>FutureTask</code>对象作为构造方法的参数；</li><li>调用<code>start()</code>方法启动线程。</li><li><code>FutureTask</code>对象调用<code>get</code>方法，就可以获取线程结束之后的结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(count--);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;结束了！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">myCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myCallable);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5729df21/image-20221207131324168.png" alt="image-20221207131324168"></p><h1 id="线程设置名称"><a href="#线程设置名称" class="headerlink" title="线程设置名称"></a>线程设置名称</h1><div class="table-container"><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">void setName(String name)</td><td style="text-align:center">将此线程的名称更改为等于参数name</td></tr><tr><td style="text-align:center">String getName()</td><td style="text-align:center">返回此线程的名称</td></tr><tr><td style="text-align:center">Thread currentThread()</td><td style="text-align:center">返回对当前正在执行的线程对象的引用</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123; <span class="built_in">super</span>(name); &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(getName()+ <span class="string">&quot;:&quot;</span> + count--);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;myThread1&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span>; <span class="comment">//使当前线程停留（暂停执行）指定的毫秒数</span></span><br></pre></td></tr></table></figure><h1 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h1><h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><ul><li><p>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片。</p></li><li><p>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一 </p><p>个，优先级高的线程获取的 CPU 时间片相对多一些。</p></li></ul><p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也 </p><p>就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一 </p><p>定的。</p><p><strong>Java使用的是抢占式调度模型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getPriority</span><span class="params">()</span>; <span class="comment">//返回此线程的优先级</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> newPriority)</span>; <span class="comment">//更改此线程的优先级线程默认优先级是5；线程优先级的 范围是：1-10</span></span><br></pre></td></tr></table></figure><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。</p><p>状态被定义在了<code>java.lang.Thread.State</code>枚举类中，State枚举类的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* 新建 */</span></span><br><span class="line">        NEW , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 可运行状态 */</span></span><br><span class="line">        RUNNABLE , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 阻塞状态 */</span></span><br><span class="line">        BLOCKED , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 无限等待状态 */</span></span><br><span class="line">        WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 计时等待 */</span></span><br><span class="line">        TIMED_WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 终止 */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前线程的状态</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jdk.internal.misc.VM.toThreadState(threadStatus);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>线程状态</th><th>具体含义</th></tr></thead><tbody><tr><td>NEW</td><td>一个尚未启动的线程的状态。也称之为初始状态、开始状态。线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread()只有线程象，没有线程特征。</td></tr><tr><td>RUNNABLE</td><td>当我们调用线程对象的start方法，那么此时线程对象进入了RUNNABLE状态。那么此时才是真正的在JVM进程中创建了一个线程，线程一经启动并不是立即得到执行，线程的运行与否要听令与CPU的调度，那么我们把这个中间状态称之为可执行状态(RUNNABLE)也就是说它具备执行的资格，但是并没有真正的执行起来而是在等待CPU的度。</td></tr><tr><td>BLOCKED</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>WAITING</td><td>一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有两种，分别是调用Object.wait()、join()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。</td></tr><tr><td>TIMED_WAITING</td><td>一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有三种，分别是：Thread.sleep(long)，Object.wait(long)、join(long)。</td></tr><tr><td>TERMINATED</td><td>一个完全运行完成的线程的状态。也称之为终止状态、结束状态。</td></tr></tbody></table></div><p><img src="/post/5729df21/image-20221208160547291.png" alt="image-20221208160547291"></p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>由于线程执行的随机性，导致的语句在运行过程中丢失CPU的执行权，使得一个方法还未执行完，另一个线程就插入执行。如果多个线程中有共享变量，就可能产生线程安全问题。</p><p>例如如下卖票案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//卖完了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                tickets--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建SellTicket类的对象</span></span><br><span class="line">        <span class="type">SellTicket</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket</span>();</span><br><span class="line">        <span class="comment">//创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;售票员1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;售票员2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;售票员3&quot;</span>);</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个线程之间共享变量<code>tickets</code>，导致出现线程安全问题。</p><p><img src="/post/5729df21/image-20221207140532213.png" alt="image-20221207140532213"></p><p>安全问题出现的条件：</p><ul><li>是多线程环境</li><li>有共享数据</li><li>有多条语句操作共享数据 </li></ul><p>如何解决多线程安全问题呢? </p><ul><li>基本思想：让程序没有安全问题的环境 </li></ul><p>怎么实现呢? </p><ul><li>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可 </li><li>Java提供了同步代码块的方式来解决 </li></ul><p>同步代码块格式： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(任意对象) &#123;</span><br><span class="line">  多条语句操作共享数据的代码</span><br><span class="line">&#125; <span class="comment">//相当于给代码加锁了，任意对象就可以看成是一把锁</span></span><br></pre></td></tr></table></figure><p>同步的好处和弊端 </p><ul><li><p>好处：解决了多线程的数据安全问题 </p></li><li><p>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的 运行效率 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tickets &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//卖完了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    tickets--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h1><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了 </p><p>锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象<code>Lock</code>。 </p><p><code>Lock</code>是接口不能直接实例化，采用它的实现类<code>ReentrantLock</code>来实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock(); <span class="comment">//构造方法，创建一个ReentrantLock的实例 </span></span><br></pre></td></tr></table></figure><p>加锁解锁方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>; <span class="comment">//获得锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>; <span class="comment">//释放锁</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">if</span> (tickets &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//卖完了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                tickets--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lock</code>和<code>synchronized</code>比较：</p><ul><li><code>Lock</code>是显式锁（手动开启和关闭锁，别忘记关闭锁）<code>synchronized</code>是隐式锁，出了作用域自动释放。</li><li><code>Lock</code>只有代码块锁，<code>synchronized</code>有代码块锁和方法锁（<code>public synchronized void method(int args) &#123;&#125;</code>）。</li><li>使用<code>Lock</code>锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展 性（提供更多的子类） 。</li><li><p>优先使用顺序： </p><p><code>Lock</code> &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外） </p></li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>一个进程集合中的每一个进程都在等待只能由该集合中的其他进程才能引发的事件，那么该组进程进入死锁状态（Deadlock）。由于集合中的每个进程都在等待集合中的另一个进程释放资源，但由于他们都已经处于等待状态而无法进行，所以他们谁也不会释放资源，结果就是这组进程都无法再向前推进。</p><h2 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h2><ul><li>互斥条件。进程所竞争的资源必须被互斥使用。</li><li>占用且等待。当前已拥有资源的进程，仍能申请新的资源，而且，当该进程因为新的资源被其他进程占用而阻塞时，它对自己已获得的资源仍保持不放。</li><li>不剥夺（抢占）。进程已经获得的资源，只能在使用完时自行释放，而不能被抢占。</li><li>环路等待条件。存在一个至少包含两个进程的循环等待链，链中的每个进程都在等待下一个进程所占用的资源。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()‐ &gt; &#123; <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objA) &#123; <span class="comment">//线程一 </span></span><br><span class="line">                <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()‐ &gt; &#123; <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">                <span class="comment">//线程二 </span></span><br><span class="line">                <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//两个进程都需要objA和objB锁，且两个线程都分别占有且等待另一个线程释放锁。</span></span><br></pre></td></tr></table></figure><h2 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h2><p>死锁产生的四个必要条件中，后三个都是可以打破的，只要打破其中任意一个条件，就能预防死锁。</p><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><p>银行家算法</p><h1 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h1><p>生产者消费者模式是一个十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的 理解更加深刻。 </p><p>所谓生产者消费者问题，实际上主要是包含了两类线程：</p><ul><li><p>一类是生产者线程用于生产数据</p></li><li><p>一类是消费者线程用于消费数据</p></li></ul><p>为了解耦生产者和消费者的关系，通常会采用共享的数据区域，就像是一个仓库，生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为消费者只需要从共享数据区中去获取数据，并不需要关心生产者的行为。</p><p>Object类的等待和唤醒方法 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span>; <span class="comment">//导致当前线程等待，直到另一个线程调用该对象的</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>; <span class="comment">//唤醒正在等待对象监视器的单个线程</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span>; <span class="comment">//唤醒正在等待对象监视器的所有线程</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span></span><br><span class="line">    <span class="comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">// 生产者步骤</span></span><br><span class="line">    <span class="comment">// 1，判断桌子上是否有汉堡包</span></span><br><span class="line">    <span class="comment">// 如果有就等待，如果没有才生产。</span></span><br><span class="line">    <span class="comment">// 2，把汉堡包放在桌子上。</span></span><br><span class="line">    <span class="comment">// 3，叫醒等待的消费者开吃。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Desk.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!Desk.flag) &#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师正在生产汉堡包&quot;</span>);</span><br><span class="line">                        Desk.flag = <span class="literal">true</span>;</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1，判断桌子上是否有汉堡包。</span></span><br><span class="line">        <span class="comment">// 2，如果没有就等待。</span></span><br><span class="line">        <span class="comment">// 3，如果有就开吃</span></span><br><span class="line">        <span class="comment">// 4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line">        <span class="comment">// 叫醒等待的生产者继续生产</span></span><br><span class="line">        <span class="comment">// 汉堡包的总数量减一</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Desk.count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Desk.flag) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃汉堡包&quot;</span>);</span><br><span class="line">                        Desk.flag = <span class="literal">false</span>;</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                        Desk.count--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*  消费者步骤：</span></span><br><span class="line"><span class="comment">            1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">            2，如果没有就等待。</span></span><br><span class="line"><span class="comment">            3，如果有就开吃</span></span><br><span class="line"><span class="comment">            4，吃完之后，桌子上的汉堡包就没有了 叫醒等待的生产者继续生产 汉堡包的总数量减一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">/*  生产者步骤：</span></span><br><span class="line"><span class="comment">            1，判断桌子上是否有汉堡包 如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">            3，叫醒等待的消费者开吃。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>();</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>();</span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/5729df21/image-20221207154015390.png" alt="image-20221207154015390"></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><ul><li>将Desk类中的变量,采用面向对象的方式封装起来</li><li>生产者和消费者类中构造方法接收Desk类对象,之后在run方法中进行使用</li><li>创建生产者和消费者线程对象,构造方法中传入Desk类对象</li><li>开启两个线程 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span></span><br><span class="line">    <span class="comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span></span><br><span class="line">    <span class="comment">//public static boolean flag = false;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="comment">//public static int count = 10;</span></span><br><span class="line">    <span class="comment">//以后我们在使用这种必须有默认值的变量</span></span><br><span class="line">   <span class="comment">// private int count = 10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="comment">//public static final Object lock = new Object();</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 在空参内部调用带参,对成员变量进行赋值,之后就可以直接使用成员变量了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Desk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>,<span class="number">10</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Desk</span><span class="params">(<span class="type">boolean</span> flag, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Desk&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;flag=&quot;</span> + flag +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&quot;, lock=&quot;</span> + lock +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(Desk desk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desk = desk;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  生产者步骤：</span></span><br><span class="line"><span class="comment">//  1，判断桌子上是否有汉堡包，如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//  2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//  3，叫醒等待的消费者开吃。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (desk.getLock())&#123;</span><br><span class="line">                <span class="keyword">if</span>(desk.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span></span><br><span class="line">                    <span class="keyword">if</span>(!desk.isFlag())&#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师正在生产汉堡包&quot;</span>);</span><br><span class="line">                        desk.setFlag(<span class="literal">true</span>);</span><br><span class="line">                        desk.getLock().notifyAll();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            desk.getLock().wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(Desk desk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desk = desk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//  1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//  2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//  3，如果有就开吃</span></span><br><span class="line"><span class="comment">//  4，吃完之后，桌子上的汉堡包就没有了，叫醒等待的生产者继续生产，汉堡包的总数量减一</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (desk.getLock())&#123;</span><br><span class="line">                <span class="keyword">if</span>(desk.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(desk.isFlag())&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃汉堡包&quot;</span>);</span><br><span class="line">                        desk.setFlag(<span class="literal">false</span>);</span><br><span class="line">                        desk.getLock().notifyAll();</span><br><span class="line">                        desk.setCount(desk.getCount() - <span class="number">1</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            desk.getLock().wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*  消费者步骤：</span></span><br><span class="line"><span class="comment">            1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">            2，如果没有就等待。</span></span><br><span class="line"><span class="comment">            3，如果有就开吃</span></span><br><span class="line"><span class="comment">            4，吃完之后，桌子上的汉堡包就没有了 叫醒等待的生产者继续生产 汉堡包的总数量减一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">/*  生产者步骤：</span></span><br><span class="line"><span class="comment">            1，判断桌子上是否有汉堡包 如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">            3，叫醒等待的消费者开吃。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Desk</span> <span class="variable">desk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Desk</span>();</span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(desk);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(desk);</span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p>阻塞添加：当阻塞队列满时，往队列里添加元素的操作将被阻塞。</p><p>阻塞移除：当阻塞队列空时，从队列中获取/删除元素的操作将被阻塞。</p><p>阻塞只是线程暂时停止，当满足执行条件时，线程会继续运行。</p><p><img src="/post/5729df21/image-20221207164513784.png" alt="image-20221207164513784"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">put(anObject); <span class="comment">//将参数放入队列，如果放不进去会阻塞</span></span><br><span class="line">take(); <span class="comment">//取出第一个数据，取不到会阻塞</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生产者步骤：</span></span><br><span class="line">    <span class="comment">// 1、判断桌子上是否有汉堡包，如果有就等待，如果没有才生产。</span></span><br><span class="line">    <span class="comment">// 2、把汉堡包放在桌子上。</span></span><br><span class="line">    <span class="comment">// 3、叫醒等待的消费者开吃。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bd.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;厨师放入一个汉堡包&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1、判断桌子上是否有汉堡包。</span></span><br><span class="line">        <span class="comment">// 2、如果没有就等待。</span></span><br><span class="line">        <span class="comment">// 3、如果有就开吃</span></span><br><span class="line">        <span class="comment">// 4、吃完之后，桌子上的汉堡包就没有了，叫醒等待的生产者继续生产，汉堡包的总数量减一</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">take</span> <span class="operator">=</span> bd.take();</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货将&quot;</span> + take + <span class="string">&quot;拿出来吃了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       ArrayBlockingQueue&lt;String&gt; bd = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(bd);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(bd);</span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p><strong>什么是线程池？</strong></p><p>线程池是一种利用池化技术思想来实现的线程管理技术，主要是为了复用线程、便利地管理线程和任务、并将线程的创建和任务的执行解耦开来。我们可以创建线程池来复用已经创建的线程来降低频繁创建和销毁线程所带来的资源消耗。在Java中主要是使用<code>ThreadPoolExecutor</code>类来创建线程池，并且JDK中也提供了<code>Executors</code>工厂类来创建线程池（不推荐使用）。</p><p><strong>线程池的优点：</strong></p><ul><li>降低资源消耗，复用已创建的线程来降低创建和销毁线程的消耗。</li><li>提高响应速度，任务到达时，可以不需要等待线程的创建立即执行。</li><li>提高线程的可管理性，使用线程池能够统一的分配、调优和监控。</li></ul><h2 id="Executors线程池"><a href="#Executors线程池" class="headerlink" title="Executors线程池"></a>Executors线程池</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span>; <span class="comment">//创建一个默认的线程池，为无限大小Integer.MAX_VALUE</span></span><br><span class="line"><span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span>; <span class="comment">//创建一个指定最多线程数量的线程池</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//1,创建一个默认的线程池对象.池子中默认是空的.默认最多可以容纳int类型的最大值.</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//Executors --- 可以帮助我们创建线程池对象</span></span><br><span class="line">        <span class="comment">//ExecutorService --- 可以帮助我们控制线程池</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            executorService.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1><p><code>volatile</code>是<code>java</code>虚拟机提供的轻量级的同步机制，具有三大特性：</p><ol><li>保证可见性 </li><li>不保证原子性</li><li>禁止指令重排</li></ol><p>JVM运行程序实体是线程，线程创建时JVM都会为其开辟一个工作内存，工作内存是每个线程私有的数据区域，而<code>java</code>内存模型中规定所有变量都存在主内存中，线程对变量的操作(读取和赋值)必须在自己的工作内存中进行，首先要将变量从主内存中拷贝到自己的工作内存空间，然后对变量进行操作，操作完后再将变量写会主内存。</p><ul><li>堆内存是唯一的，每一个线程都有自己的线程栈。</li><li>每一个线程在使用堆里面变量的时候，都会先拷贝一份到变量的副本中。</li><li>在线程中，每一次使用是从变量的副本中获取的。</li></ul><h2 id="volatile解决可见性问题"><a href="#volatile解决可见性问题" class="headerlink" title="volatile解决可见性问题"></a>volatile解决可见性问题</h2><p><code>volatile</code>最原始的意义就是禁用 CPU 缓存，这意味着对于volatile修饰的变量，对于其读写，都必须从内存中读取或写入，而不能使用CPU缓存。</p><h2 id="volatile解决部分有序性问题"><a href="#volatile解决部分有序性问题" class="headerlink" title="volatile解决部分有序性问题"></a>volatile解决部分有序性问题</h2><p>解决思路：</p><ul><li>确定在不同线程<code>X</code>和<code>Y</code>中具有依赖关系的操作<code>A</code>和<code>B</code>的先后顺序（如A Happens-Before B）</li><li>取一个共享的布尔（也可以是其他类型）变量<code>flag</code>并赋初值</li><li>线程<code>X</code>中在<code>A</code>操作后改变<code>flag</code>的值</li><li>线程<code>Y</code>在<code>B</code>操作前判断<code>flag</code>的值是否为上一步改变的值</li><li>这样就可以保证具有依赖关系的<code>A</code>和<code>B</code>操作有序执</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/post/a6f4e89e.html"/>
      <url>/post/a6f4e89e.html</url>
      
        <content type="html"><![CDATA[<p>在变量、对象和数组中存储的数据都是暂时的，程序结束后救会丢失。为了能够长时间地保存程序中的数据，需要将程序中的数据保存到磁盘文件中。</p><p><img src="/post/a6f4e89e/image-20221205144854522.png" alt="image-20221205144854522"></p><h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>在程序开发过程中，将输入输出设备之间的数据传递抽象为流，例如键盘可以输入数据，显示器可以输出输出等。</p><p>按照不同的分类方式，可以将流分为不同类型：</p><ul><li>根据操作流的数据单元，可以将流分为字节流和字符流。</li><li>根据流的流向，可以分为输入流与输出流。</li></ul><p>从内存的角度出发，输入流是指将数据从数据源流入到内存的过程，输出流是指数据从内存流出到数据源的过程。</p><h2 id="输入-输出流"><a href="#输入-输出流" class="headerlink" title="输入/输出流"></a>输入/输出流</h2><p>Java把与输入/输出有关的类都放在了<code>java.io</code>包中。其中，所有与输入流有关的类都是抽象类<code>InputStream</code>或者抽象类<code>Reader</code>的子类，所有与输出流有关的类都是抽象类<code>OutputStream</code>或抽象类<code>Writer</code>的子类。</p><h3 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h3><p>输入流抽象类有两种，分别是<code>InputStream</code>字节输入流和<code>Reader</code>字符输入流。</p><h4 id="InputStream类"><a href="#InputStream类" class="headerlink" title="InputStream类"></a>InputStream类</h4><p><code>InputStream</code>类是字节输入流的抽象类，是所有字节输入流的父类。常用子类有：</p><p><img src="/post/a6f4e89e/image-20221205152733039.png" alt="image-20221205152733039"></p><p><code>InputStream</code>中的所有方法遇到错误时会引发<code>IOException</code>异常。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException; <span class="comment">//读取一个字节并以整数的形式返回（0~255）,如果返回-1就说明已经到了输入流的末尾</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[])</span> <span class="keyword">throws</span> IOExceptionc &#123;...&#125; <span class="comment">//从输入流中读入一定长度的字节，并以整数的形式返回字节数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;...&#125; <span class="comment">//关闭此输入流并释放与该流关联的所有系统资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">skip</span><span class="params">(<span class="type">long</span> n)</span> <span class="keyword">throws</span> IOException &#123;...&#125; <span class="comment">//跳过输入流上的n个字节并返回实际跳过的字节数</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\IdeaProjects\\demo07\\src\\main\\resources\\demo.txt&quot;</span>);</span><br><span class="line">            <span class="type">int</span> read;</span><br><span class="line">            <span class="keyword">while</span> ((read = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>)read);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a6f4e89e/image-20221205154321005.png" alt="image-20221205154321005"></p><h4 id="Reader类"><a href="#Reader类" class="headerlink" title="Reader类"></a>Reader类</h4><p>Java中的字符是<code>Unicode</code>编码，是双字节的，而<code>InputStream</code>类是用来处理单字节的，并不适合处理字符。为此，Java提供了专门处理字符的<code>Reader</code>类，<code>Reader</code>类是字符输入流的抽象类，也是所有字符输入流的父类。常用子类有：</p><p><img src="/post/a6f4e89e/image-20221205154935034.png" alt="image-20221205154935034"></p><p><code>Reader</code>类中的方法与<code>InputStream</code>类中的方法类似，但需要注意的一点是，<code>Reader</code>类的<code>read()</code>方法的参数为<code>Char</code>类型的数组。<code>Reader</code>还提供了一个<code>ready()</code>方法，该方法用来判断是否准备读取流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">ready</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> in.ready();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h3><p>输入流抽象类有两种，分别是<code>OutputStream</code>字节输入流和<code>Writer</code>字符输入流。</p><h4 id="OutputStream类"><a href="#OutputStream类" class="headerlink" title="OutputStream类"></a>OutputStream类</h4><p><code>OutputStream</code>类是字节输出流的抽象类，是所有字节输出流的父类。常用子类有：</p><p><img src="/post/a6f4e89e/image-20221205163655285.png" alt="image-20221205163655285"></p><p><code>OutputStream</code>类中的所有方法均没有返回值，在遇到错误时会引发<code>IOException</code>异常。常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> b)</span> <span class="keyword">throws</span> IOException <span class="comment">//向输出流中写入一个字节数据，该字节数据为参数b的低8位</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b)</span> <span class="keyword">throws</span> IOException <span class="comment">//将一个字节类型的数组中的数据写入输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">byte</span>[] b,<span class="type">int</span> off,<span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException <span class="comment">//将一个字节类型的数组中的从指定位置（off）开始的len个字节写入到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException <span class="comment">//关闭流释放内存资源</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException <span class="comment">//将输出流中缓冲的数据全部写出到目的地</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\IdeaProjects\\demo07\\src\\main\\resources\\demo.txt&quot;</span>);</span><br><span class="line">            out.write(<span class="keyword">new</span> <span class="title class_">byte</span>[] &#123;<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;!&#x27;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a6f4e89e/image-20221205165009568.png" alt="image-20221205165009568"></p><h4 id="Writer类"><a href="#Writer类" class="headerlink" title="Writer类"></a>Writer类</h4><p><code>Writer</code>类是字符输出流的抽象类，是所有字符输出流的父类。常用子类有：</p><p><img src="/post/a6f4e89e/image-20221205165450998.png" alt="image-20221205165450998"></p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Writer <span class="title function_">append</span><span class="params">(CharSequence csq)</span> <span class="keyword">throws</span> IOException; <span class="comment">//将指定字符串添加到此writer中</span></span><br><span class="line"><span class="keyword">public</span> Writer <span class="title function_">append</span><span class="params">(<span class="type">char</span> c)</span> <span class="keyword">throws</span> IOException; <span class="comment">//将指定字符添加到此writer中</span></span><br><span class="line"><span class="keyword">public</span> Writer <span class="title function_">append</span><span class="params">(CharSequence csq, <span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="keyword">throws</span> IOException; <span class="comment">//将指定字符串的子序列添加到此writer中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException; <span class="comment">//关闭此流，但是需要先刷新</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException; <span class="comment">//刷新writer流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span> cbuf[])</span> <span class="keyword">throws</span> IOException; <span class="comment">//写入字符数组</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">char</span> cbuf[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException; <span class="comment">//写入字符数组的某一部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String str)</span> <span class="keyword">throws</span> IOException; <span class="comment">//写入字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;E:\\IdeaProjects\\demo07\\src\\main\\resources\\demo.txt&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;这是一段文字，模拟输入文件！&quot;</span>);</span><br><span class="line">            fw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/a6f4e89e/image-20221205165949598.png" alt="image-20221205165949598"></p><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><p><code>File</code>类是<code>java.io</code>包中用来操作文件的类，调用File类中的方法，可以实现创建、删除、重命名文件等功能。使用File类的对象可以获取文件的基本信息，如文件所在的目录、文件名、文件大小、文件的修改时间等。</p><h2 id="创建文件对象"><a href="#创建文件对象" class="headerlink" title="创建文件对象"></a>创建文件对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String pathname)</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\IdeaProjects\\demo07/src\\main\\resources\\demo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String parent, String child)</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\IdeaProjects\\demo07/src\\main\\resources\\&quot;</span>, <span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">File</span><span class="params">(File parent, String child)</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\IdeaProjects\\demo07/src\\main\\resources\\&quot;</span>)</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(folder, <span class="string">&quot;demo.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>File类提供了操作文件的相应方法，常见的文件操作主要包括判断文件是否存在、创建文件、重命名文件、删除文件以及获取文件基本信息等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">()</span>; <span class="comment">//判断文件是否可读</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">()</span>; <span class="comment">//判断文件是否可写</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException; <span class="comment">//当且仅当不存在指定文件时，创建一个新的空文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>; <span class="comment">//判断指定文件或文件夹是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>; <span class="comment">//删除指定文件或文件夹</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span>; <span class="comment">//获取文件的绝对路径</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title function_">getAbsoluteFile</span><span class="params">()</span>; <span class="comment">//获取抽象路径名的绝对路径名</span></span><br><span class="line">String <span class="title function_">getName</span><span class="params">()</span>; <span class="comment">//返回表示当前对象的文件名或路径名（如果是路径，则返回最后一级子路径名）</span></span><br><span class="line">String <span class="title function_">getParent</span><span class="params">()</span>; <span class="comment">//返回当前 File 对象所对应目录（最后一级子目录）的父目录名</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>; <span class="comment">//测试当前 File 对象表示的文件是否为一个“普通”文件</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">length</span><span class="params">()</span>; <span class="comment">//返回当前 File 对象表示的文件长度</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAbsolute</span><span class="params">()</span>; <span class="comment">//测试当前 File 对象表示的文件是否为一个绝对路径名。该方法消除了不同平台的差异，可以直接判断 file 对象是否为绝对路径。在 UNIX/Linux/BSD 等系统上，如果路径名开头是一条斜线/，则表明该 File 对象对应一个绝对路径；在 Windows 等系统上，如果路径开头是盘符，则说明它是一个绝对路径。</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">lastModified</span><span class="params">()</span>; <span class="comment">//返回当前 File 对象表示的文件最后修改的时间</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">renameTo</span><span class="params">(File)</span>; <span class="comment">//将当前 File 对象指定的文件更名为给定参数 File 指定的路径名</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span>; <span class="comment">//获取路径名字字符串</span></span><br></pre></td></tr></table></figure><p>其中<code>delete()</code>、<code>exists()</code>、<code>getName()</code>、<code>getAbsoluteFile()</code>、<code>getAbsolutePath()</code>、<code>getParent()</code>、<code>getPath()</code>方法同样适用于文件夹操作。</p><h2 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>; <span class="comment">//判断指定文件或文件夹是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span>; <span class="comment">//删除指定文件或文件夹</span></span><br><span class="line">String <span class="title function_">getParent</span><span class="params">()</span>; <span class="comment">//返回当前 File 对象所对应目录（最后一级子目录）的父目录名</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAbsolutePath</span><span class="params">()</span>; <span class="comment">//获取文件的绝对路径</span></span><br><span class="line">String <span class="title function_">getParent</span><span class="params">()</span>; <span class="comment">//返回当前 File 对象所对应目录（最后一级子目录）的父目录名</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span>; <span class="comment">//获取路径名字字符串</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span>; <span class="comment">//测试当前 File 对象表示的文件是否为一个路径</span></span><br><span class="line">String[] list(); <span class="comment">//返回当前 File 对象指定的路径文件列表</span></span><br><span class="line">String[] list(FilenameFilter); <span class="comment">//返回当前 File 对象指定的目录中满足指定过滤器的文件列表</span></span><br><span class="line"><span class="keyword">public</span> File[] listFiles(); <span class="comment">//返回路径中所有的文件</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span>; <span class="comment">//创建一个目录，它的路径名由当前 File 对象指定</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span>; <span class="comment">//创建一个目录，它的路径名由当前 File 对象指定</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型与集合类</title>
      <link href="/post/ade9575d.html"/>
      <url>/post/ade9575d.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>Java中的参数化类型被称为泛型。以集合为例，集合可以使用泛型限制被添加元素的数据类型，如果将不符合指定数据类型的元素添加到集合内，编译器就会报错。泛型提供了编译时类型安全检测机制，该机制允许 程序员在编译时检测到非法的类型。</p><p>定义泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">calss 类名&lt;T&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，T代表被传入参数的数据类型。</p><p>在定义泛型类时，一般类型名称用T来表达，而容器的元素使用E来表达。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T[] book;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(T[] book)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.book = book;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showBookInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (T book : book) &#123;</span><br><span class="line">            System.out.println(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Book&lt;String&gt; stringBook = <span class="keyword">new</span> <span class="title class_">Book</span>&lt;&gt;();</span><br><span class="line">        stringBook.book = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Java基础&quot;</span>, <span class="string">&quot;明日科技&quot;</span>, <span class="string">&quot;99.8元&quot;</span>&#125;;</span><br><span class="line">        stringBook.showBookInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/ade9575d/image-20221204170558546.png" alt="image-20221204170558546"></p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合是一个可以容纳多个对象的容器。</p><p>集合与数组的区别：</p><ul><li>数组的长度固定，集合长度可变</li><li>数组能存储基本类型和引用类型对象，集合只能存储引用类型变量</li></ul><h2 id="集合的体系结构"><a href="#集合的体系结构" class="headerlink" title="集合的体系结构"></a>集合的体系结构</h2><p><img src="/post/ade9575d/image-20221204170931381.png" alt="image-20221204170931381"></p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p><code>ArrayListt</code>实现了长度可变的数组，在内存中分配连续的空间。类似于数组一样，增删慢，查找快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><code>ArrayList</code>提供了很多方法，用来操作list：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>; <span class="comment">//在list末尾增加一个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E e)</span>; <span class="comment">//在指定位置新增一个元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>; <span class="comment">//获取并返回list元素个数</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">//移除并返回指定位置的元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>; <span class="comment">//溢出指定元素，如果不存在，返回false</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>; <span class="comment">//判断list是否包含某个元素，包含返回true，否则返回false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        list.add(<span class="number">0</span>, <span class="string">&quot;王二&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="type">String</span> <span class="variable">remove</span> <span class="operator">=</span> list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(remove);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(list.remove(<span class="string">&quot;李四&quot;</span>)); <span class="comment">//没有这个元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">remove1</span> <span class="operator">=</span> list.remove(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/ade9575d/image-20221204202137218.png" alt="image-20221204202137218"></p><p><code>ArrayList</code>继承结构：</p><p><img src="/post/ade9575d/image-20221204202310469.png" alt="image-20221204202310469"></p><h4 id="ArrayList扩容机制"><a href="#ArrayList扩容机制" class="headerlink" title="ArrayList扩容机制"></a>ArrayList扩容机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+ initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造方法，initialCapacity为初始容量，当不传参或者参数为0时，将缓冲区大小设置为默认大小（EMPTY_ELEMENTDATA）。</span></span><br><span class="line"><span class="comment">//private static final int DEFAULT_CAPACITY = 10;</span></span><br></pre></td></tr></table></figure><p><code>add</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超出容量大小，需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>); <span class="comment">//右移动相当于除2操作，1+0.5，扩容为原来的1.5倍</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可见，<code>ArrayList</code>初始容量为<code>10</code>，当容量不足以存入下一个元素时，将会增长为原来的<code>1.5</code>倍。</p><p><strong>Arrays.copyOf方法底层调用了System.copyOf方法，效率比自己建对象遍历赋值高很多。</strong></p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p><code>LinkedList</code>底层是一个双向链表，与链表的特性一样，增删快，查询慢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内部类Node节点中具有next和prev两个属性，双向链表节点。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span>; <span class="comment">//在头部插入数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span>; <span class="comment">//在尾部追加</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>; <span class="comment">//在尾部追加</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>; <span class="comment">//判断list是否包含某个元素，包含返回true，否则返回false</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>; <span class="comment">//移除匹配到的第一个与o相同的元素</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span>; <span class="comment">//移除第一个元素</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">removeLast</span><span class="params">()</span>; <span class="comment">//移除最后一个元素</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><code>Set</code>接口继承自<code>Collection</code>接口，因此可以使用<code>Collection</code>接口中的所有方法。</p><p><code>Set</code>集合中的元素不能重复，添加元素前会判断集合中是否已经存在这个元素。</p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p><code>HashSet</code>不保证元素有序（存入和取出顺序不一致），底层是<code>LinkedHashMap</code>，用<code>key</code>存值，元素不可以重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    ......</span><br><span class="line">    newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻阅底层源码可知，默认初始容量为<code>16</code>，装载因子默认为<code>0.75</code>。即在未指定的情况下，<code>HashSet</code>初始容量为<code>16</code>，当达到<code>16*0.75</code>的容量时，会进行扩容，扩容为原来的两倍。</p><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>; <span class="comment">//增加元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>; <span class="comment">//移除指定元素o</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span>; <span class="comment">//复制一个set并返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>; <span class="comment">//获取set中元素个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">//判断set是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>; <span class="comment">//判断是否包含某个元素，包含返回true，否则返回false</span></span><br></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p><code>TreeSet</code>不仅实现了<code>Set</code>接口，还实现了<code>java.util.SortedSet</code>接口，因此在遍历使用时，或默认按照元素升序排列。通过使用<code>Comparable</code>接口，可以实现自定义排序。</p><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>; <span class="comment">//增加元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>; <span class="comment">//移除指定元素o</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span>; <span class="comment">//复制一个set并返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>; <span class="comment">//获取set中元素个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">//判断set是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>; <span class="comment">//判断是否包含某个元素，包含返回true，否则返回false</span></span><br></pre></td></tr></table></figure><p><code>TreeSet</code>的排序方式：自然排序、定制排序</p><ul><li>自然排序：实现<code>Comparable</code>接口，重写<code>compareTo</code>方法</li><li>定制排序：提供<code>Comparator</code>接口匿名实现类的对象,重写<code>compare</code>方法</li></ul><p>TreeSet自然排序的实现</p><p>示例：<code>String</code>、<code>Integer</code>等作为<code>TreeSet</code>集合的元素，<code>String</code>、<code>Integer</code>等实现了<code>Comparable</code>接口，重写了<code>compareTo</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.getAge() - o.getAge();</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Person&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">19</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">19</span>, <span class="string">&quot;王二&quot;</span>);</span><br><span class="line">        treeSet.add(person);</span><br><span class="line">        treeSet.add(person1);</span><br><span class="line">        treeSet.add(person2);</span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/ade9575d/image-20221205120016922.png" alt="image-20221205120016922"></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p> <code>HashMap</code>是基于哈希表的Map接口实现的，它存储的是内容是键值对映射。此类不保证映 射的顺序，假定哈希函数将元素适当的分布在各桶之间，可为基本操作(<code>get</code>和<code>put</code>)提供稳定的性能。</p><p><strong>java1.7 之前是数组+链表 ，之后是 数组+链表+红黑树</strong></p><p><code>HashMap</code>类时<code>Map</code>接口的实现类。<code>HashMap</code>类虽然能够通过哈希表快速查找其内部的映射关系，但不能保证映射的顺序。在<code>key-value</code>键值对中，由于<code>key</code>不能重复，所以最多只有一个<code>key</code>为<code>null</code>，但可以有多个<code>key</code>的<code>value</code>为<code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span>; <span class="comment">//根据key获取值</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span>; <span class="comment">//放入一个key-value键值对</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span>; <span class="comment">//移除一个key-value键值对</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span>; <span class="comment">//获取所有value的集合</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span>; <span class="comment">//获取所有key的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span>; <span class="comment">//判断map是否包含指定的key</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span>; <span class="comment">////判断map是否包含指定的value</span></span><br></pre></td></tr></table></figure><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>所有实现了<code>Collection</code>接口的容器类都有一个<code>iterator</code>方法用以返回一个实现<code>Iterator</code>接口的对象。</p><p>Iterator对象称作为迭代器，用以方便的对容器内元素的遍历操作，Iterator接口定义了如下方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">hashNext</span><span class="params">()</span>;<span class="comment">//判断是否有元素没有被遍历 </span></span><br><span class="line">Object <span class="title function_">next</span><span class="params">()</span>;<span class="comment">//返回游标当前位置的元素并将游标移动到下一个位置 </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>;<span class="comment">//删除游标左边的元素，在执行完next之后该操作只能执行一次。</span></span><br></pre></td></tr></table></figure><p>对于<code>Set</code>集合，由于没有索引，无法使用<code>for</code>循环遍历，可以使用迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Person&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">18</span>, <span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">19</span>, <span class="string">&quot;李四&quot;</span>));</span><br><span class="line">        treeSet.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">19</span>, <span class="string">&quot;王二&quot;</span>));</span><br><span class="line">        Iterator&lt;Person&gt; iterator = treeSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>Map</code>集合，可以先获取<code>keySet</code>，再遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Person&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;李四&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;王二&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        Set&lt;String&gt; keySet = hashMap.keySet();</span><br><span class="line">        Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next + <span class="string">&quot;---&quot;</span> + hashMap.get(next));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><p><code>Collections</code>工具类提供了大量方法对集合进 行排序、查询和修改等操作，还提供了将集合对象置为不可变、对集合对象实现同步控制等方法。</p><p>这个类不需要创建对象，内部提供的都是静态方法。</p><h2 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(List&lt;?&gt; list)</span>; <span class="comment">//反转列表中元素的顺序。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shuffle</span><span class="params">(List&lt;?&gt; list)</span>; <span class="comment">//对List集合元素进行随机排序。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list)</span>; <span class="comment">//根据元素的自然顺序 对指定列表按升序进行排序</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span>; <span class="comment">//根据指定比较器产生的顺序对指定列表进行排序。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> i, <span class="type">int</span> j)</span>; <span class="comment">//在指定List的指定位置i,j处交换元素。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> distance)</span>; <span class="comment">//当distance为正数时，将List集合的后distance个元素“整体”移到前面；当distance为负数时，将list集合的前distance个元素“整体”移到后边。该方法不会改变集合的长度。</span></span><br></pre></td></tr></table></figure><h2 id="查找、替换操作"><a href="#查找、替换操作" class="headerlink" title="查找、替换操作"></a>查找、替换操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(List&lt;? extends Comparable&lt;? <span class="built_in">super</span> T&gt;&gt;list, T key)</span>; <span class="comment">//使用二分搜索法搜索指定列表，以获得指定对象在List集合中的索引。注意：此前必须保证List集合中的元素已经处于有序状态。</span></span><br><span class="line"><span class="keyword">static</span> Object <span class="title function_">max</span><span class="params">(Collection coll)</span>; <span class="comment">//根据元素的自然顺序，返回给定collection 的最大元素。</span></span><br><span class="line"><span class="keyword">static</span> Object <span class="title function_">max</span><span class="params">(Collection coll, Comparator comp)</span>; <span class="comment">//根据指定比较器产生的顺序，返回给定 collection 的最大元素。</span></span><br><span class="line"><span class="keyword">static</span> Object <span class="title function_">min</span><span class="params">(Collection coll)</span>; <span class="comment">//根据元素的自然顺序，返回给定collection 的最小元素。</span></span><br><span class="line"><span class="keyword">static</span> Object <span class="title function_">min</span><span class="params">(Collection coll, Comparator comp)</span>; <span class="comment">//根据指定比较器产生的顺序，返回给定 collection 的最小元素。</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">(List&lt;? <span class="built_in">super</span> T&gt; list, T obj)</span>; <span class="comment">//使用指定元素替换指定列表中的所有元素。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">frequency</span><span class="params">(Collection&lt;?&gt; c, Object o)</span>; <span class="comment">//返回指定 collection 中等于指定对象的出现次数。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOfSubList</span><span class="params">(List&lt;?&gt; source, List&lt;?&gt; target)</span>; <span class="comment">//返回指定源列表中第一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回-1。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lastIndexOfSubList</span><span class="params">(List&lt;?&gt; source, List&lt;?&gt; target)</span>; <span class="comment">//返回指定源列表中最后一次出现指定目标列表的起始位置；如果没有出现这样的列表，则返回-1。</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">replaceAll</span><span class="params">(List&lt;T&gt; list, T oldVal, T newVal)</span>; <span class="comment">//使用一个新值替换List对象的所有旧值oldVal</span></span><br></pre></td></tr></table></figure><h2 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; Collection&lt;T&gt; <span class="title function_">synchronizedCollection</span><span class="params">(Collection&lt;T&gt; c)</span>; <span class="comment">//返回指定 collection 支持的同步（线程安全的）collection。</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">synchronizedList</span><span class="params">(List&lt;T&gt; list)</span>; <span class="comment">//返回指定列表支持的同步（线程安全的）列表。</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; Map&lt;K,V&gt; <span class="title function_">synchronizedMap</span><span class="params">(Map&lt;K,V&gt; m)</span>; <span class="comment">//返回由指定映射支持的同步（线程安全的）映射。</span></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">synchronizedSet</span><span class="params">(Set&lt;T&gt; s)</span>; <span class="comment">//返回指定 set 支持的同步（线程安全的）set。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用类和枚举</title>
      <link href="/post/715d548b.html"/>
      <url>/post/715d548b.html</url>
      
        <content type="html"><![CDATA[<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>Java是一种面向对象的语言，为了能把基本数据类型当作对象处理，Java提出了包装类的概念。</p><p>包装类分别把Java中的8种基本类型包装成对应的类，这样就可以通过对象调用各自的包装类中的许多种实用的方法。</p><div class="table-container"><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td></td></tr></tbody></table></div><p><code>Integer</code>类中，提供了两种构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>); <span class="comment">//int参数</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;10&quot;</span>);  <span class="comment">//String参数，如果参数不是数值型字符串，会抛出NumberFormatException异常</span></span><br></pre></td></tr></table></figure><p><code>Integer</code>类常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException; <span class="comment">//返回一个 Integer对象持有指定的 String价值。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException; <span class="comment">//将字符串参数作为带符号的十进制整数。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>; <span class="comment">//返回表示这 Integer价值的 String对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toBinaryString</span><span class="params">(<span class="type">int</span> i)</span>; <span class="comment">//在基地 2无符号整数返回整数参数的字符串表示形式。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">int</span> i)</span>; <span class="comment">//在基地 16无符号整数返回整数参数的字符串表示形式。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>; <span class="comment">//将此对象与指定的对象进行比较。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span>; <span class="comment">//返回此对象对应的int值 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Integer anotherInteger)</span>; <span class="comment">//比较两 Integer对象数值。相等返回0，this &gt; another 返回正数，小于返回负数</span></span><br></pre></td></tr></table></figure><p>自动装箱与自动拆箱</p><p>Java 1.5之后，对基本类型与包装类的转换，提供了自动装箱与自动拆箱机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integerNumber</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//自动装箱，int类型自动转Integer</span></span><br><span class="line"><span class="type">int</span> <span class="variable">intNumber</span> <span class="operator">=</span> integerNumber; <span class="comment">//自动拆箱，将包装类对象转换为int数据类型</span></span><br></pre></td></tr></table></figure><p>自动拆箱是有风险的，因为包装类可以为null，基本类型不可能为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integerNumber</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">intNumber</span> <span class="operator">=</span> integerNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候应当使用<code>intValue()</code>方法。</p><h2 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h2><p>它是<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>和<code>Double</code>的父类，</p><p><img src="/post/715d548b/image-20221130211402016.png" alt="image-20221130211402016"></p><p>提供了六个抽象方法供子类重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">byteValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">byte</span>)intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">short</span> <span class="title function_">shortValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">short</span>)intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8742448824652078965L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>故而，在<code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>和<code>Double</code>中，有对应的方法去转换为其他数据类型。</p><h1 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h1><p>Java 的 <code>Math</code>类中包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p><p><code>Math</code> 的方法都被定义为 <code>static</code> 形式，通过 <code>Math.方法名()</code>可以在主函数中直接调用。</p><h2 id="常用常量"><a href="#常用常量" class="headerlink" title="常用常量"></a>常用常量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159265358979323846</span>; <span class="comment">//圆周率</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">E</span> <span class="operator">=</span> <span class="number">2.7182818284590452354</span>; <span class="comment">//自然对数底数e</span></span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="指数函数方法"><a href="#指数函数方法" class="headerlink" title="指数函数方法"></a>指数函数方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">exp</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//取e的a次方</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">log</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//取loga</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">log10</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//取log10a</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sqrt</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//取a的平方根，a取负数时不会抛异常，只会返回NaN</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cbrt</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//取a的立方根</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>; <span class="comment">//取a的b次方根</span></span><br></pre></td></tr></table></figure><h3 id="取整函数方法"><a href="#取整函数方法" class="headerlink" title="取整函数方法"></a>取整函数方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//向上取整</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//向下取整</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">rint</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//返回与实参的值最接近且等于数学整数的double值。如果两个数学整数的double值相等接近，则结果是偶数的整数值。特殊情况:如果实参值已经等于一个数学整数，则结果与实参相同。如果参数是NaN或无穷大或正0或负0，那么结果与参数相同。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> a)</span>; <span class="comment">//将参数加上0.5后返回小于等于参数的最大int值(四舍五入)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> a)</span>; <span class="comment">//将参数加上0.5后返回小于等于参数的最大long值(四舍五入)</span></span><br></pre></td></tr></table></figure><h3 id="取最大、最小、绝对值函数方法"><a href="#取最大、最小、绝对值函数方法" class="headerlink" title="取最大、最小、绝对值函数方法"></a>取最大、最小、绝对值函数方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回两个数值中大的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">max</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">max</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>;</span><br><span class="line"><span class="comment">//返回两个数值中小的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">min</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">min</span><span class="params">(<span class="type">float</span> a, <span class="type">float</span> b)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">min</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>;</span><br><span class="line"><span class="comment">//取绝对值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">abs</span><span class="params">(<span class="type">int</span> a)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">abs</span><span class="params">(<span class="type">long</span> a)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">float</span> <span class="title function_">abs</span><span class="params">(<span class="type">float</span> a)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">abs</span><span class="params">(<span class="type">double</span> a)</span>;</span><br></pre></td></tr></table></figure><h1 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">5</span>); <span class="comment">//给定任意一个合法的种子数，种子数只是随机算法的起源数字，和生成的随机数的区间没有任何关系。</span></span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span>; <span class="comment">//返回一个随机的int值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">(<span class="type">int</span> bound)</span>; <span class="comment">//返回一个大于0，小于bound的int值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span>; <span class="comment">//返回一个随机的long值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">nextBoolean</span><span class="params">()</span>; <span class="comment">//返回一个随机的boolean值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">nextFloat</span><span class="params">()</span>; <span class="comment">//返回一个随机的float值，介于[0.0-1.0)之间</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span>; <span class="comment">//返回一个随机的double值，介于[0.0-1.0)之间</span></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextGaussian</span><span class="params">()</span>; <span class="comment">//返回一个随机的符号高斯分布的double值</span></span><br></pre></td></tr></table></figure><h1 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h1><p><code>java.util</code>包中提供了<code>Date</code>类来操作时间日期。使用<code>Date</code>类时，需要先创建<code>Date</code>类对象。</p><p>提供了两种构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date();  <span class="comment">//使用当前日期和时间来初始化对象。</span></span><br><span class="line">Date(<span class="type">long</span> date); <span class="comment">//数接收一个参数，该参数是从1970年1月1日起的毫秒数。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">timeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(timeMillis);</span><br></pre></td></tr></table></figure><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">after</span><span class="params">(Date when)</span>; <span class="comment">//当调用此方法的Date对象在指定日期之后返回true,否则返回false。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Date when)</span>; <span class="comment">//当调用此方法的Date对象在指定日期之前返回true,否则返回false。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTime</span><span class="params">()</span>; <span class="comment">//返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(<span class="type">long</span> time)</span>; <span class="comment">//用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>; <span class="comment">//把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</span></span><br></pre></td></tr></table></figure><h1 id="SimpleDateFormatl类"><a href="#SimpleDateFormatl类" class="headerlink" title="SimpleDateFormatl类"></a>SimpleDateFormatl类</h1><p>一个与语言环境相关的格式化日期和分析日期的工具类，利用该类可以将日期转换成文本，或者将文本转换成日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>); <span class="comment">//格式化格式</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期转换为文本</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文本转化为日期</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2022-12-01 15:40:53&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> simpleDateFormat.parse(dateStr);</span><br><span class="line">            System.out.println(parse.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">G</td><td style="text-align:center">纪元标记</td><td style="text-align:center">AD</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">四位年份</td><td style="text-align:center">2001</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">月份</td><td style="text-align:center">July or 07</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">一个月的日期</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">A.M./P.M. (1~12)格式小时</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">H</td><td style="text-align:center">一天中的小时 (0~23)</td><td style="text-align:center">22</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">分钟数</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">秒数</td><td style="text-align:center">55</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">毫秒数</td><td style="text-align:center">234</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">星期几</td><td style="text-align:center">Tuesday</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">一年中的日子</td><td style="text-align:center">360</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">一个月中第几周的周几</td><td style="text-align:center">2 (second Wed. in July)</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">一年中第几周</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">W</td><td style="text-align:center">一个月中第几周</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">A.M./P.M. 标记</td><td style="text-align:center">PM</td></tr><tr><td style="text-align:center">k</td><td style="text-align:center">一天中的小时(1~24)</td><td style="text-align:center">24</td></tr><tr><td style="text-align:center">K</td><td style="text-align:center">A.M./P.M. (0~11)格式小时</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">z</td><td style="text-align:center">时区</td><td style="text-align:center">Eastern Standard Time</td></tr><tr><td style="text-align:center">‘</td><td style="text-align:center">文字定界符</td><td style="text-align:center">Delimiter</td></tr><tr><td style="text-align:center">“</td><td style="text-align:center">单引号</td><td style="text-align:center">`</td></tr></tbody></table></div><h1 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h1><p><code>Calendar</code>类的功能要比<code>Date</code>类强大很多，而且在实现方式上也比<code>Date</code>类要复杂一些。<br><code>Calendar</code>类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用<code>getInstance</code>方法创建即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">//默认是当前日期</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 返回的是一个日历，说明Calendar类重写了toString方法</span></span><br><span class="line"><span class="comment">* 我们需要注意在国外一年十一个月从零开始算0-11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> field)</span>; <span class="comment">//返回给定日历字段的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> field, <span class="type">int</span> value)</span>; <span class="comment">//将给定的日历字段设置为给定值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> field,<span class="type">int</span> amount)</span>; <span class="comment">//根据日历的规则，为给定的日历字段添加或减去指定的时间量</span></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getTime</span><span class="params">()</span>; <span class="comment">//返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</span></span><br></pre></td></tr></table></figure><p>Calendar中定义了许多final常量作为field参数，常见如下。</p><div class="table-container"><table><thead><tr><th style="text-align:center">常量</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Calendar.YEAR</td><td style="text-align:center">年份</td></tr><tr><td style="text-align:center">Calendar.MONTH</td><td style="text-align:center">月份</td></tr><tr><td style="text-align:center">Calendar.DATE</td><td style="text-align:center">日期</td></tr><tr><td style="text-align:center">Calendar.DAY_OF_MONTH</td><td style="text-align:center">日期 ，和上面的字段意义完全相同</td></tr><tr><td style="text-align:center">Calendar.HOUR</td><td style="text-align:center">12小时制的小时</td></tr><tr><td style="text-align:center">Calendar.HOUR_OF_DAY</td><td style="text-align:center">24小时制的小时</td></tr><tr><td style="text-align:center">Calendar.MINUTE</td><td style="text-align:center">分钟</td></tr><tr><td style="text-align:center">Calendar.SECOND</td><td style="text-align:center">秒</td></tr><tr><td style="text-align:center">Calendar.DAY_OF_WEEK</td><td style="text-align:center">星期几</td></tr></tbody></table></div><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><ul><li>枚举是一组常量的集合</li><li><p>枚举属于一种特殊的类，里面只包含一组有限的特定的对象</p></li><li><p>不需要提供 <code>setXxxx()</code> 方法，因为枚举对象值通常为只读</p></li><li><p>对枚举对象/属性使用 <strong><code>static</code>+<code>final</code></strong> 共同修饰</p></li><li><p>枚举对象名通常使用全部大写，与常量的命名规范一样</p></li><li>枚举对象根据需要，也可以有多个属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Week</span> &#123;</span><br><span class="line">    MONDAY,</span><br><span class="line">    TUESDAY,</span><br><span class="line">    WEDNESDAY ,</span><br><span class="line">    THURSDAY,</span><br><span class="line">    FRIDAY,</span><br><span class="line">    SATURDAY,</span><br><span class="line">    SUNDAY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 中的每一个枚举都继承自 java.lang.Enum 类。当定义一个枚举类型时，每一个枚举类型成员都可以看作是 Enum 类的实例，这些枚举成员默认都被 final、public, static 修饰，当使用枚举类型成员时，直接使用枚举名称调用成员即可。</p><p>常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">values();<span class="comment">//以数组形式返回枚举类型的所有成员</span></span><br><span class="line">valueOf();<span class="comment">//将普通字符串转换为枚举实例</span></span><br><span class="line">compareTo();<span class="comment">//比较两个枚举成员在定义时的顺序，返回int类型的日期差。</span></span><br><span class="line">ordinal();<span class="comment">//获取枚举成员的索引位置</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Week[] values = Week.values();</span><br><span class="line">        <span class="keyword">for</span> (Week value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Week</span> <span class="variable">week</span> <span class="operator">=</span> Week.valueOf(<span class="string">&quot;MONDAY&quot;</span>); <span class="comment">//java.lang.IllegalArgumentException: No enum constant Week.monday</span></span><br><span class="line">        System.out.println(week);</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        System.out.println(Week.WEDNESDAY.compareTo(Week.SATURDAY));</span><br><span class="line">        System.out.println(Week.SATURDAY.compareTo(Week.THURSDAY));</span><br><span class="line">        System.out.println(Week.SATURDAY.compareTo(Week.SATURDAY));</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">        System.out.println(Week.MONDAY.ordinal());</span><br><span class="line">        System.out.println(Week.TUESDAY.ordinal());</span><br><span class="line">        System.out.println(Week.WEDNESDAY.ordinal());</span><br><span class="line">        System.out.println(Week.THURSDAY.ordinal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/715d548b/image-20221201221249379.png" alt="image-20221201221249379"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常</title>
      <link href="/post/e049f5eb.html"/>
      <url>/post/e049f5eb.html</url>
      
        <content type="html"><![CDATA[<p>在Java中，尽管提供了便于写出简洁、安全代码的方法，并且程序员也可以尽可能规避错误，但程序被迫停止的错误仍然不可避免。为此，Java提供了异常处理机制来帮助程序员检查可能出现的错误，提高了程序的可读性和可维护性。</p><p>Java将异常封装到一个类中，出现错误时，就会抛出异常。</p><h1 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h1><p>Java把异常当作对象来处理，并定义一个基类 <code>java.lang.Throwable</code> 作为所有异常的超类。 </p><p>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误<code>Error</code>和异常<code>Exception</code>。</p><p><img src="/post/e049f5eb/image-20221130161816494.png" alt="image-20221130161816494"></p><p>Throwable有两个子类，Error（错误）和Exception（异常）。</p><h1 id="Error和Exception的区别"><a href="#Error和Exception的区别" class="headerlink" title="Error和Exception的区别"></a>Error和Exception的区别</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><code>Error</code>是Java程序运行中不可预料的异常情况，这种异常发生后，会直接导致JVM不可处理或者不可恢复的情况。所以这种异常不可能抓取到，比如<code>OutOfMemoryError</code>、<code>NoClassDefFoundError</code>等。</p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p><code>Exception</code>是Java程序运行中可预料的异常情况，咱们可以获取到这种异常，并且对这种异常进行业务外的处理。</p><p>异常分为运行时异常和非运行时异常。</p><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常都是<code>RuntimeException</code>类及其子类异常，如<code>NullPointerException</code>、<code>IndexOutOfBoundsException</code>等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>当出现<code>RuntimeException</code>的时候，我们可以不处理。当出现这样的异常时，总是由虚拟机接管。比如：我们从来没有人去处理过<code>NullPointerException</code>异常，它就是运行时异常，并且这种异常还是最常见的异常之一。<br>出现运行时异常后，如果没有捕获处理这个异常（即没有<code>catch</code>），系统会把异常一直往上层抛，一直到最上层，如果是多线程就由<code>Thread.run()</code>抛出，如果是单线程就被<code>main()</code>抛出。抛出之后，如果是线程，这个线程也就退出了。如果是主程序抛出的异常，那么这整个程序也就退出了。运行时异常是<code>Exception</code>的子类，也有一般异常的特点，是可以被<code>catch</code>块处理的。只不过往往我们不对他处理罢了。也就是说，你如果不对运行时异常进行处理，那么出现运行时异常之后，要么是线程中止，要么是主程序终止。<br>如果不想终止，则必须捕获所有的运行时异常，决不让这个处理线程退出。队列里面出现异常数据了，正常的处理应该是把异常数据舍弃，然后记录日志。不应该由于异常数据而影响下面对正常数据的处理。</p><h3 id="非运行时异常"><a href="#非运行时异常" class="headerlink" title="非运行时异常"></a>非运行时异常</h3><p>非运行时异常是<code>RuntimeException</code>以外的异常，类型上都属于<code>Exception</code>类及其子类。如<code>IOException</code>、<code>SQLException</code>等以及用户自定义的<code>Exception</code>异常。对于这种异常，Java编译器强制要求我们必需对出现的这些异常进行<code>catch</code>并处理，否则程序就不能编译通过。所以，面对这种异常不管我们是否愿意，只能自己去写一大堆<code>catch</code>块去处理可能的异常。</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try - catch - finally"></a>try - catch - finally</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类型 异常名) &#123;</span><br><span class="line">    <span class="comment">//捕获异常后的处理操作，包括但不限于记入日志、输出到控制台……</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//无论是否捕获到异常都会执行的代码，常用于释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;捕获异常后，之后的语句也可以执行到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/e049f5eb/image-20221130174427783.png" alt="image-20221130174427783"></p><p>多重<code>catch</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常名<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//捕获异常后的处理操作，包括但不限于记入日志、输出到控制台……</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常名<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//捕获异常后的处理操作，包括但不限于记入日志、输出到控制台……</span></span><br><span class="line">&#125; ...</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//无论是否捕获到异常都会执行的代码，常用于释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于多重catch，前面的异常类型应小于后面的。</strong>例如先子类后父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="number">2423432</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;捕获异常后，之后的语句也可以执行到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/e049f5eb/image-20221130185209698.png" alt="image-20221130185209698"></p><p>异常处理中，除了<code>printStackTrace()</code>打印异常信息外，还提供了<code>getMessage()</code>和<code>toString()</code>获取异常信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">            System.out.println(e.getMessage()); <span class="comment">//获取有关异常时间的信息</span></span><br><span class="line">            System.out.println(e.toString()); <span class="comment">//获取异常的类型和性质</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;捕获异常后，之后的语句也可以执行到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/e049f5eb/image-20221130185428532.png" alt="image-20221130185428532"></p><p>如果在<code>catch</code>代码块里写了<code>return</code>，则会在<code>return</code>之前执行<code>finally</code>代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line">            System.out.println(e.getMessage()); <span class="comment">//获取有关异常时间的信息</span></span><br><span class="line">            System.out.println(e.toString()); <span class="comment">//获取异常的类型和性质</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;捕获异常后，之后的语句也可以执行到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/e049f5eb/image-20221130190712378.png" alt="image-20221130190712378"></p><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><h3 id="使用throws关键字抛出异常"><a href="#使用throws关键字抛出异常" class="headerlink" title="使用throws关键字抛出异常"></a>使用throws关键字抛出异常</h3><p><code>throws</code>关键字常被应用于方法上，表示方法可能抛出异常，当方法抛出多个异常时，可用逗号分隔异常类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 方法名(参数名) <span class="keyword">throws</span> 异常类型<span class="number">1</span>, 异常类型<span class="number">2</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>throws</code>关键字将方法产生的异常抛给上一级后，如果上一级不想处理，可以继续向上抛出，但是最终要有能够捕捉并处理这个异常的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用方法必须遵循任何可查异常的处理和声明规则。若覆盖一个方法，则不能声明与覆盖方法不同的异常。声明的任何异常必须是被覆盖方法所声明异常的同类或子类。</strong></p><h3 id="使用throw关键字抛出异常"><a href="#使用throw关键字抛出异常" class="headerlink" title="使用throw关键字抛出异常"></a>使用throw关键字抛出异常</h3><p><code>throw</code>关键字可以抛出<code>Exception</code>类中的子类异常，更重要的用途是抛出自定义的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类型名(异常信息)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>throws</code>关键字和<code>throw</code>关键字的区别</p><ul><li><code>throws</code>用在方法声明后面，表示抛出异常，由方法的调用者处理。<code>throw</code>用在方法体内，用来制造一个异常，由方法体处理。</li><li><code>throws</code>是生命这个方法会抛出这种类型的异常，以便使它的调用者知道要捕捉这个异常。<code>throw</code>是直接抛出一个异常实例对象。</li><li><code>throws</code>表示出现异常的一种可能性，并不代表一定会有异常。<code>throw</code>一定会抛出一个异常，必须要处理。</li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。 用户自定义异常类，只需继承 <code>Exception</code> 类即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    MyException() &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyException(String message) &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/e049f5eb/image-20221130203631824.png" alt="image-20221130203631824"></p><p><img src="/post/e049f5eb/image-20221130203700708.png" alt="image-20221130203700708"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/post/28239a8d.html"/>
      <url>/post/28239a8d.html</url>
      
        <content type="html"><![CDATA[<p>​        面向对象是人类最自然的一种思考方式，它将所有预处理的问题抽象为对象，同时了解这些对象具有的相应的属性以及行为，已解决这些对象面临的一些实际问题，面向对象设计实质上就是对现实世界的对象进行建模操作。</p><p>​        对象是一个抽象概念，英文称作<code>Object</code>，表示任意存在的事物。世间万物皆对象，！现实世界中随处可见的一种事物就是对象，对象是事物存在的实体。例如人。</p><p>​        通常将对象划分为两个部分，即静态部分和动态部分。静态部分被称为“属性”，任何对象都具有自身属性，这些属性不仅是客观存在的，而且是不能被忽视的，例如人的性别。动态部分被称为“行为”，即对象执行的动作，例如人的行走。</p><h1 id="类的概述"><a href="#类的概述" class="headerlink" title="类的概述"></a>类的概述</h1><p>​        类是封装对象的属性和行为的载体，反过来说，具有相同属性和行为的一类实体被称作类。例如手机有颜色、品牌、价格、型号等属性，有打电话，播放电影，播放音乐等行为。</p><p><img src="/post/28239a8d/image-20221128205938470.png" alt="image-20221128205938470"></p><h1 id="面向对象程序设计的特点"><a href="#面向对象程序设计的特点" class="headerlink" title="面向对象程序设计的特点"></a>面向对象程序设计的特点</h1><ul><li>封装</li><li>继承</li><li>多态</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>​        封装是面向对象编程的核心思想。将对象的属性和行为封装起来，其载体就是类，类通常会对客户隐藏实现细节，这就是封装的思想。例如，用户使用手机，只需要滑动屏幕，无需知道手机内部是怎么工作的。</p><p>​        采用封装的思想保证了类内部数据结构的完整性，使用该类的用户不能轻易地直接操作此数据结构，只能操作类允许公开的数据。这样就避免了外部操作对内部数据的影响，提高了程序的可维护性。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>​        是指可以让某个类型的对象获得另一个类型的对象的属性的方法。它支持按级分类的概念。继承是指这样一种能力：它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 通过继承创建的新类称为“子类”或“派生类”，被继承的类称为“基类”、“父类”或“超类”。继承的过程，就是从一般到特殊的过程。要实现继承，可以通过“继承”（Inheritance）和“组合”（Composition）来实现。继承概念的实现方式有二类：实现继承与接口继承。实现继承是指直接使用基类的属性和方法而无需额外编码的能力；接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>​        就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p><h1 id="面向对象五大基本原则"><a href="#面向对象五大基本原则" class="headerlink" title="面向对象五大基本原则"></a>面向对象五大基本原则</h1><ul><li><p>单一职责原则SRP(Single Responsibility Principle)：是指一个类的功能要单一，不能包罗万象。如同一个人一样，分配的工作不能太多，否则一天到晚虽然忙忙碌碌的，但效率却高不起来。</p></li><li><p>开放封闭原则OCP(Open－Close Principle)：一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。</p></li><li><p>里氏替换原则(the Liskov Substitution Principle LSP)：子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。</p></li><li><p>依赖倒置原则(the Dependency Inversion Principle DIP) ：具体依赖抽象，上层依赖下层。假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。</p></li><li><p>接口分离原则(the Interface Segregation Principle ISP)：模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来。</p></li></ul><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>​        类是封装对象属性和行为的载体，Java中定义类时使用<code>class</code>关键字，其语法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 类名称&#123;</span><br><span class="line">    <span class="comment">//类体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>​        在Java中，对象的属性也成为成员变量，成员变量的定于与普通变量一样，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名称 [= 值];</span><br></pre></td></tr></table></figure><p>​        其中<code>[= 值]</code>是可选内容，定义变量时可以为其赋值，也可以不为其赋值。</p><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>​        在Java中，成员方法对应于类对象的行为，它主要用来定义类可执行的操作，它是包含了一系列语句的代码块。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[权限修饰符] [返回值类型] 方法名(参数类型 参数名……) [<span class="keyword">throws</span> 异常类型] &#123;</span><br><span class="line">    …… <span class="comment">//方法体</span></span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，权限修饰符可以是<code>public</code>、<code>private</code>、<code>protected</code>中任意一个，也可以不写，主要用来控制方法的访问权限。返回值类型用来指定方法返回数据的类型，可以是任意类型，如果方法不需要返回值，则使用<code>void</code>关键字。一个成员方法既可以有参数，也可以没有参数，参数可以是对象，也可以是基本数据类型的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(String phoneNumber)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话给&quot;</span> + phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMovie</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放电影：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">playMusic</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放音乐&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;好运来！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        调用方法时，可以给该方法传递一个或多个值，传给方法的值叫做实参，在方法内部，接受参数的变量叫做形参，形参的声明语法与变量的声明语法一样。形参指在方法内部有效。<strong>Java中方法的参数主要有三种，分别是值参数、引用参数和不定长参数。</strong></p><h4 id="值参数"><a href="#值参数" class="headerlink" title="值参数"></a>值参数</h4><pre><code>     值参数表明实参与形参之间按值传递，当使用值参数的方法被调用时，编译器为形参分配存储单元，然后将对应的实参的值复制到形参中，由于时值类型的传递方式，所以，在方法中对值类型的形参的修改不会影响实参。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(add10(a));</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add10</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        a += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221128213202788.png" alt="image-20221128213202788"></p><h4 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h4><p>​        如果给方法传递参数时，参数的类型是数组，那么，在方法中对参数的修改会反映到原有的数组或者其他引用类型上，这种类型的方法参数称之为引用参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;1, 2, 3&#125;;</span><br><span class="line">        changeArr(arr);</span><br><span class="line">        System.out.println(arr[0]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void changeArr(int[] arr) &#123;</span><br><span class="line">        arr[0] = 4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129002013790.png" alt="image-20221129002013790"></p><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><p>​        声明方法时，如果有若干个相同类型的参数，可以定义为不定长参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 返回值类型 方法名(参数类型... 参数名)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> result;</span><br><span class="line">        result = add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; x.length; i++) &#123;</span><br><span class="line">            sum += x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*for (int i : x) &#123;</span></span><br><span class="line"><span class="comment">            sum += i;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129002458031.png" alt="image-20221129002458031"></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>​        在类中，除了成员方法外，还存在一种特殊类型的方法，那就是构造方法。构造方法是一个与类同名的方法，对象的创建就是通过构造方法完成的。每当类实例化一个对象时，类都会自动调用构造方法。</p><p>​        构造方法的特点：</p><ul><li>构造方法没有返回值，也不能定义为<code>void</code>。</li><li>构造方法的名称与本类的名称相同。</li><li>构造方法的主要作用是完成对象的初始化工作，它能把定义对象的参数传递给对象成员。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String color, <span class="type">double</span> price, String brand, String model)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">    <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    <span class="built_in">this</span>.model = model;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="type">Phone</span> <span class="variable">iphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;星光白&quot;</span>, <span class="number">5999d</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;iphone14&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>​        如果在成员方法内部定义一个变量，那么这个变量被称为局部变量。</p><p>​        局部变量在方法执行时被创建，在方法执行结束时被销毁。局部变量在使用时，必须进行赋值操作或被初始化，否则会出现编译错误。</p><p>​        类成员变量和成员方法可以统称为类成员。如果一个方法中含有与成员变量同名的局部变量，则方法中对这个变量访问以局部变量值为基准。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(add1());</span><br><span class="line">        System.out.println(add2());</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129141112756.png" alt="image-20221129141112756"></p><p>​        <code>add1</code>、<code>add2</code>和<code>main</code>方法中都有一个<code>int i</code>，从上面结果可以看出，<code>i</code>只在各自所处的大括号的作用域内生效，不干扰其他<code>i</code>的使用。</p><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>​        当类中的成员变量与成员方法中的参数重名时，会导致无法直接使用成员变量。在Java中，<code>this</code>关键字代表本类对象的引用，<code>this</code>关键字被隐式地用于引用对象的成员变量和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String color, <span class="type">double</span> price, String brand, String model)</span> &#123;</span><br><span class="line">        <span class="comment">//使用this解决重名问题，用来给本对象成员变量赋值</span></span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>​        在<code>java</code>中，静态变量指的是被<code>static</code>修饰的类的变量；静态变量被所有类实例对象所共享，在内存中只有一个副本，当且仅当在类初次加载时会被初始化。</p><p>​        静态变量（方法）的访问方式：类名.变量名（方法名）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">salesQuantity</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String color, <span class="type">double</span> price, String brand, String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">saleOnePhone</span><span class="params">()</span> &#123;</span><br><span class="line">        salesQuantity += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, brand=&#x27;&quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, model=&#x27;&quot;</span> + model + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">iphone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;星光白&quot;</span>, <span class="number">5999d</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;iphone14&quot;</span>);</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">iphone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;猛男粉&quot;</span>, <span class="number">5999d</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;iphone14&quot;</span>);</span><br><span class="line">        System.out.println(Phone.salesQuantity);</span><br><span class="line">        iphone1.saleOnePhone();</span><br><span class="line">        System.out.println(Phone.salesQuantity);</span><br><span class="line">        iphone2.saleOnePhone();</span><br><span class="line">        System.out.println(Phone.salesQuantity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129142424552.png" alt="image-20221129142424552"></p><p>​        可以看出，<code>iphone1</code>和<code>iphone2</code>调用方法都对<code>salesQuantity</code>进行了改变，也意味着<code>salesQuantity</code>在两个对象之间是共享的。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>​        如果想要使用类中的成员方法，需要先将这个类进行实例化，但是有些时候，我们不想或者是无法创建对象时，还要调用类中的方法才能够完成业务逻辑，这种情况下就可以使用静态方法。</p><p>​        若类的方法前加了<code>static</code>关键字，则该方法称为静态方法，反之为实例方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initSalesQuantity</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">    salesQuantity = quantity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Phone.salesQuantity);</span><br><span class="line">        Phone.initSalesQuantity(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Phone.salesQuantity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129144447735.png" alt="image-20221129144447735"></p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>​        在类的成员方法之外，用<code>static</code>修饰的代码块可以称之为静态代码块。静态代码块可以完成一些初始化操作，在类声明时就会运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String color;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">   <span class="keyword">private</span> String brand;</span><br><span class="line">   <span class="keyword">private</span> String model;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> salesQuantity;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       salesQuantity = <span class="number">500</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(Phone.salesQuantity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129144945722.png" alt="image-20221129144945722"></p><h3 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h3><p>​        <code>main</code>方式也称为主方法，是类的入口。它制定了程序从何处开始，提供了对程序流向的控制。<code>Java</code>编译器通过主方法来执行程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">punlic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主方法是静态的，如果其他方法要调用主方法，也必须是静态的。</li><li>主方法没有返回值。</li><li>主方法的形参为数组，其中<code>args[0]</code> ~ <code>args[n]</code> 分别代表程序的第一个参数到第n+1个参数，可以使用<code>args.length</code>获取参数的个数。</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>​        对象是通过Java类创建的能够被使用的具体元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Phone</span> <span class="variable">iphone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br></pre></td></tr></table></figure><p>​        <code>iphone</code>是由<code>Phone.class</code>创建的对象，创建对象使用<code>new</code>关键字。</p><h3 id="创建和初始化对象的过程"><a href="#创建和初始化对象的过程" class="headerlink" title="创建和初始化对象的过程"></a>创建和初始化对象的过程</h3><ol><li>类加载，同时初始化类中静态的属性。</li><li>执行静态代码块 。</li><li>分配内存空间,同时初始化非静态的属性(赋默认值,<code>0</code>/<code>false</code>/<code>null</code>) 。</li><li>调用<code>Student</code>的父类构造器 。</li><li>对<code>Student</code>中的属性进行显示赋值(如果有的话) 。</li><li>执行非静态代码块 。</li><li>执行构造器 。</li><li>返回内存地址。 </li></ol><p>​            <strong>子类中非静态属性的显示赋值是在父类构造器执行完之后和子类中的匿名代码块执行之前的时候</strong></p><h1 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h1><p>​        封装是面向对象编程的核心思想。封装的载体是类，且对象的属性和行为被封装在这个类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String color, <span class="type">double</span> price, String brand, String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">(String phoneNumber)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话给&quot;</span> + phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMovie</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放电影：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">playMusic</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;播放音乐&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;好运来！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModel</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h1><p>​        继承的基本思想是基于父类的拓展，并制定出一个新的子类，子类可以继承父类原有的属性和方法，也可以增加原来父类所不具备的属性和方法，或者直接重写父类中的某些方法。继承通过<code>extends</code>关键字实现。<strong>Java仅支持单继承，即一个子类只能有一个父类。</strong></p><p>​        <strong><code>final</code>修饰的类无法被继承，<code>private</code>修饰的属性和方法无法被继承。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">screen</span> <span class="operator">=</span> <span class="string">&quot;液晶显示屏&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑正在开机！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pad</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">battery</span> <span class="operator">=</span> <span class="string">&quot;5000毫安电池&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        System.out.println(computer.screen);</span><br><span class="line">        computer.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Pad</span> <span class="variable">pad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pad</span>();</span><br><span class="line">        System.out.println(pad.screen);</span><br><span class="line">        System.out.println(pad.battery);</span><br><span class="line">        pad.startup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129184331707.png" alt="image-20221129184331707"></p><p>​        类<code>Pad</code>虽然没有定义变量<code>screen</code>和方法<code>startup()</code>，但是依然可以调用，是因为它继承了类<code>Computer</code>，被调用的变量和方法都是继承过来的。</p><h1 id="方法的重写和重载"><a href="#方法的重写和重载" class="headerlink" title="方法的重写和重载"></a>方法的重写和重载</h1><h2 id="重写（Override）"><a href="#重写（Override）" class="headerlink" title="重写（Override）"></a>重写（<em>Override</em>）</h2><p>​        继承并不是只是扩展父类的功能，还可以重写父类的成员方法。重写（也叫覆盖、覆盖重写）就是在子类中将父类的成员方法名称保留，重新编写父类成员方法的实现内容，更改成员方法的存储权限，或是修改成员方法的返回值类型（重写父类成员方法和返回值类型是基于Java SE 5.0以上版本编译器实现的）。</p><p>​        在继承中，还有一种特殊的重写方式，子类与父类的成员方法返回值、方法名称、参数类型以及个数完全想通过，唯一不同的是方法实现内容，这种特殊的重写方式被成为重构。</p><p>​        当重写父类方法时，修改方法的权限修饰符只能从小的范围到大的范围改变。例如，父类的是<code>protected</code>，子类的只能修改为<code>public</code>，而不能修改为<code>private</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">screen</span> <span class="operator">=</span> <span class="string">&quot;液晶显示屏&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑正在开机！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pad</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">battery</span> <span class="operator">=</span> <span class="string">&quot;5000毫安电池&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pad正在开机！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        子类重写父类之后，通过<code>子类.方法名</code>无法访问到父类的方法，但是这并不代表没有方法访问到父类的重写之前的方法。Java提供了关键字super来代表父类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.变量名;</span><br><span class="line"><span class="built_in">super</span>.方法名;</span><br></pre></td></tr></table></figure><h2 id="重载（Overload）"><a href="#重载（Overload）" class="headerlink" title="重载（Overload）"></a>重载（<em>Overload</em>）</h2><p>​        在一个类中，方法的名称相同，但是参数个数、类型或顺序不同，被成为重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">        System.out.println(add(<span class="number">2</span>, <span class="number">3.5</span>));</span><br><span class="line">        System.out.println(add(<span class="number">3.5</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//①</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//②</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//③</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : x) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//④</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//⑤</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129194132178.png" alt="image-20221129194132178"></p><ul><li>①②③参数个树不同</li><li>①④⑤参数类型不同</li><li>④⑤参数顺序不同</li></ul><h1 id="超类（所有类的父类——Object）"><a href="#超类（所有类的父类——Object）" class="headerlink" title="超类（所有类的父类——Object）"></a>超类（所有类的父类——Object）</h1><p>​        在Java中，所有类都直接或间接继承了<code>java.lang.Object</code>类，由于所有类都是<code>Object</code>的子类，所以在定义时，省略了<code>extends Object</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        其中<code>getClass()</code>、<code>notify()</code>、<code>notifyAll()</code>、<code>wait()</code>方法被<code>final</code>修饰，不能被重写。</p><h1 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h1><p>​        在Java中，多态的含义“一种定义，两种实现”。<strong>类的多态性可以从两方面体现：一是方法的重载，二是类的上下转型。</strong></p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>​        在Java中，对象类型的转换包括向上转型与向下转型（把子类实现类赋值给父类对象）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">screen</span> <span class="operator">=</span> <span class="string">&quot;液晶显示屏&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电脑正在开机！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pad</span> <span class="keyword">extends</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">battery</span> <span class="operator">=</span> <span class="string">&quot;5000毫安电池&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">screen</span> <span class="operator">=</span> <span class="string">&quot;oled显示屏&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pad正在开机！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;移动平板！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Pad</span> <span class="variable">pad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pad</span>();</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> pad; <span class="comment">//向上转型是安全的，可以直接赋值</span></span><br><span class="line"><span class="comment">//        Computer computer = new Pad();</span></span><br><span class="line">        System.out.println(computer.screen);</span><br><span class="line">        computer.startup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129200930168.png" alt="image-20221129200930168"></p><ul><li>向上转型如遇到方法重名，调用的是子类重写之后的方法</li><li>向上转型如遇到属性重名，调用的是父类的属性</li><li>该调用过程即为<strong>“动态绑定</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(computer.battery);</span><br><span class="line"></span><br><span class="line">computer.move();</span><br></pre></td></tr></table></figure><p>​        分别报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java: 找不到符号</span><br><span class="line">  符号:   变量 battery</span><br><span class="line">  位置: 类型为Computer的变量 computer</span><br><span class="line">      </span><br><span class="line">java: 找不到符号</span><br><span class="line">  符号:   方法 move()</span><br><span class="line">  位置: 类型为Computer的变量 computer</span><br></pre></td></tr></table></figure><p>​        <strong>向上转型后，父类对象无法使用子类独有的属性和方法。</strong></p><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><p>​        在做向下转型操作时，将抽象的对象转换为具象的对象，需要进行强制转换（显示转换）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pad</span>();</span><br><span class="line">        <span class="type">Pad</span> <span class="variable">pad</span> <span class="operator">=</span> (Pad) computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><p>​        在进行向下转型操作时，若是父类对象不是子类的示例，就会发生<code>ClassCastException</code>。使用<code>instanceof</code>关键字判断父类对象是否是子类的实例。instanceof还可以判断某个类是否实现了某个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj1 <span class="keyword">instanceof</span> obj2;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Student);<span class="comment">//true</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Person);<span class="comment">//true</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Object);<span class="comment">//true</span></span><br><span class="line">        System.out.println(o <span class="keyword">instanceof</span> Teacher);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>​        在Java中，抽象类不能产生对象实例。定义抽象类时，需要使用<code>abstract</code>关键字。</p><p>​        使用<code>abstract</code>关键字定义的类被成为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[权限修饰符] <span class="keyword">abstract</span> class 类名 &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        使用<code>abstract</code>关键字定义的方法叫做抽象方法，抽象方法没有方法体，承载抽象方法的类必须被继承重写抽象方法后才能使用抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[权限修饰符] <span class="keyword">abstract</span> 方法返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任何动物都会跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵喵！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪汪！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        cat.eat();</span><br><span class="line">        cat.shout();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        dog.eat();</span><br><span class="line">        dog.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221129224533072.png" alt="image-20221129224533072"></p><ul><li>在抽象类中，可以包含抽象方法，也可以不包含抽象方法，但是包含了抽象方法的类不许被定义为抽象类。</li><li>抽象类不能直接被实例化，即使抽象类中没有抽象方法，也不能被实例化。</li><li>抽象类被继承后，子类需要重写抽象类中的所有抽象放啊（如果子类没有重写所有方法，子类也必须是抽象类），且需要被继承实现自己未实现的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任何动物都会跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Feline</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫科动物吃肉！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Feline</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵喵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>​        接口是抽象类的延申，可以将他看作是纯粹的抽象类，接口中所有的方法都没有方法体。</p><p>​        接口使用<code>interface</code>关键字修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] interface 接口名 [extends 父类接口名] &#123;</span><br><span class="line">    [<span class="keyword">public</span>] [<span class="keyword">static</span>] [<span class="keyword">final</span>] 常量;</span><br><span class="line">    [<span class="keyword">public</span>] [<span class="keyword">abstract</span>] 方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        同抽象方法一样，接口也不能直接实例化。抽象方法需要被继承，接口需要被实现，实现用<code>ipmlements</code>关键字。</p><p>​        接口中所有方法都是抽象的，一个类实现抽象类时，必须重写其中的所有抽象方法。</p><p>​        <strong>接口不能实现另一个接口，只能继承其他类与接口。抽象类可以实现接口，也可以继承其他类。</strong></p><h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><ul><li>子类只能继承一个抽象类，但是可以实现任意个数的接口。</li><li>接口中的方法都是抽象方法，抽象类可以有非抽象方法。</li><li>抽象类中的方法可以是任意类型的，接口中的都是抽象方法。</li><li>抽象类中的成员变量是任意类型的，接口中只能有静态常量。</li><li>抽象类中可以有静态方法和静态代码块，接口中不可以。</li><li>抽象类可以有构造方法，接口没有。</li></ul><h1 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><p>​        封装有两方面的含义：隐藏和暴漏。隐藏和暴漏需要权限修饰符来实现，Java提供了<code>public</code>，<code>protected</code>，<code>default</code>（缺省，即不写）和<code>private</code>四种权限修饰符，用来控制类、成员方法和成员变量的访问权限。</p><p>​        类的权限设定会约束到成员的权限设定，如果一个类不能被其他类访问，那么类中的成员也无法被访问到。</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">public</th><th style="text-align:center">protected</th><th style="text-align:center">default</th><th style="text-align:center">private</th></tr></thead><tbody><tr><td style="text-align:center">本类</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">本类所在包</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">其他包中的子类</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">其他包中的非子类</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table></div><p>使用权限修饰符原则</p><ul><li>大部分顶级类都是用<code>public</code>修饰符。</li><li>如果某个类主要用作其他类的父类，该类中包含的大部分方法只是希望被子类重写，而不想被外界直接调用，则应该使用<code>protected</code>。</li><li>类中的绝大部分属性都应该使用private修饰，除非一些static或者类似全局变量的属性，才考虑用<code>public</code>。</li><li><strong>当定义的方法只是用于辅助实现该类的其他方法时，应该使用<code>private</code>修饰。</strong></li><li>希望昂允许其他类自由调用的方法应该使用<code>public</code>。</li></ul><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>​        <code>final</code>的含义是”最后的，最终的“，换言之，被<code>final</code>修饰的类、方法和变量不能被改变。</p><h2 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h2><p>​        被<code>final</code>修饰的类不能被继承。</p><p>​        如果希望一个类不允许任何类继承，并且不允许其他人对这个类进行任何改动，可以将这个类设置为final类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> class 类名&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h2><p>​        被<code>final</code>修饰的方法不能被重写。</p><p>​        将方法定义为<code>final</code>，可以防止子类修改该方法的定义与实现方式。同时，<code>final</code>方法的执行效率要高于非<code>final</code>方法。</p><p>​        如果父类的某个方法被设置为<code>private</code>，子类将无法访问该方法，也无法覆盖。所以一个定义为<code>private</code>的方法隐式地被定义为了<code>fianl</code>，无需写为<code>private final</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 <span class="keyword">final</span> 返回值类型 方法名([参数列表]) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final变量"><a href="#final变量" class="headerlink" title="final变量"></a>final变量</h2><p>​        被<code>final</code>修饰的变量，不能改变该变量的值。通常把被<code>final</code>修饰的变量称作为常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>​        <code>final</code>除了可以修饰基本类型的=外，还可以修饰对象引用。一个对象引用被<code>final</code>修饰后，他不能更改引用的对象地址，但是可以更改对象里面的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="comment">//        person = person1;  //报错，java: 无法为最终变量person分配值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221130151533433.png" alt="image-20221130151533433"></p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>​    如果一个类定义在另一个类里面，那这个类就成为内部类。</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>​        除成员变量、方法和构造器可作为类的成员外，一个类也可以作为另一个类的成员，这个类被称为成员内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        即使外部类的成员变量和方法被private修饰，内部类依旧可以访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">()</span> &#123;</span><br><span class="line">            age += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            showAge();</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类show&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        创建内部类对象的方式与创建普通对象都是使用new 关键字，内部类对象依赖于外部类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.setAge();</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/28239a8d/image-20221130155549548.png" alt="image-20221130155549548"></p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>​        匿名内部类的特点是只要使用一次，也就是说，匿名内部类不能被重复利用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猫吃鱼！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        使用匿名内部类应遵循一下原则：</p><ul><li>匿名类没有构造方法</li><li>匿名类不能有静态的成员</li><li>匿名类不能用private、public、protected、static、final、abstract修饰</li><li>只可以创建一个匿名类实例</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础</title>
      <link href="/post/43d73074.html"/>
      <url>/post/43d73074.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Java"><a href="#什么是Java" class="headerlink" title="什么是Java"></a>什么是Java</h1><p>​        Java是1995年，由Sun公司推出的一种极富创造力的、面向对象的程序设计语言，由有“java之父”之称的Sun研究院院士Jams Gosling（詹姆斯 · 高斯林）博士亲手设计而成。他还完成了Java的原始编译器和虚拟机的设计工作。Java最初的名字是OAK，1995年被重命名为Java后，正式发布。</p><p>​        Java是一种通过解释方式来执行的语言，其语言规则和C++类似。与C++不同的是，Java语言简介得多，而且提高了可靠性，除去了最大得程序错误根源，此外它还有较高的安全性。</p><h1 id="Java的版本"><a href="#Java的版本" class="headerlink" title="Java的版本"></a>Java的版本</h1><h2 id="Java-SE"><a href="#Java-SE" class="headerlink" title="Java SE"></a>Java SE</h2><p>​        Java SE是Java的标准版，主要用于桌面应用程序的开发，同时也是Java的基础，它包含Java语言基础、JDBC操作，、I/O（输入/输出）、多线程技术。</p><h2 id="Java-EE"><a href="#Java-EE" class="headerlink" title="Java EE"></a>Java EE</h2><p>​        Java EE 是 Java 的企业版，主要用于开发企业级分布式的网络程序，如电子商务网站和ERP（企业资源规划）系统，其核心是EJB（企业Java组件模型）。</p><h2 id="Java-ME"><a href="#Java-ME" class="headerlink" title="Java ME"></a>Java ME</h2><p>​        Java ME主要用于嵌入式系统开发，如掌上电脑、手机等移动通信电子设备。因为Java ME开发不仅需要虚拟机，还需要底层操作系统支持，所以Java ME逐渐被时代淘汰，Android应运而生。</p><h1 id="JDK常用基本组件"><a href="#JDK常用基本组件" class="headerlink" title="JDK常用基本组件"></a>JDK常用基本组件</h1><p>​        javac（编译器）、jar（打包工具）、javadoc（文档生成器）、jdb（差错工具）、java（编译以后以.class作为后缀的java程序）、javap（反汇编器）以及jconsole（系统调试和监控工具）等……</p><h1 id="Java-API文档"><a href="#Java-API文档" class="headerlink" title="Java API文档"></a>Java API文档</h1><p>​        API全称为Application Programming Interfa，即应用程序编程接口。Java API文档是Java程序开发过程中不可或缺的变成词典，它记录了Java语言中海量的API，它主要包含类的继承结构、成员变量、成员方法、构造方法、静态成员描述信息和详细说明内容。</p><p>下载：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p><p>中文汉化：</p><ul><li>链接：<code>https://pan.baidu.com/s/14Vkrmz1YCLb-m0KD8AuLXg</code> </li><li>提取码：<code>blog</code></li></ul><h1 id="Java基本知识"><a href="#Java基本知识" class="headerlink" title="Java基本知识"></a>Java基本知识</h1><p>​        请先安装和配置JDK以及开发工具IDEA，详情参考本站其他博客。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>​        注释并非代码，程序编译运行时会自动忽略注释。注释是用于解释说明一段代码的文字性描述，是给人阅读的。</p><p>​        在代码中添加注释可以提高程序的可读性，注释中包含了程序的信息，方便其他程序员阅读和理解程序。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>​        <code>//</code>为单行注释标记，从<code>//</code>开头到换行符为止（即这行的末尾）的所有内容都会被作为注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是单行注释</span></span><br><span class="line">code; <span class="comment">//这也是单行注释</span></span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>​        <code>/*  */</code>为多行注释标记，从<code>/*</code> 开头到<code>*/</code>为止的所有内容都会被作为注释，注释中的内容可以换行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>​        <code>/** */</code>为文档注释标记，从<code>/**</code> 开头到<code>*/</code>为止的所有内容都会被作为注释，注释中的内容可以换行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是文档注释</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleId 文章ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响函数</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>​        标识符可以简单的理解为一个名字，用来标识类名、变量名、方法名、以及数组名等……</p><p>​        Java规定，标识符由任意顺序的字母、下划线（_）、美元符号（$）和数组组成，并且第一个字符不能是数字。标识符不能是Java中的保留关键字。</p><p>​        在Java中，标识符的字母是严格区分大小写的。Java使用Unicode标准字符集，最多可以标识65535个字符，因此，Java中标识符不仅包含英文，还包含汉字、日文以及其他语言文字。</p><p>​        编写Java程序有一套工人的命名规范：</p><ul><li>类名：符合<a href="https://www.baidu.com/s?wd=%E5%A4%A7%E9%A9%BC%E5%B3%B0&amp;rsv_dl=feed_landingpage_ib">大驼峰</a>形式。</li><li>方法名：符合<a href="https://www.baidu.com/s?ie=utf-8&amp;wd=%E5%B0%8F%E9%A9%BC%E5%B3%B0">小驼峰</a>形式。</li><li>变量：符合<a href="https://www.baidu.com/s?ie=utf-8&amp;wd=%E5%B0%8F%E9%A9%BC%E5%B3%B0">小驼峰</a>形式。</li><li>常量：所有字母均大写。</li></ul><p>​        更多编码规范请参考<a href="https://www.baidu.com/s?ie=utf-8&amp;wd=%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%8B%E5%86%8C">阿里巴巴Java开发规范手册</a></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>​        关键字是Java中已经被赋予特别意义的一些单词，不可以把这些单词作为标识符来使用。</p><p>常见关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span>    <span class="type">boolean</span>     <span class="keyword">break</span>       <span class="type">byte</span>        <span class="keyword">case</span>        <span class="keyword">catch</span>       <span class="type">char</span>      <span class="keyword">class</span></span><br><span class="line"><span class="title class_">else</span>        <span class="keyword">extends</span>     <span class="title class_">final</span>       <span class="keyword">finally</span>     <span class="type">float</span>       <span class="keyword">for</span>         <span class="keyword">if</span>        <span class="keyword">implements</span></span><br><span class="line"><span class="title class_">continue</span>    <span class="keyword">default</span> <span class="keyword">do</span>  <span class="type">double</span>      <span class="keyword">import</span>      <span class="keyword">instanceof</span>  <span class="type">int</span>         <span class="keyword">interface</span> <span class="title class_">long</span></span><br><span class="line"><span class="keyword">new</span>         <span class="title class_">package</span>     <span class="keyword">private</span>     <span class="keyword">protected</span>   <span class="keyword">public</span>      <span class="keyword">return</span>      <span class="type">short</span>     <span class="keyword">static</span></span><br><span class="line"><span class="built_in">super</span>       <span class="keyword">switch</span>      <span class="built_in">this</span>        <span class="keyword">throw</span>       <span class="keyword">throws</span>      <span class="keyword">transient</span>   <span class="keyword">try</span>       <span class="keyword">void</span></span><br><span class="line"><span class="keyword">volatile</span>    <span class="keyword">while</span>       <span class="keyword">synchronized</span></span><br></pre></td></tr></table></figure><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p>​        在程序的执行过程中，值能被改变的量称为变量，值不能被改变的量成为常量。变量与常量的命名都必须要使用合法的标识符。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>​        变量是一个可以改变的值，可以把他理解为一个容器，变量可以反复赋值（相当于给容器换里面的东西）。</p><p>​        声明变量：变量创建需要声明变量类型，用于告诉编译器这个变量是哪种数据类型，这样编译器才知道要给变量分配多少空间，以及它存储什么类型的数据。在程序运行过程中，如果内存空间内的值是变化的，那么这个内存空间就被成为<strong>变量名</strong>，而内存空间内的值就是<strong>变量值</strong>。</p><p>​        <strong>在声明变量时，可以不赋值，也可以直接赋值。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">24</span>;  <span class="comment">//声明int类型变量age，赋予初始值24</span></span><br><span class="line"><span class="type">int</span> year;<span class="comment">//声明int类型变量year</span></span><br><span class="line">year = <span class="number">2022</span>;<span class="comment">//赋予year值2022</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>​        与变量不同，常量在整个程序中只能被赋值一次，如果被多次赋值，则会发生编译错误。</p><p>​        在Java语言中，用<code>final</code>关键字限定一个标识符为常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><div class="table-container"><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">字节</th><th style="text-align:center">长度</th><th style="text-align:center">取值范围</th><th style="text-align:center">默认值</th><th style="text-align:center">示例</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1 Byte</td><td style="text-align:center">8 bit</td><td style="text-align:center">-2^7 ~ 2^7-1</td><td style="text-align:center">0</td><td style="text-align:center">byte b = 10;</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2 Byte</td><td style="text-align:center">16 bit</td><td style="text-align:center">-2^15 ~ 2^15-1</td><td style="text-align:center">0</td><td style="text-align:center">short s = 10;</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4 Byte</td><td style="text-align:center">32 bit</td><td style="text-align:center">-2^31 ~ 2^31-1</td><td style="text-align:center">0</td><td style="text-align:center">int i = 10;</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8 Byte</td><td style="text-align:center">64 bit</td><td style="text-align:center">-2^63 ~ 2^63-1</td><td style="text-align:center">0</td><td style="text-align:center">long l = 10L;</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4 Byte</td><td style="text-align:center">32 bit</td><td style="text-align:center">1.4E-45 ~ 3.4028235E38</td><td style="text-align:center">0.0</td><td style="text-align:center">float f = 10.0f;</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8 Byte</td><td style="text-align:center">64 bit</td><td style="text-align:center">4.9E-324 ~ 1.7976931348623157E308</td><td style="text-align:center">0.0</td><td style="text-align:center">double d = 10.0d;</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">2 Byte</td><td style="text-align:center">16 bit</td><td style="text-align:center">0 ~ 2^16-1</td><td style="text-align:center">‘’</td><td style="text-align:center">char c = ‘c’;</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">1 Byte</td><td style="text-align:center">8 bit</td><td style="text-align:center">true/false</td><td style="text-align:center">false</td><td style="text-align:center">boolean b = true;</td></tr></tbody></table></div><p>四类八种</p><ul><li>整数型：byte、short、int、long</li><li>浮点型：float、double</li><li>字符型：char</li><li>布尔型：boolean</li></ul><h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>​        从低级类型向高级类型转换，系统会自动执行，程序员无需进行任何操作，这种转换称为隐式转换。</p><p>​        byte &lt; short &lt; int &lt; long &lt; float &lt; double</p><p>​        char类型比较特殊，可以与部分int类型数字兼容，不会发生精度变化。</p><h2 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h2><p>​        当把高精度数据类型的值赋予低精度变量时，必须进行显示类型转换，当执行显示类型转换时，可能会导致精度的丢失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">123456</span>;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line">s = (<span class="type">short</span>) i;</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127190635166.png" alt="image-20221127190635166"></p><p>为什么是-7616？精度怎么丢失的？</p><p>123456的二进制为0000 0000 0000 0001 1110 0010 0100 0000</p><ul><li>首位0表示这是个正数。</li><li>计算机中，数是以补码的形式存储的。正数的补码是自己本身。</li><li>当发生显示转换时，由于short类型只有16bit，前面16bit数据溢出，只保留了1110 0010 0100 0000</li><li>short s的补码为1110 0010 0100 0000，首位1表示这是个负数</li><li>负数的原码为除符号位（首位）不变，其余位取反，再+1</li><li>取反（1）110 0010 0100 0000  -&gt; （1）001 1101 1011 1111</li><li>+1    （1）001 1101 1011 1111  -&gt; （1）001 1101 1100 0000</li><li>得到short s的原码为（1）001 1101 1100 0000，即-001 1101 1100 0000</li><li>转换为十进制即为-7616</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>​        赋值运算符用<code>=</code>表示，它是一个二元运算符（对两个操作数处理），其作用是将右边的操作数赋给左边的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;   <span class="comment">//a = 100</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//a = 10</span></span><br></pre></td></tr></table></figure><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>​        算术运算符有<code>+</code>（加号）、<code>-</code>（减号）、<code>*</code>（乘号）、<code>/</code>（除号，取商）、<code>%</code>（取余），它也是二元运算符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">number4</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">number5</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;number4 + number2 =  &quot;</span> + (number4 + number2));</span><br><span class="line">System.out.println(<span class="string">&quot;number4 - number2 =  &quot;</span> + (number4 - number2));</span><br><span class="line">System.out.println(<span class="string">&quot;number4 * number2 =  &quot;</span> + (number4 * number2));</span><br><span class="line">System.out.println(<span class="string">&quot;number4 / number2 =  &quot;</span> + (number4 / number2));</span><br><span class="line">System.out.println(<span class="string">&quot;number4 / number5 =  &quot;</span> + (number4 / number5));</span><br><span class="line">System.out.println(<span class="string">&quot;number4 % number5 =  &quot;</span> + (number4 % number5));</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127193120820.png" alt="image-20221127193120820"></p><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><p>​        自增、自减运算符是单目运算符，可以放在变量之前，也可以放在变量之后。自增自减运算符的作用就是使变量+1或-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        </span><br><span class="line">        temp = a++;<span class="comment">//先赋值，temp = 5；再自增a = 6</span></span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        temp = ++a; <span class="comment">//先自增，a = 7；再赋值，temp = 7</span></span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        temp = a--;<span class="comment">//先赋值，temp = 7；再自减，a = 6；</span></span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        temp = --a;<span class="comment">//先自减，a = 5；再赋值，temp = 5；</span></span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127193613213.png" alt="image-20221127193613213"></p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">实例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">等于</td><td style="text-align:center">2 == 3</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center">2 &lt; 3</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center">2 &gt; 3</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于或等于</td><td style="text-align:center">7 &lt;= 6</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于或等于</td><td style="text-align:center">7 &gt;= 6</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不等于</td><td style="text-align:center">7 != 6</td><td style="text-align:center">true</td></tr></tbody></table></div><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">实例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑与</td><td style="text-align:center">true &amp;&amp; false</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center">逻辑或</td><td>true \</td><td>\</td><td>false</td><td>true</td></tr><tr><td style="text-align:center">!</td><td style="text-align:center">逻辑非</td><td style="text-align:center">!true</td><td style="text-align:center">false</td></tr></tbody></table></div><p>​        逻辑运算符结果</p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">A &amp;&amp; B</th><th style="text-align:center">A \</th><th style="text-align:center">\</th><th>B</th><th>!A</th></tr></thead><tbody><tr><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">true</td></tr></tbody></table></div><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">含义</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;</td><td style="text-align:center">与</td><td style="text-align:center">a &amp; b</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center">或</td><td>a \</td><td>b</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">取反</td><td style="text-align:center">~a</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">异或</td><td style="text-align:center">a ^ b</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">左移位</td><td style="text-align:center">a &lt;&lt; 2</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">右移位</td><td style="text-align:center">b &gt;&gt; b</td></tr><tr><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">无符号右移位</td><td style="text-align:center">x &gt;&gt;&gt; 2</td></tr></tbody></table></div><h3 id="位逻辑运算符"><a href="#位逻辑运算符" class="headerlink" title="位逻辑运算符"></a>位逻辑运算符</h3><p>​        位逻辑运算符包括<code>&amp;</code>、<code>|</code>、<code>^</code>和<code>~</code>，前3个是双目运算符，第4个是单目运算符。</p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">A &amp; B</th><th style="text-align:center">A \</th><th style="text-align:center">B</th><th style="text-align:center">A ^ B</th><th>~a</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table></div><p>​        <code>&amp;</code>、<code>|</code>、<code>^</code>也可以用于逻辑运算。</p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">A &amp; B</th><th style="text-align:center">A \</th><th style="text-align:center">B</th><th>A ^ B</th></tr></thead><tbody><tr><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">true</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">false</td><td style="text-align:center">true</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td><td style="text-align:center">false</td></tr></tbody></table></div><p>​        <code>&amp;&amp;</code>与<code>&amp;</code>区别：</p><ul><li><code>&amp;</code>既是位运算符又是逻辑运算符，<code>&amp;</code>的两侧可以是int，也可以是boolean表达式，当<code>&amp;</code>两侧是int时，要先把运算符两侧的数转化为二进制数再进行运算，而短路与<code>&amp;&amp;</code>的两侧要求必须是布尔表达式。</li><li><code>&amp;</code>为真的条件是两侧表达式都为真，但是即使我们判断出左侧表达式的值为false，程序也还是要继续执行去判断右侧的表达式值的真假。</li><li><code>&amp;&amp;</code>若左侧表达式的值为false时，程序则不会继续判断右侧表达式的真假了，短路与中，短路这个词就是这个意思。</li></ul><h3 id="位移运算符"><a href="#位移运算符" class="headerlink" title="位移运算符"></a>位移运算符</h3><p>​        位移运算符有3个，分别是左移“&lt;&lt;”、右移“&gt;&gt;”和无符号右移“&gt;&gt;&gt;”，这三个运算符都可以将任意数字以二进制数的方式进行位移运算。其中左移“&lt;&lt;”和右移“&gt;&gt;”不会改变数字的正负，但经过无符号右移“&gt;&gt;&gt;”运算之后，只会产生正数结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2147483647</span>;</span><br><span class="line">b = b &lt;&lt; <span class="number">1</span>;</span><br><span class="line">System.out.println(b);</span><br><span class="line">b = b &gt;&gt; <span class="number">1</span>;</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127215247600.png" alt="image-20221127215247600"></p><p><strong>位移运算符位移的是补码</strong></p><h2 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th><th style="text-align:center">等价效果</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td style="text-align:center">相加结果赋予左侧</td><td style="text-align:center">a += b;</td><td style="text-align:center">a = a + b;</td></tr><tr><td style="text-align:center">-+</td><td style="text-align:center">相减结果赋予左侧</td><td style="text-align:center">a -= b;</td><td style="text-align:center">a = a -b;</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">相乘结果赋予左侧</td><td style="text-align:center">a *= b;</td><td style="text-align:center">a = a * b;</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">相除结果赋予左侧</td><td style="text-align:center">a /= b;</td><td style="text-align:center">a = a / b;</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">取余结果赋予左侧</td><td style="text-align:center">a %= b;</td><td style="text-align:center">a = a % b;</td></tr><tr><td style="text-align:center">&amp;=</td><td style="text-align:center">与结果赋予左侧</td><td style="text-align:center">a &amp;= b;</td><td style="text-align:center">a = a &amp; b;</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">=</td><td style="text-align:center">或结果赋予左侧</td><td style="text-align:center">a \</td><td>= b;</td><td>a = a \</td><td>b;</td></tr><tr><td style="text-align:center">^=</td><td style="text-align:center">异或结果赋予左侧</td><td style="text-align:center">a ^= b;</td><td style="text-align:center">a = a ^ b;</td></tr><tr><td style="text-align:center">&lt;&lt;=</td><td style="text-align:center">左移结果赋予左侧</td><td style="text-align:center">a &lt;&lt;= b;</td><td style="text-align:center">a = a &lt;&lt; b;</td></tr><tr><td style="text-align:center">&gt;&gt;=</td><td style="text-align:center">右移结果赋予左侧</td><td style="text-align:center">a &gt;&gt;= b;</td><td style="text-align:center">a = a &gt;&gt; b;</td></tr><tr><td style="text-align:center">&gt;&gt;&gt;=</td><td style="text-align:center">无符号右移结果赋予左侧</td><td style="text-align:center">a &gt;&gt;&gt;= b;</td><td style="text-align:center">a = a &gt;&gt;&gt; b;</td></tr></tbody></table></div><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">条件表达式 ？ 值<span class="number">1</span> ： 值<span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span> &lt; <span class="number">45</span> ? <span class="literal">true</span> : <span class="literal">false</span>;   <span class="comment">//b = true</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><div class="table-container"><table><thead><tr><th style="text-align:center">优先级</th><th style="text-align:center">描述</th><th style="text-align:center">运算符</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">括号</td><td style="text-align:center">()</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">正、负号</td><td style="text-align:center">+、-</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">一元运算符</td><td style="text-align:center">++、—、!</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">乘、除</td><td style="text-align:center">*、/、%</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">加、减</td><td style="text-align:center">+、-</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">移位运算</td><td style="text-align:center">&gt;&gt;、&gt;&gt;&gt;、&lt;&lt;</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">比较大小</td><td style="text-align:center">&lt;、&gt;、&gt;=、&lt;=</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">比较是否相等</td><td style="text-align:center">==、!=</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">位与运算</td><td style="text-align:center">&amp;</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">位异或运算</td><td style="text-align:center">^</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">位或运算</td><td style="text-align:center">\</td><td></td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">逻辑与运算</td><td style="text-align:center">&amp;&amp;</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">逻辑或运算</td><td style="text-align:center">\</td><td>\</td><td></td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">三元运算符</td><td style="text-align:center">? :</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">赋值运算符</td><td style="text-align:center">=</td></tr></tbody></table></div><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>​        if条件语句主要用于告知程序，当某一个条件成立时，须执行满足该条件的相关语句。if条件语句可分为单分支if语句、if···else语句和if···else if多分支语句。</p><h4 id="单分支if语句"><a href="#单分支if语句" class="headerlink" title="单分支if语句"></a>单分支if语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127222552425.png" alt="image-20221127222552425"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a == b&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a == c) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;a == c&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127222800877.png" alt="image-20221127222800877"></p><h4 id="if-···-else语句"><a href="#if-···-else语句" class="headerlink" title="if ··· else语句"></a>if ··· else语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127223824078.png" alt="image-20221127223824078"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你成年了！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你还没成年呢，臭弟弟！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127232540025.png" alt="image-20221127232540025"></p><h4 id="if-···-else-if语句"><a href="#if-···-else-if语句" class="headerlink" title="if ··· else if语句"></a>if ··· else if语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>) &#123;</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">4</span>) &#123;</span><br><span class="line">    语句<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">………… </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句n; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127233625247.png" alt="image-20221127233625247"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="number">100</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;满分！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;良&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221127234014689.png" alt="image-20221127234014689"></p><h3 id="switch分支语句"><a href="#switch分支语句" class="headerlink" title="switch分支语句"></a>switch分支语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">3</span>:</span><br><span class="line">        语句<span class="number">3</span>;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">    ……</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句n;</span><br><span class="line">        [<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDK5之前，表达式取值类型可以是byte，short，int，char</li><li>JDK5新增枚举类型支持</li><li>JDK7新增字符串支持</li></ul><p>​        switch中，匹配到case后，如果没有break，还是会继续执行之后的代码，匹配其他的case，直到遇到break或者代码执行到最后一行为止。</p><p>​        break语句的作用是跳出整个switch分支语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">41</span>;</span><br><span class="line">        <span class="keyword">switch</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221128120833469.png" alt="image-20221128120833469"></p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221128130115864.png" alt="image-20221128130115864"></p><p>​        当循环条件为true时，执行循环体内语句，当语句结束，继续判断循环条件是否为true，直到循环条件为false时，循环结束。</p><h3 id="do-···-while循环"><a href="#do-···-while循环" class="headerlink" title="do ··· while循环"></a>do ··· while循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (循环条件);</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221128130548115.png" alt="image-20221128130548115"></p><p>​        不同于while循环，do ··· while循环无论循环条件是否为true，都至少会执行一次循环。</p><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件; 循环条件; 步进表达式) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221128152823766.png" alt="image-20221128152823766"></p><h3 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (循环变量 : 遍历对象) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">     System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        foreach循环就像是从箱子里拿出球一样，每次拿出一个球（即循环变量），而遍历对象就是那个箱子。foreach一般用于遍历容器（集合，数组等）。</p><h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>​        在switch语句中，使用break可以跳出break结构。在循环中，使用break也可以跳出当前循环，从而使循环中断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>     当多个循环嵌套的时候，使用break只能跳出包含它的最内层循环。要是想跳出全部循环，可以使用标签。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">标签名: 循环体&#123;</span><br><span class="line">    <span class="keyword">break</span> 标签名;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">loop: <span class="keyword">while</span> (j &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> loop;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h3><p>​        continue是对break的补充。continue不是立即跳出循环体，而是跳过本次循环，回到循环判断的地方（for循环会先执行步进表达式）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件; 循环条件; 步进表达式) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>​        数组是具有相同数据类型的一组数据的集合，在Java中，数组是对象，并非基本数据类型。</p><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>​        一维数组实质上是一组相同数据类型的线性集合。</p><p>​        数组元素的数据类型决定了数组的数据类型。它可以是Java中任意的数据类型，包括基本类型和其他引用类型。数组名字需为一个合法的标识符，<code>[ ]</code>表明该变量是一个数组类型变量，单个<code>[ ]</code>表明该数组是一个一维数组。</p><p>​        <strong>声明数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组元素类型 数组名字[];</span><br><span class="line">数组元素类型[] 数组名字;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] array;</span><br><span class="line"><span class="type">int</span> array[];</span><br></pre></td></tr></table></figure><p>​        数组声明后，还不能访问它的任何元素，因为声明数组只是给出了数组名字和元素的数据类型，要想真正使用数组，还要为它分配内存空间。在位数组分配内存空间时，必须指定数组的长度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组名字 = <span class="keyword">new</span> 数组元素类型[数组长度];</span><br><span class="line"></span><br><span class="line">array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p><img src="/post/43d73074/image-20221128161646605.png" alt="image-20221128161646605"></p><p>​        当给数组分配内存空间后，array就指向了一个具有5个容量，数组类型为int的数组。其中array[0]表示第一个元素。[ ]中的0为数组索引，索引从0开始。</p><p>​        <strong>给一维数组赋值</strong></p><p>​        数组可以与基本类型一样进行初始化并赋值，数组初始化可以为数组中各个索引位置都存入数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一下三种初始化方式等效</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">c[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">c[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">c[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">c[<span class="number">4</span>] = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>​        <strong>获取数组长度</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组名字.length;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> array.length;  <span class="comment">//获取数组长度并赋值给length</span></span><br></pre></td></tr></table></figure><p>​        <strong>数组遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    System.out.println(array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>​        二维数组常用于表示二维表，表中的信息以行和列形式表示，第一个下标表示行，第二个下标表示列。</p><p><img src="/post/43d73074/image-20221128162949463.png" alt="image-20221128162949463"></p><p>​        <strong>声明二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组元素类型 数组名字[][];</span><br><span class="line">数组元素类型[][] 数组名字;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[][];</span><br><span class="line"><span class="type">int</span>[][] arr;</span><br></pre></td></tr></table></figure><p>​        <strong>创建二维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];  <span class="comment">//先不分配行，不分配列</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>]; <span class="comment">//给第一行分配列</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]; <span class="comment">//给第二行分配列</span></span><br></pre></td></tr></table></figure><p>​        <strong>不允许不声明行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[][<span class="number">3</span>];  <span class="comment">//错误写法</span></span><br></pre></td></tr></table></figure><p>​        <strong>给二维数组赋值</strong></p><p><img src="/post/43d73074/image-20221128165804125.png" alt="image-20221128165804125"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure><p>​        <strong>二维数组遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; arr.length; row++) &#123; <span class="comment">//arr.length表示行数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; arr[row].length; col++) &#123; <span class="comment">//arr[row].length表示该换行列数</span></span><br><span class="line">                System.out.println(arr[row][col]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>​        字符串是常量，它可以显示任何文字信息，字符串在创建后就不能更改。在Java中，单引号括起来的内容表示字符，如<code>&#39;s&#39;</code>；双引号括起来的内容表示字符串，如<code>&quot;hello world&quot;</code>。</p><p>​        Java通过java.lang.String定义了字符串，每个字符串都是一个对象，并不是基本类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        比较两个字符串不能用<code>==</code>，需要用<code>equals</code>方法;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>字符串的声明与使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用字符串常量</span></span><br><span class="line">String a;</span><br><span class="line">String b,c;</span><br><span class="line">a = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;再见&quot;</span>;</span><br><span class="line">c = b;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;再见了&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> <span class="string">&quot;我的朋友&quot;</span>, f = <span class="string">&quot;吃早餐了吗？&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用构造方法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我喜欢吃包子&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(g);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用字符数组实例化</span></span><br><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br></pre></td></tr></table></figure><p>​        <strong>字符串拼接</strong></p><p>​        字符串可以用<code>+</code>或者<code>+=</code>拼接其他字符串或者基本类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;十三&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，我今年&quot;</span> + age + <span class="string">&quot;岁。&quot;</span>;  <span class="comment">//我叫十三，我今年18岁。</span></span><br></pre></td></tr></table></figure><h2 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>; <span class="comment">//返回此字符串的长度。长度等于字符串中的字符数。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">//返回 true如果，如果， length()是 0。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span>; <span class="comment">//返回指定索引的 char价值。指数范围从 0到 length() - 1。第一序列的 char值在指数 0，在指数 1下，等等，作为数组索引。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span>; <span class="comment">//将此字符串与指定的对象比较。其结果是 true如果只有参数不 null是 String表示相同的字符序列对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span>; <span class="comment">//测试这个字符串是否以指定的前缀开始。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">endsWith</span><span class="params">(String suffix)</span>; <span class="comment">//测试如果这个字符串以指定的后缀结束。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String str)</span>; <span class="comment">//返回指数在这个字符串指定的子字符串中第一个出现的。</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span>; <span class="comment">//返回一个字符串，这个字符串的子串。前闭后开 </span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">replace</span><span class="params">(CharSequence target, CharSequence replacement)</span>; <span class="comment">//每个子串替换该字符串指定的文本替换序列靶序列匹配的文字。</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(CharSequence s)</span>; <span class="comment">//如果并且只有当此字符串包含指定的字符序列的字符串值，则返回真值。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;这是一串示例字符串&quot;</span>;</span><br><span class="line">        System.out.println(string.length()); <span class="comment">//9</span></span><br><span class="line">        System.out.println(string.isEmpty()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(string.charAt(<span class="number">2</span>)); <span class="comment">// 一</span></span><br><span class="line">        System.out.println(string.equals(<span class="string">&quot;我和它不同&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(string.equals(<span class="string">&quot;这是一串示例字符串&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(string.startsWith(<span class="string">&quot;这&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(string.endsWith(<span class="string">&quot;这&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(string.indexOf(<span class="string">&quot;一串&quot;</span>)); <span class="comment">//2</span></span><br><span class="line">        System.out.println(string.substring(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">//一串</span></span><br><span class="line">        System.out.println(string.replace(<span class="string">&quot;是&quot;</span>, <span class="string">&quot;字符串是&quot;</span>)); <span class="comment">//这字符串是一串示例字符串</span></span><br><span class="line">        System.out.println(string.replaceAll(<span class="string">&quot;字符串&quot;</span>, <span class="string">&quot;&quot;</span>)); <span class="comment">//这是一串示例</span></span><br><span class="line">        System.out.println(string.contains(<span class="string">&quot;一串&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可变字符串"><a href="#可变字符串" class="headerlink" title="可变字符串"></a>可变字符串</h1><p>​        String底层是final修饰的char[]，不能进行修改。当需要对字符串进行修改时，通常是新建一个新的字符串对象，然后再把这个字符串对象赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">s += <span class="string">&quot;, 世界&quot;</span>;</span><br></pre></td></tr></table></figure><p>​        这段代码本质上是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;你好，世界&quot;</span>;</span><br><span class="line">s = temp;</span><br></pre></td></tr></table></figure><p>​        产生了一个中间变量temp。当多次对字符串进行拼接时，就建立很多中间对象，浪费了系统资源。</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>​        StringBuffer类是线程安全的可变序列，一个类似于String类的字符串缓冲区。StingBuffer类创造的字符串是可修改的，且实体容量会随着存放的字符串长度增加而增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">10</span>);  <span class="comment">//初始化容量为10个字符</span></span><br></pre></td></tr></table></figure><p>​        <strong>常用方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span>; <span class="comment">//将指定的字符串，这个字符序列。 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCharAt</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span> ch)</span>; <span class="comment">//指定索引处的字符设置为 ch</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">insert</span><span class="params">(<span class="type">int</span> offset, String str)</span>; <span class="comment">//将字符串插入到这个字符序列中。</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>; <span class="comment">//删除的字符在字符串序列分析。</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">reverse</span><span class="params">()</span>; <span class="comment">//使这个字符序列被序列的反转所取代。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;这是一串示例字符串&quot;</span>);</span><br><span class="line">        System.out.println(sb.append(<span class="string">&quot;，追加内容&quot;</span>)); <span class="comment">//这是一串示例字符串，追加内容</span></span><br><span class="line">        sb.setCharAt(<span class="number">3</span>, <span class="string">&#x27;个&#x27;</span>);</span><br><span class="line">        System.out.println(sb); <span class="comment">//这是一个示例字符串，追加内容</span></span><br><span class="line">        System.out.println(sb.insert(<span class="number">1</span>, <span class="string">&quot;真的&quot;</span>)); <span class="comment">//这真的是一个示例字符串，追加内容</span></span><br><span class="line">        System.out.println(sb.delete(<span class="number">11</span>, <span class="number">16</span>)); <span class="comment">//这真的是一个示例字符串</span></span><br><span class="line">        System.out.println(sb.reverse()); <span class="comment">//串符字例示个一是的真这</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/post/79666db.html"/>
      <url>/post/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏数组（Sparse-Array）"><a href="#稀疏数组（Sparse-Array）" class="headerlink" title="稀疏数组（Sparse Array）"></a>稀疏数组（<em>Sparse</em> <em>Array</em>）</h1><p>​        当一个数组中大部分元素为0，或者为同一个值时，使用稀疏数保存，可以节省大量内存空间。</p><p>稀疏数组处理方法：</p><ul><li>记录数组一共有几行几列，有多少不同的值</li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序规模。</p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2></li></ul><p><img src="/post/79666db/image-20221124174038130.png" alt="image-20221124174038130"></p><p>​        当使用二维数组存储棋盘上的棋子数据时，由于棋盘上大部分都是空的，对应二维数组上数据全为0（相同)，存储大量的0浪费了很多内存空间，转换为稀疏数组</p><div class="table-container"><table><thead><tr><th style="text-align:center">11</th><th style="text-align:center">11</th><th style="text-align:center">2</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">2</td></tr></tbody></table></div><p>​        数组第 0 行，分别记录二维数组行数，列数，以及储存了多少个值</p><p>​        后面的每一行记录每一个值的行列位置坐标以及值</p><h2 id="代码模拟实现转换"><a href="#代码模拟实现转换" class="headerlink" title="代码模拟实现转换"></a>代码模拟实现转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二维数组转稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] arrToSparseArr(<span class="type">int</span>[][] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1、遍历原始的二维数组，得到有效数据的个数 n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; arr.length; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; arr[<span class="number">0</span>].length; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[row][col] != <span class="number">0</span>) &#123;</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、根据有效数据个数，创建稀疏数组，sparseArr int[n+1][3]，第一行设置为行数、列数、值数</span></span><br><span class="line">        <span class="type">int</span>[][] sparseArray = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = arr.length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = arr[<span class="number">0</span>].length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = n;</span><br><span class="line">        <span class="comment">// 3、将二维数组有效数据存入稀疏数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//用于控制给稀疏数组第几行赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; arr.length; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; arr[<span class="number">0</span>].length; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[row][col] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sparseArray[rowIndex][<span class="number">0</span>] = row;</span><br><span class="line">                    sparseArray[rowIndex][<span class="number">1</span>] = col;</span><br><span class="line">                    sparseArray[rowIndex][<span class="number">2</span>] = arr[row][col];</span><br><span class="line">                    rowIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sparseArray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转二维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sparseArr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] sparseArrToArr(<span class="type">int</span>[][] sparseArr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sparseArr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1、现根据稀疏数组第一行，得到二维数组行数和列数，简历二维数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> sparseArr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> sparseArr[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="comment">//2、遍历稀疏数组，给二维数组赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>; rowIndex &lt; sparseArr.length; rowIndex++) &#123;</span><br><span class="line">            arr[sparseArr[rowIndex][<span class="number">0</span>]][sparseArr[rowIndex][<span class="number">1</span>]] = sparseArr[rowIndex][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//建立维数组</span></span><br><span class="line">        <span class="type">int</span>[][] chessArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------原二维数组----------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二维数组换稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------稀疏数组-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] sparseArray = arrToSparseArr(chessArr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : sparseArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//稀疏数组转二维数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------稀疏数组-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] arr = sparseArrToArr(sparseArray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="/post/79666db/image-20221124184331492.png" alt="image-20221124184331492"></p><h1 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（<em>Queue</em>）</h1><ul><li>队列是一个有序列表，可以用数组（顺序存储）或者链表（链式存储）来实现</li><li>队列遵循<code>先进先出</code>原则。（FIFO，first in first out：先存入队列的数据先取出） </li></ul><p>​        队列数据总是在一端放入，再另一端取出，类似于食堂排队，先来的先打菜。</p><p> <img src="/post/79666db/webp.webp" alt="img"></p><h2 id="单向队列（Queue）"><a href="#单向队列（Queue）" class="headerlink" title="单向队列（Queue）"></a>单向队列（<em>Queue</em>）</h2><h3 id="使用数组模拟队列"><a href="#使用数组模拟队列" class="headerlink" title="使用数组模拟队列"></a>使用数组模拟队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的前一个位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的位置</span></span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221125162241349.png" alt="image-20221125162241349"></p><p>​        当指针为空时，<code>front</code>和<code>real</code>都指向索引<code>-1</code>，当插入元素<code>1</code>时，<code>real</code>先右移至索引<code>0</code>，再给索引<code>0</code>处赋值。当取出一个元素时，<code>front</code>指针右移一位，执行逻辑删除。</p><h3 id="顺序队列中的溢出现象："><a href="#顺序队列中的溢出现象：" class="headerlink" title="顺序队列中的溢出现象："></a>顺序队列中的溢出现象：</h3><ul><li>“下溢”现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。</li><li>“真上溢”现象：当队列满时，做进栈运算产生空间溢出的现象。“真上溢”是一种出错状态，应设法避免。</li><li>“假上溢”现象：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作。该现象称为”假上溢”现象。<h3 id="代码模拟"><a href="#代码模拟" class="headerlink" title="代码模拟"></a>代码模拟</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">//队列最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的前一个位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        front = -<span class="number">1</span>;</span><br><span class="line">        real = -<span class="number">1</span>;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == real;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> real == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++real] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，不能取得数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形队列（Cycle-Queue）"><a href="#环形队列（Cycle-Queue）" class="headerlink" title="环形队列（Cycle Queue）"></a>环形队列（<em>Cycle Queue</em>）</h2><p>​        使用数组模拟单向队列时，会出现<strong>假上溢</strong>现象，为避免出现假上溢现象，常用两种方法</p><ol><li>平移元素：把元素平移到队列的首部。效率低。否决</li><li>将新元素插入到第一个位置上，构成循环队列，入队和出队仍按先进先出的原则进行。操作效率高、空间利用率高。</li></ol><h3 id="设计："><a href="#设计：" class="headerlink" title="设计："></a>设计：</h3><ul><li><p>队列空时，<code>front</code>和<code>real</code>指针都指向<code>0</code></p></li><li><p><code>front</code>指向队首元素，<code>real</code>指向队尾元素</p></li><li><p>设定队列还剩一个元素时表示队列为满</p><p>可以得出结论：</p><p>队列为空时，<code>front == real</code></p><p>队列满时，<code>real</code>（指在空位），右移一个位置到达<code>front</code>，即：<code>(real+ 1) % queueSize == front</code></p><p>队列长度为<code>real</code>到<code>front</code>之间的距离的绝对值，可以表示为：<code>(real - front + queueSize) % queueSize</code> //real可能比front小，加上queueSize再取模，可以保证结果为正数，也就是取绝对值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的位置后一位</span></span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221125174205116.png" alt="image-20221125174205116"></p><h3 id="代码模拟-1"><a href="#代码模拟-1" class="headerlink" title="代码模拟"></a>代码模拟</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> queueSize; <span class="comment">//队列最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的后一个位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queueSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == real;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//队列满时，`real`（指在空位），右移一个位置到达`front`，即：`(real+ 1) % queueSize == front`</span></span><br><span class="line">        <span class="keyword">return</span> (real + <span class="number">1</span>) % queueSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[real] = val;</span><br><span class="line">        <span class="comment">//real 后移，需考虑real+1为maxSize的情况，即real指针指在数组最大索引处，此时再后移，real将变为0</span></span><br><span class="line">        real = (real + <span class="number">1</span>) % queueSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，不能取得数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> arr[front];</span><br><span class="line">        <span class="comment">//front指针后移，需考虑front+1为maxSize的情况，即front指针指在数组最大索引处，此时再后移，front将变为0</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % queueSize;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取queue中元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (real - front + queueSize) % queueSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（<em>Linked</em> <em>List</em>）</h1><p>​        链表以节点方式存储，每个节点包含<code>数据</code>与<code>指针</code>，内存空间不连续。</p><p>​        链表与数组的区别</p><ul><li>数组静态分配内存，链表动态分配内存；</li><li>数组在内存中连续，链表不连续；</li><li>数组元素在栈区，链表元素在堆区；</li><li>数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；</li><li>数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。</li></ul><p>​        数组查询快，增删慢（删除一个元素，后面的元素需要前移；增加一个元素，后面元素需要后移，若是数组满了，还需要进行数组扩容，ArrayList扩容为原来的1.5倍）</p><p>​        参考  <a href="https://www.cnblogs.com/fortunely/p/14279231.html">为什么ArrayList的扩容因子为1.5？</a></p><h2 id="单链表（Single-Linked-List）"><a href="#单链表（Single-Linked-List）" class="headerlink" title="单链表（Single Linked List）"></a>单链表（<em>Single Linked List</em>）</h2><p>​        每个节点的指针只有指向下一个节点的<code>next指针</code></p><p><img src="/post/79666db/image-20221125183305028.png" alt="image-20221125183305028"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;        <span class="comment">// 链表大小</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();    <span class="comment">// 头结点 (先初始化一下)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T data;         <span class="comment">// date存储数据</span></span><br><span class="line">        Node&lt;T&gt; next;   <span class="comment">// 存储下个节点的引用指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;date=&quot;</span> + data +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        <span class="comment">//将newNode的next指向head后一个节点，head node1 node2 ...  ——&gt;  head newNode node1 node2 ...</span></span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定位置插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        <span class="comment">//找到索引为 index-1 的node</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = pre.next;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">while</span> (pre.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到索引为 index-1 的node</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; removeNode = pre.next;</span><br><span class="line">        <span class="comment">//判断removeNode是否是尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            pre.next = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = removeNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> removeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到索引为 index 的node</span></span><br><span class="line">        Node&lt;T&gt; node = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;链表长度：&quot;</span> + <span class="built_in">this</span>.size);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SingleLinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.add(<span class="string">&quot;赵一&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="string">&quot;钱二&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.addHead(<span class="string">&quot;孙三&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.insert(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.remove(<span class="number">2</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221125191724255.png" alt="image-20221125191724255"></p><h2 id="双链表（Double-Linked-List）"><a href="#双链表（Double-Linked-List）" class="headerlink" title="双链表（Double Linked List）"></a>双链表（<em>Double Linked List</em>）</h2><p>​        双向链表与单向链表不同的是，双向链表多了一个指向前一个节点的指针<code>pre</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T data;</span><br><span class="line">Node&lt;T&gt; next;</span><br><span class="line">Node&lt;T&gt; pre;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221126143310683.png" alt="image-20221126143310683"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;  <span class="comment">//链表长度</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();    <span class="comment">// 头结点 (先初始化一下)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T data;             <span class="comment">// date存储数据</span></span><br><span class="line">        Node&lt;T&gt; next;       <span class="comment">// 存储下个节点的引用指针</span></span><br><span class="line">        Node&lt;T&gt; pre;        <span class="comment">// 存储上个节点的引用指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.pre = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;date=&quot;</span> + data +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; mid = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        Node&lt;T&gt; pre = head;         <span class="comment">//头节点</span></span><br><span class="line">        Node&lt;T&gt; next = head.next;   <span class="comment">//头节点后一个节点</span></span><br><span class="line">        pre.next = mid;</span><br><span class="line">        mid.pre = head;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//当size = 0时，next为null，next.pre会出现nullPointException</span></span><br><span class="line">            mid.next = next;</span><br><span class="line">            next.pre = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定位置插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T data, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index前一个节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; mid = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        <span class="comment">//index后一个节点</span></span><br><span class="line">        Node&lt;T&gt; next = pre.next;</span><br><span class="line">        pre.next = mid;</span><br><span class="line">        mid.pre = pre;</span><br><span class="line">        mid.next = next;</span><br><span class="line">        next.pre = mid;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="comment">//得到尾部节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">while</span> (pre.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        pre.next = node;</span><br><span class="line">        node.pre = pre;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index前一个节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index节点</span></span><br><span class="line">        Node&lt;T&gt; removeNode = pre.next;</span><br><span class="line">        <span class="comment">//index+1节点next指向index-1节点，index-1节点pre指向index+1节点，</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            pre.next = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = removeNode.next;</span><br><span class="line">            removeNode.next.pre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> removeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(T data, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index前一个节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;链表长度：&quot;</span> + <span class="built_in">this</span>.size);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DoubleLinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">DoubleLinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.add(<span class="string">&quot;赵一&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="string">&quot;钱二&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.addHead(<span class="string">&quot;孙三&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.insert(<span class="string">&quot;李四&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.remove(<span class="number">2</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221126145553653.png" alt="image-20221126145553653"></p><h1 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（<em>Stack</em>）</h1><p>​        一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表（先进后出 FILO-First in last out）。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p><img src="/post/79666db/image-20221126152558777.png" alt></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer[] arr;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Stack</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[size];</span><br><span class="line">        maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++top] = val;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">val</span> <span class="operator">=</span> arr[top];</span><br><span class="line">        arr[top] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>(<span class="number">4</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        stack.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221126160134394.png" alt="image-20221126160134394"></p><h1 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（<em>Tree</em>）</h1><p>​        树是一种非线性的数据结构，它是由n（n&gt;=0）个有限结点组成一个具有层次关系的集合。把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><ul><li>有一个特殊的结点，称为根结点，根节点没有前驱结点。</li><li>除根节点外，其余结点被分成几个互不相交的集合，每个集合又是一棵结构与树类似的子树。每棵子树的根结点有且只有一个前驱，可以有0个或多个后继。</li><li>因此，树是递归定义的。</li></ul><p><img src="/post/79666db/image-20221127041111519.png" alt="image-20221127041111519"></p><p>​        树中常用术语：</p><ul><li>节点的度：一个节点含有的子树的个数，叫做该节点的度。</li><li>叶节点和终端节点：度为零的节点。</li><li>双亲结点或父节点：如图，1为3的父节点。</li><li>孩子节点或子节点：如图，3为1的子节点。</li><li>兄弟节点：拥有相同父节点的节点称为兄弟节点。</li><li>树的度：一棵树中最大的节点的度称为树的度。</li><li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推。</li><li>树的高度或深度：树中节点的最大层次，如图，高度为3。</li><li>祖先：从跟到该节点所经分支上的所有节点。节点1是所有节点的祖先。</li><li>森林：由m（m&gt;0）棵互不相交的树的集合称为森林。</li></ul><h2 id="二叉树（Binary-Tree）"><a href="#二叉树（Binary-Tree）" class="headerlink" title="二叉树（Binary Tree）"></a>二叉树（<em>Binary Tree</em>）</h2><ul><li>每个节点最多有两棵子树，即不存在超过度为2的节点。</li><li>二叉树的子树有左右之分，且左右不能颠倒。</li></ul><h3 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h3><ul><li>若规定根节点的层数为1，则一棵非空二叉树的第n层上最多有2^(n-1)个结点。（1，2，4，8，16 ……等比数列 ）</li><li>若规定根节点的层数为1，则深度为n的二叉树的最大结点数是2^n-1。（1+2+4+8+16……等比数列求和公式）</li><li>任何一棵二叉树，如果度为0其叶结点个数为 n0， 度为2的分支结点个数为 n2,则有n0＝n2＋1</li><li>若规定根节点的层数为1，具有n个结点的满二叉树的深度，h=log2(n+1)</li><li>对于具有n个结点的完全二叉树，如果按照从上至下从左至右的数组顺序对所有节点从0开始编号，则对于序号为i的结点有：<ul><li>若i&gt;0，i位置节点的双亲序号：(i-1)/2；i=0，i为根节点编号，无双亲节点</li><li>若2i+1<n，左孩子序号：2i+1，2i+1>=n否则无左孩子</n，左孩子序号：2i+1，2i+1></li><li>若2i+2<n，右孩子序号：2i+2，2i+2>=n否则无右孩子</n，右孩子序号：2i+2，2i+2></li></ul></li></ul><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
