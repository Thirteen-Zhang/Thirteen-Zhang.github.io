<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA基础</title>
      <link href="/post/43d73074.html"/>
      <url>/post/43d73074.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Java"><a href="#什么是Java" class="headerlink" title="什么是Java"></a>什么是Java</h1><p>​        Java是1995年，由Sun公司推出的一种极富创造力的、面向对象的程序设计语言，由有“java之父”之称的Sun研究院院士Jams Gosling（詹姆斯 · 高斯林）博士亲手设计而成。他还完成了Java的原始编译器和虚拟机的设计工作。Java最初的名字是OAK，1995年被重命名为Java后，正式发布。</p><p>​        Java是一种通过解释方式来执行的语言，其语言规则和C++类似。与C++不同的是，Java语言简介得多，而且提高了可靠性，除去了最大得程序错误根源，此外它还有较高的安全性。</p><h1 id="Java的版本"><a href="#Java的版本" class="headerlink" title="Java的版本"></a>Java的版本</h1><h2 id="Java-SE"><a href="#Java-SE" class="headerlink" title="Java SE"></a>Java SE</h2><p>​        Java SE是Java的标准版，主要用于桌面应用程序的开发，同时也是Java的基础，它包含Java语言基础、JDBC操作，、I/O（输入/输出）、多线程技术。</p><h2 id="Java-EE"><a href="#Java-EE" class="headerlink" title="Java EE"></a>Java EE</h2><p>​        Java EE 是 Java 的企业版，主要用于开发企业级分布式的网络程序，如电子商务网站和ERP（企业资源规划）系统，其核心是EJB（企业Java组件模型）。</p><h2 id="Java-ME"><a href="#Java-ME" class="headerlink" title="Java ME"></a>Java ME</h2><p>​        Java ME主要用于嵌入式系统开发，如掌上电脑、手机等移动通信电子设备。因为Java ME开发不仅需要虚拟机，还需要底层操作系统支持，所以Java ME逐渐被时代淘汰，Android应运而生。</p><h1 id="JDK常用基本组件"><a href="#JDK常用基本组件" class="headerlink" title="JDK常用基本组件"></a>JDK常用基本组件</h1><p>​        javac（编译器）、jar（打包工具）、javadoc（文档生成器）、jdb（差错工具）、java（编译以后以.class作为后缀的java程序）、javap（反汇编器）以及jconsole（系统调试和监控工具）等……</p><h1 id="Java-API文档"><a href="#Java-API文档" class="headerlink" title="Java API文档"></a>Java API文档</h1><p>​        API全称为Application Programming Interfa，即应用程序编程接口。Java API文档是Java程序开发过程中不可或缺的变成词典，它记录了Java语言中海量的API，它主要包含类的继承结构、成员变量、成员方法、构造方法、静态成员描述信息和详细说明内容。</p><p>下载：<a href="https://docs.oracle.com/javase/8/docs/api/">https://docs.oracle.com/javase/8/docs/api/</a></p><p>中文汉化：</p><ul><li>链接：<code>https://pan.baidu.com/s/14Vkrmz1YCLb-m0KD8AuLXg</code> </li><li>提取码：<code>blog</code></li></ul><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>​        请先安装和配置JDK以及开发工具IDEA，详情参考本站其他博客。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>​        注释并非代码，程序编译运行时会自动忽略注释。注释是用于解释说明一段代码的文字性描述，是给人阅读的。</p><p>​        在代码中添加注释可以提高程序的可读性，注释中包含了程序的信息，方便其他程序员阅读和理解程序。</p><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>​        <code>//</code>为单行注释标记，从<code>//</code>开头到换行符为止（即这行的末尾）的所有内容都会被作为注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是单行注释</span></span><br><span class="line">code; <span class="comment">//这也是单行注释</span></span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>​        <code>/*  */</code>为多行注释标记，从<code>/*</code> 开头到<code>*/</code>为止的所有内容都会被作为注释，注释中的内容可以换行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>​        <code>/** */</code>为文档注释标记，从<code>/**</code> 开头到<code>*/</code>为止的所有内容都会被作为注释，注释中的内容可以换行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是文档注释</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleId 文章ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响函数</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>​        标识符可以简单的理解为一个名字，用来标识类名、变量名、方法名、以及数组名等……</p><p>​        Java规定，标识符由任意顺序的字母、下划线（_）、美元符号（$）和数组组成，并且第一个字符不能是数字。标识符不能是Java中的保留关键字。</p><p>​        在Java中，标识符的字母是严格区分大小写的。Java使用Unicode标准字符集，最多可以标识65535个字符，因此，Java中标识符不仅包含英文，还包含汉字、日文以及其他语言文字。</p><p>​        编写Java程序有一套工人的命名规范：</p><ul><li>类名：符合<a href="https://www.baidu.com/s?wd=%E5%A4%A7%E9%A9%BC%E5%B3%B0&amp;rsv_dl=feed_landingpage_ib">大驼峰</a>形式。</li><li>方法名：符合<a href="https://www.baidu.com/s?ie=utf-8&amp;wd=%E5%B0%8F%E9%A9%BC%E5%B3%B0">小驼峰</a>形式。</li><li>变量：符合<a href="https://www.baidu.com/s?ie=utf-8&amp;wd=%E5%B0%8F%E9%A9%BC%E5%B3%B0">小驼峰</a>形式。</li><li>常量：所有字母均大写。</li></ul><p>​        更多编码规范请参考<a href="https://www.baidu.com/s?ie=utf-8&amp;wd=%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%89%8B%E5%86%8C">阿里巴巴Java开发规范手册</a></p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>​        关键字是Java中已经被赋予特别意义的一些单词，不可以把这些单词作为标识符来使用。</p><p>常见关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span>    <span class="type">boolean</span>     <span class="keyword">break</span>       <span class="type">byte</span>        <span class="keyword">case</span>        <span class="keyword">catch</span>       <span class="type">char</span>      <span class="keyword">class</span></span><br><span class="line"><span class="title class_">else</span>        <span class="keyword">extends</span>     <span class="title class_">final</span>       <span class="keyword">finally</span>     <span class="type">float</span>       <span class="keyword">for</span>         <span class="keyword">if</span>        <span class="keyword">implements</span></span><br><span class="line"><span class="title class_">continue</span>    <span class="keyword">default</span> <span class="keyword">do</span>  <span class="type">double</span>      <span class="keyword">import</span>      <span class="keyword">instanceof</span>  <span class="type">int</span>         <span class="keyword">interface</span> <span class="title class_">long</span></span><br><span class="line"><span class="keyword">new</span>         <span class="title class_">package</span>     <span class="keyword">private</span>     <span class="keyword">protected</span>   <span class="keyword">public</span>      <span class="keyword">return</span>      <span class="type">short</span>     <span class="keyword">static</span></span><br><span class="line"><span class="built_in">super</span>       <span class="keyword">switch</span>      <span class="built_in">this</span>        <span class="keyword">throw</span>       <span class="keyword">throws</span>      <span class="keyword">transient</span>   <span class="keyword">try</span>       <span class="keyword">void</span></span><br><span class="line"><span class="keyword">volatile</span>    <span class="keyword">while</span>       <span class="keyword">synchronized</span></span><br></pre></td></tr></table></figure><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p>​        在程序的执行过程中，值能被改变的量称为变量，值不能被改变的量成为常量。变量与常量的命名都必须要使用合法的标识符。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>​        变量是一个可以改变的值，可以把他理解为一个容器，变量可以反复赋值（相当于给容器换里面的东西）。</p><p>​        声明变量：变量创建需要声明变量类型，用于告诉编译器这个变量是哪种数据类型，这样编译器才知道要给变量分配多少空间，以及它存储什么类型的数据。在程序运行过程中，如果内存空间内的值是变化的，那么这个内存空间就被成为<strong>变量名</strong>，而内存空间内的值就是<strong>变量值</strong>。</p><p>​        <strong>在声明变量时，可以不赋值，也可以直接赋值。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">24</span>;  <span class="comment">//声明int类型变量age，赋予初始值24</span></span><br><span class="line"><span class="type">int</span> year;<span class="comment">//声明int类型变量year</span></span><br><span class="line">year = <span class="number">2022</span>;<span class="comment">//赋予year值2022</span></span><br></pre></td></tr></table></figure><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>​        与变量不同，常量在整个程序中只能被赋值一次，如果被多次赋值，则会发生编译错误。</p><p>​        在Java语言中，用<code>final</code>关键字限定一个标识符为常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/post/79666db.html"/>
      <url>/post/79666db.html</url>
      
        <content type="html"><![CDATA[<h1 id="稀疏数组（Sparse-Array）"><a href="#稀疏数组（Sparse-Array）" class="headerlink" title="稀疏数组（Sparse Array）"></a>稀疏数组（<em>Sparse</em> <em>Array</em>）</h1><p>​        当一个数组中大部分元素为0，或者为同一个值时，使用稀疏数保存，可以节省大量内存空间。</p><p>稀疏数组处理方法：</p><ul><li>记录数组一共有几行几列，有多少不同的值</li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序规模。</p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2></li></ul><p><img src="/post/79666db/image-20221124174038130.png" alt="image-20221124174038130"></p><p>​        当使用二维数组存储棋盘上的棋子数据时，由于棋盘上大部分都是空的，对应二维数组上数据全为0（相同)，存储大量的0浪费了很多内存空间，转换为稀疏数组</p><div class="table-container"><table><thead><tr><th style="text-align:center">11</th><th style="text-align:center">11</th><th style="text-align:center">2</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">2</td></tr></tbody></table></div><p>​        数组第 0 行，分别记录二维数组行数，列数，以及储存了多少个值</p><p>​        后面的每一行记录每一个值的行列位置坐标以及值</p><h2 id="代码模拟实现转换"><a href="#代码模拟实现转换" class="headerlink" title="代码模拟实现转换"></a>代码模拟实现转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二维数组转稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] arrToSparseArr(<span class="type">int</span>[][] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1、遍历原始的二维数组，得到有效数据的个数 n</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; arr.length; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; arr[<span class="number">0</span>].length; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[row][col] != <span class="number">0</span>) &#123;</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、根据有效数据个数，创建稀疏数组，sparseArr int[n+1][3]，第一行设置为行数、列数、值数</span></span><br><span class="line">        <span class="type">int</span>[][] sparseArray = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = arr.length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = arr[<span class="number">0</span>].length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = n;</span><br><span class="line">        <span class="comment">// 3、将二维数组有效数据存入稀疏数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//用于控制给稀疏数组第几行赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; arr.length; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; arr[<span class="number">0</span>].length; col++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[row][col] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sparseArray[rowIndex][<span class="number">0</span>] = row;</span><br><span class="line">                    sparseArray[rowIndex][<span class="number">1</span>] = col;</span><br><span class="line">                    sparseArray[rowIndex][<span class="number">2</span>] = arr[row][col];</span><br><span class="line">                    rowIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sparseArray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 稀疏数组转二维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sparseArr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] sparseArrToArr(<span class="type">int</span>[][] sparseArr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sparseArr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1、现根据稀疏数组第一行，得到二维数组行数和列数，简历二维数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> sparseArr[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> sparseArr[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="comment">//2、遍历稀疏数组，给二维数组赋值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rowIndex</span> <span class="operator">=</span> <span class="number">1</span>; rowIndex &lt; sparseArr.length; rowIndex++) &#123;</span><br><span class="line">            arr[sparseArr[rowIndex][<span class="number">0</span>]][sparseArr[rowIndex][<span class="number">1</span>]] = sparseArr[rowIndex][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//建立维数组</span></span><br><span class="line">        <span class="type">int</span>[][] chessArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArr[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------原二维数组----------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二维数组换稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------稀疏数组-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] sparseArray = arrToSparseArr(chessArr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : sparseArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//稀疏数组转二维数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------稀疏数组-----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] arr = sparseArrToArr(sparseArray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="/post/79666db/image-20221124184331492.png" alt="image-20221124184331492"></p><h1 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（<em>Queue</em>）</h1><ul><li>队列是一个有序列表，可以用数组（顺序存储）或者链表（链式存储）来实现</li><li>队列遵循<code>先进先出</code>原则。（FIFO，first in first out：先存入队列的数据先取出） </li></ul><p>​        队列数据总是在一端放入，再另一端取出，类似于食堂排队，先来的先打菜。</p><p> <img src="/post/79666db/webp.webp" alt="img"></p><h2 id="单向队列（Queue）"><a href="#单向队列（Queue）" class="headerlink" title="单向队列（Queue）"></a>单向队列（<em>Queue</em>）</h2><h3 id="使用数组模拟队列"><a href="#使用数组模拟队列" class="headerlink" title="使用数组模拟队列"></a>使用数组模拟队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的前一个位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的位置</span></span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221125162241349.png" alt="image-20221125162241349"></p><p>​        当指针为空时，<code>front</code>和<code>real</code>都指向索引<code>-1</code>，当插入元素<code>1</code>时，<code>real</code>先右移至索引<code>0</code>，再给索引<code>0</code>处赋值。当取出一个元素时，<code>front</code>指针右移一位，执行逻辑删除。</p><h3 id="顺序队列中的溢出现象："><a href="#顺序队列中的溢出现象：" class="headerlink" title="顺序队列中的溢出现象："></a>顺序队列中的溢出现象：</h3><ul><li>“下溢”现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。</li><li>“真上溢”现象：当队列满时，做进栈运算产生空间溢出的现象。“真上溢”是一种出错状态，应设法避免。</li><li>“假上溢”现象：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作。该现象称为”假上溢”现象。<h3 id="代码模拟"><a href="#代码模拟" class="headerlink" title="代码模拟"></a>代码模拟</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">//队列最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的前一个位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        front = -<span class="number">1</span>;</span><br><span class="line">        real = -<span class="number">1</span>;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == real;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> real == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++real] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，不能取得数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[++front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="环形队列（Cycle-Queue）"><a href="#环形队列（Cycle-Queue）" class="headerlink" title="环形队列（Cycle Queue）"></a>环形队列（<em>Cycle Queue</em>）</h2><p>​        使用数组模拟单向队列时，会出现<strong>假上溢</strong>现象，为避免出现假上溢现象，常用两种方法</p><ol><li>平移元素：把元素平移到队列的首部。效率低。否决</li><li>将新元素插入到第一个位置上，构成循环队列，入队和出队仍按先进先出的原则进行。操作效率高、空间利用率高。</li></ol><h3 id="设计："><a href="#设计：" class="headerlink" title="设计："></a>设计：</h3><ul><li><p>队列空时，<code>front</code>和<code>real</code>指针都指向<code>0</code></p></li><li><p><code>front</code>指向队首元素，<code>real</code>指向队尾元素</p></li><li><p>设定队列还剩一个元素时表示队列为满</p><p>可以得出结论：</p><p>队列为空时，<code>front == real</code></p><p>队列满时，<code>real</code>（指在空位），右移一个位置到达<code>front</code>，即：<code>(real+ 1) % queueSize == front</code></p><p>队列长度为<code>real</code>到<code>front</code>之间的距离的绝对值，可以表示为：<code>(real - front + queueSize) % queueSize</code> //real可能比front小，加上queueSize再取模，可以保证结果为正数，也就是取绝对值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的位置后一位</span></span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221125174205116.png" alt="image-20221125174205116"></p><h3 id="代码模拟-1"><a href="#代码模拟-1" class="headerlink" title="代码模拟"></a>代码模拟</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> queueSize; <span class="comment">//队列最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">//队头指针，指向队头元素的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> real; <span class="comment">//队尾指针，指向队尾元素的后一个位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleArrayQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queueSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == real;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//队列满时，`real`（指在空位），右移一个位置到达`front`，即：`(real+ 1) % queueSize == front`</span></span><br><span class="line">        <span class="keyword">return</span> (real + <span class="number">1</span>) % queueSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[real] = val;</span><br><span class="line">        <span class="comment">//real 后移，需考虑real+1为maxSize的情况，即real指针指在数组最大索引处，此时再后移，real将变为0</span></span><br><span class="line">        real = (real + <span class="number">1</span>) % queueSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，不能取得数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> arr[front];</span><br><span class="line">        <span class="comment">//front指针后移，需考虑front+1为maxSize的情况，即front指针指在数组最大索引处，此时再后移，front将变为0</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % queueSize;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取queue中元素个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (real - front + queueSize) % queueSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（<em>Linked</em> <em>List</em>）</h1><p>​        链表以节点方式存储，每个节点包含<code>数据</code>与<code>指针</code>，内存空间不连续。</p><p>​        链表与数组的区别</p><ul><li>数组静态分配内存，链表动态分配内存；</li><li>数组在内存中连续，链表不连续；</li><li>数组元素在栈区，链表元素在堆区；</li><li>数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；</li><li>数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。</li></ul><p>​        数组查询快，增删慢（删除一个元素，后面的元素需要前移；增加一个元素，后面元素需要后移，若是数组满了，还需要进行数组扩容，ArrayList扩容为原来的1.5倍）</p><p>​        参考  <a href="https://www.cnblogs.com/fortunely/p/14279231.html">为什么ArrayList的扩容因子为1.5？</a></p><h2 id="单链表（Single-Linked-List）"><a href="#单链表（Single-Linked-List）" class="headerlink" title="单链表（Single Linked List）"></a>单链表（<em>Single Linked List</em>）</h2><p>​        每个节点的指针只有指向下一个节点的<code>next指针</code></p><p><img src="/post/79666db/image-20221125183305028.png" alt="image-20221125183305028"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;        <span class="comment">// 链表大小</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();    <span class="comment">// 头结点 (先初始化一下)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T data;         <span class="comment">// date存储数据</span></span><br><span class="line">        Node&lt;T&gt; next;   <span class="comment">// 存储下个节点的引用指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;date=&quot;</span> + data +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        <span class="comment">//将newNode的next指向head后一个节点，head node1 node2 ...  ——&gt;  head newNode node1 node2 ...</span></span><br><span class="line">        newNode.next = head.next;</span><br><span class="line">        head.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定位置插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> index, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        <span class="comment">//找到索引为 index-1 的node</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.next = pre.next;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">while</span> (pre.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到索引为 index-1 的node</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; removeNode = pre.next;</span><br><span class="line">        <span class="comment">//判断removeNode是否是尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            pre.next = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = removeNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> removeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到索引为 index 的node</span></span><br><span class="line">        Node&lt;T&gt; node = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        node.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;链表长度：&quot;</span> + <span class="built_in">this</span>.size);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SingleLinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.add(<span class="string">&quot;赵一&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="string">&quot;钱二&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.addHead(<span class="string">&quot;孙三&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.insert(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.remove(<span class="number">2</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221125191724255.png" alt="image-20221125191724255"></p><h2 id="双链表（Double-Linked-List）"><a href="#双链表（Double-Linked-List）" class="headerlink" title="双链表（Double Linked List）"></a>双链表（<em>Double Linked List</em>）</h2><p>​        双向链表与单向链表不同的是，双向链表多了一个指向前一个节点的指针<code>pre</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T data;</span><br><span class="line">Node&lt;T&gt; next;</span><br><span class="line">Node&lt;T&gt; pre;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221126143310683.png" alt="image-20221126143310683"></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size;  <span class="comment">//链表长度</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();    <span class="comment">// 头结点 (先初始化一下)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T data;             <span class="comment">// date存储数据</span></span><br><span class="line">        Node&lt;T&gt; next;       <span class="comment">// 存储下个节点的引用指针</span></span><br><span class="line">        Node&lt;T&gt; pre;        <span class="comment">// 存储上个节点的引用指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.pre = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;date=&quot;</span> + data +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//头部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; mid = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        Node&lt;T&gt; pre = head;         <span class="comment">//头节点</span></span><br><span class="line">        Node&lt;T&gt; next = head.next;   <span class="comment">//头节点后一个节点</span></span><br><span class="line">        pre.next = mid;</span><br><span class="line">        mid.pre = head;</span><br><span class="line">        <span class="keyword">if</span> (next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//当size = 0时，next为null，next.pre会出现nullPointException</span></span><br><span class="line">            mid.next = next;</span><br><span class="line">            next.pre = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定位置插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T data, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index前一个节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; mid = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        <span class="comment">//index后一个节点</span></span><br><span class="line">        Node&lt;T&gt; next = pre.next;</span><br><span class="line">        pre.next = mid;</span><br><span class="line">        mid.pre = pre;</span><br><span class="line">        mid.next = next;</span><br><span class="line">        next.pre = mid;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾部插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="comment">//得到尾部节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">while</span> (pre.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;T&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(data);</span><br><span class="line">        pre.next = node;</span><br><span class="line">        node.pre = pre;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index前一个节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index节点</span></span><br><span class="line">        Node&lt;T&gt; removeNode = pre.next;</span><br><span class="line">        <span class="comment">//index+1节点next指向index-1节点，index-1节点pre指向index+1节点，</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            pre.next = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.next = removeNode.next;</span><br><span class="line">            removeNode.next.pre = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> removeNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(T data, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;index有误！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index前一个节点</span></span><br><span class="line">        Node&lt;T&gt; pre = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;链表长度：&quot;</span> + <span class="built_in">this</span>.size);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        DoubleLinkedList&lt;String&gt; linkedList = <span class="keyword">new</span> <span class="title class_">DoubleLinkedList</span>&lt;&gt;();</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.add(<span class="string">&quot;赵一&quot;</span>);</span><br><span class="line">        linkedList.add(<span class="string">&quot;钱二&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.addHead(<span class="string">&quot;孙三&quot;</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.insert(<span class="string">&quot;李四&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line"></span><br><span class="line">        linkedList.remove(<span class="number">2</span>);</span><br><span class="line">        linkedList.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221126145553653.png" alt="image-20221126145553653"></p><h1 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（<em>Stack</em>）</h1><p>​        一种运算受限的线性表。限定仅在表尾进行插入和删除操作的线性表（先进后出 FILO-First in last out）。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p><img src="/post/79666db/image-20221126152558777.png" alt></p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer[] arr;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Stack</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">Integer</span>[size];</span><br><span class="line">        maxSize = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[++top] = val;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">val</span> <span class="operator">=</span> arr[top];</span><br><span class="line">        arr[top] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stack</span>(<span class="number">4</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.show();</span><br><span class="line"></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        stack.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/post/79666db/image-20221126160134394.png" alt="image-20221126160134394"></p><h1 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（<em>Tree</em>）</h1><p>​        树是一种非线性的数据结构，它是由n（n&gt;=0）个有限结点组成一个具有层次关系的集合。把它叫做树是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><ul><li>有一个特殊的结点，称为根结点，根节点没有前驱结点。</li><li>除根节点外，其余结点被分成几个互不相交的集合，每个集合又是一棵结构与树类似的子树。每棵子树的根结点有且只有一个前驱，可以有0个或多个后继。</li><li>因此，树是递归定义的。</li></ul><p><img src="/post/79666db/image-20221127041111519.png" alt="image-20221127041111519"></p><p>​        树中常用术语：</p><ul><li>节点的度：一个节点含有的子树的个数，叫做该节点的度。</li><li>叶节点和终端节点：度为零的节点。</li><li>双亲结点或父节点：如图，1为3的父节点。</li><li>孩子节点或子节点：如图，3为1的子节点。</li><li>兄弟节点：拥有相同父节点的节点称为兄弟节点。</li><li>树的度：一棵树中最大的节点的度称为树的度。</li><li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推。</li><li>树的高度或深度：树中节点的最大层次，如图，高度为3。</li><li>祖先：从跟到该节点所经分支上的所有节点。节点1是所有节点的祖先。</li><li>森林：由m（m&gt;0）棵互不相交的树的集合称为森林。</li></ul><h2 id="二叉树（Binary-Tree）"><a href="#二叉树（Binary-Tree）" class="headerlink" title="二叉树（Binary Tree）"></a>二叉树（<em>Binary Tree</em>）</h2><ul><li>每个节点最多有两棵子树，即不存在超过度为2的节点。</li><li>二叉树的子树有左右之分，且左右不能颠倒。</li></ul><h3 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h3><ul><li>若规定根节点的层数为1，则一棵非空二叉树的第n层上最多有2^(n-1)个结点。（1，2，4，8，16 ……等比数列 ）</li><li>若规定根节点的层数为1，则深度为n的二叉树的最大结点数是2^n-1。（1+2+4+8+16……等比数列求和公式）</li><li>任何一棵二叉树，如果度为0其叶结点个数为 n0， 度为2的分支结点个数为 n2,则有n0＝n2＋1</li><li>若规定根节点的层数为1，具有n个结点的满二叉树的深度，h=log2(n+1)</li><li>对于具有n个结点的完全二叉树，如果按照从上至下从左至右的数组顺序对所有节点从0开始编号，则对于序号为i的结点有：<ul><li>若i&gt;0，i位置节点的双亲序号：(i-1)/2；i=0，i为根节点编号，无双亲节点</li><li>若2i+1<n，左孩子序号：2i+1，2i+1>=n否则无左孩子</n，左孩子序号：2i+1，2i+1></li><li>若2i+2<n，右孩子序号：2i+2，2i+2>=n否则无右孩子</n，右孩子序号：2i+2，2i+2></li></ul></li></ul><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
